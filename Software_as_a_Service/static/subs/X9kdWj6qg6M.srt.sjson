{
  "start": [
    1206, 
    5040, 
    6150, 
    7140, 
    11460, 
    14250, 
    17960, 
    21240, 
    24530, 
    25440, 
    28920, 
    32180, 
    32770, 
    36970, 
    40450, 
    41460, 
    46060, 
    47300, 
    50050, 
    51990, 
    53790, 
    55260, 
    58330, 
    60990, 
    62360, 
    63630, 
    68000, 
    71410, 
    74530, 
    75600, 
    78940, 
    82280, 
    83220, 
    85330, 
    87990, 
    89910, 
    93010, 
    95050, 
    96680, 
    100060, 
    102490, 
    104410, 
    105700, 
    107040, 
    109850, 
    111820, 
    114350, 
    115540, 
    120440, 
    121380, 
    127870, 
    128990, 
    131280, 
    135320, 
    136130, 
    139880, 
    141280, 
    144950, 
    146330, 
    149090, 
    151170, 
    155410, 
    157770, 
    159230, 
    162700, 
    166540, 
    167860, 
    170970, 
    175100, 
    178540, 
    180390, 
    182080, 
    183880, 
    186500, 
    188020, 
    192400, 
    195570, 
    198800, 
    200080, 
    201600, 
    204400, 
    209260, 
    211160, 
    212380, 
    215280, 
    217520, 
    221250, 
    224850, 
    228370, 
    230030, 
    233500, 
    237630, 
    241160, 
    242270, 
    244460, 
    245630, 
    247930, 
    249500, 
    254530, 
    256750, 
    258050, 
    261399, 
    263870, 
    265690, 
    269160, 
    273120, 
    277270, 
    280630, 
    283720, 
    285650, 
    287290, 
    289410, 
    292910, 
    296570, 
    300110, 
    302840, 
    305940, 
    309610, 
    311440, 
    314410, 
    317240, 
    321680, 
    324350, 
    328530, 
    330990, 
    334990, 
    336420, 
    338430, 
    342250, 
    351340, 
    352540, 
    355610, 
    358450, 
    360790, 
    363870, 
    366500, 
    368660, 
    369570, 
    373760, 
    375470, 
    378270, 
    380200, 
    384050, 
    385620, 
    388625, 
    391570, 
    395670, 
    396960, 
    400120, 
    401260, 
    403730, 
    408720, 
    411610, 
    415980, 
    419670, 
    424590, 
    426710, 
    429130, 
    432900, 
    436270, 
    438230, 
    441480, 
    442430, 
    446170, 
    449760, 
    451230, 
    455050, 
    457750, 
    459310, 
    461980, 
    465360, 
    468300, 
    472380, 
    476010, 
    477790, 
    482230, 
    486420, 
    488660, 
    493140, 
    496290, 
    499760, 
    501740, 
    505510, 
    509730, 
    510900, 
    514230, 
    517890, 
    519530, 
    521710, 
    523250, 
    525360, 
    529510, 
    532650, 
    534050, 
    537670, 
    541340, 
    545670, 
    546710, 
    549930, 
    551010, 
    553450, 
    556555, 
    559870, 
    561500, 
    564275, 
    565750, 
    568240, 
    570780, 
    572910, 
    573730, 
    578510, 
    580260, 
    582800, 
    583940, 
    587710, 
    589040, 
    591310, 
    595850, 
    597050, 
    600600, 
    602710, 
    604560, 
    605730, 
    608580, 
    613270, 
    615230, 
    618390, 
    622120, 
    624430, 
    628030, 
    633000, 
    637040, 
    640440, 
    645470, 
    648640, 
    651230, 
    653580, 
    656800, 
    661730, 
    663700, 
    668360, 
    669850, 
    673680, 
    675800, 
    677620, 
    680590, 
    682510, 
    685400, 
    687910, 
    688920, 
    695010, 
    696920, 
    701160, 
    705490, 
    708630, 
    712900, 
    718030, 
    720200, 
    724330, 
    726360, 
    729420, 
    731210, 
    735140, 
    738210, 
    739570, 
    742120, 
    743910, 
    747090, 
    750830, 
    753910, 
    757820, 
    762060, 
    762730, 
    764480, 
    770150, 
    773680, 
    778370, 
    781440, 
    784130, 
    785290, 
    789320, 
    792130, 
    796350, 
    801640, 
    804470, 
    808280, 
    811020, 
    812540, 
    816920, 
    819300, 
    820480, 
    823240, 
    825870, 
    828280, 
    830960, 
    837300, 
    838610, 
    842130, 
    846300, 
    850795, 
    852490, 
    855600, 
    858060, 
    860700, 
    864150, 
    866720, 
    870020, 
    871180, 
    875340, 
    879380, 
    882390, 
    884060, 
    887040, 
    888910, 
    899810, 
    903610, 
    906660, 
    911200, 
    914070, 
    915430, 
    917660, 
    920720, 
    923420, 
    926240, 
    926840, 
    930260, 
    933880, 
    937180, 
    940310, 
    941840, 
    944010, 
    944920, 
    947630, 
    951160, 
    954480, 
    958640, 
    962350, 
    967500, 
    969750, 
    972880, 
    977110, 
    982680, 
    984360, 
    986190, 
    989190, 
    992130, 
    994590, 
    997930, 
    1002800, 
    1004670, 
    1008050, 
    1009460, 
    1012020, 
    1014590, 
    1015940, 
    1018760, 
    1021140, 
    1023800, 
    1027750, 
    1030130, 
    1032089, 
    1035640, 
    1037160, 
    1038980, 
    1042230, 
    1043420, 
    1044358, 
    1047380, 
    1049660, 
    1058710, 
    1060660, 
    1063610, 
    1066490, 
    1067380, 
    1070170, 
    1072040, 
    1073880, 
    1077490, 
    1078960, 
    1082830, 
    1084660, 
    1089060, 
    1092860, 
    1098470, 
    1099720, 
    1101700, 
    1104980, 
    1107370, 
    1110150, 
    1113780, 
    1117420, 
    1121110, 
    1124300, 
    1127260, 
    1128710, 
    1130580, 
    1134070, 
    1134750
  ], 
  "end": [
    5040, 
    6150, 
    7140, 
    11460, 
    14250, 
    17960, 
    21240, 
    24530, 
    25440, 
    28920, 
    32180, 
    32770, 
    36970, 
    40450, 
    41460, 
    46060, 
    47300, 
    50050, 
    51990, 
    53790, 
    55260, 
    58330, 
    60990, 
    62360, 
    63630, 
    68000, 
    71410, 
    74530, 
    75600, 
    78940, 
    82280, 
    83220, 
    85330, 
    87990, 
    89910, 
    93010, 
    95050, 
    96680, 
    100060, 
    102490, 
    104410, 
    105700, 
    107040, 
    109850, 
    111820, 
    114350, 
    115540, 
    120440, 
    121380, 
    127870, 
    128990, 
    131280, 
    135320, 
    136130, 
    139880, 
    141280, 
    144950, 
    146330, 
    149090, 
    151170, 
    155410, 
    157770, 
    159230, 
    162700, 
    166540, 
    167860, 
    170970, 
    175100, 
    178540, 
    180390, 
    182080, 
    183880, 
    186500, 
    188020, 
    192400, 
    195570, 
    198800, 
    200080, 
    201600, 
    204400, 
    209260, 
    211160, 
    212380, 
    215280, 
    217520, 
    221250, 
    224850, 
    228370, 
    230030, 
    233500, 
    237630, 
    241160, 
    242270, 
    244460, 
    245630, 
    247930, 
    249500, 
    254530, 
    256750, 
    258050, 
    261399, 
    263870, 
    265690, 
    269160, 
    273120, 
    277270, 
    280630, 
    283720, 
    285650, 
    287290, 
    289410, 
    292910, 
    296570, 
    300110, 
    302840, 
    305940, 
    309610, 
    311440, 
    314410, 
    317240, 
    321680, 
    324350, 
    328530, 
    330990, 
    334990, 
    336420, 
    338430, 
    342250, 
    351340, 
    352540, 
    355610, 
    358450, 
    360790, 
    363870, 
    366500, 
    368660, 
    369570, 
    373760, 
    375470, 
    378270, 
    380200, 
    384050, 
    385620, 
    388625, 
    391570, 
    395670, 
    396960, 
    400120, 
    401260, 
    403730, 
    408720, 
    411610, 
    415980, 
    419670, 
    424590, 
    426710, 
    429130, 
    432900, 
    436270, 
    438230, 
    441480, 
    442430, 
    446170, 
    449760, 
    451230, 
    455050, 
    457750, 
    459310, 
    461980, 
    465360, 
    468300, 
    472380, 
    476010, 
    477790, 
    482230, 
    486420, 
    488660, 
    493140, 
    496290, 
    499760, 
    501740, 
    505510, 
    509730, 
    510900, 
    514230, 
    517890, 
    519530, 
    521710, 
    523250, 
    525360, 
    529510, 
    532650, 
    534050, 
    537670, 
    541340, 
    545670, 
    546710, 
    549930, 
    551010, 
    553450, 
    556555, 
    559870, 
    561500, 
    564275, 
    565750, 
    568240, 
    570780, 
    572910, 
    573730, 
    578510, 
    580260, 
    582800, 
    583940, 
    587710, 
    589040, 
    591310, 
    595850, 
    597050, 
    600600, 
    602710, 
    604560, 
    605730, 
    608580, 
    613270, 
    615230, 
    618390, 
    622120, 
    624430, 
    628030, 
    633000, 
    637040, 
    640440, 
    645470, 
    648640, 
    651230, 
    653580, 
    656800, 
    661730, 
    663700, 
    668360, 
    669850, 
    673680, 
    675800, 
    677620, 
    680590, 
    682510, 
    685400, 
    687910, 
    688920, 
    695010, 
    696920, 
    701160, 
    705490, 
    708630, 
    712900, 
    718030, 
    720200, 
    724330, 
    726360, 
    729420, 
    731210, 
    735140, 
    738210, 
    739570, 
    742120, 
    743910, 
    747090, 
    750830, 
    753910, 
    757820, 
    762060, 
    762730, 
    764480, 
    770150, 
    773680, 
    778370, 
    781440, 
    784130, 
    785290, 
    789320, 
    792130, 
    796350, 
    801640, 
    804470, 
    808280, 
    811020, 
    812540, 
    816920, 
    819300, 
    820480, 
    823240, 
    825870, 
    828280, 
    830960, 
    837300, 
    838610, 
    842130, 
    846300, 
    850795, 
    852490, 
    855600, 
    858060, 
    860700, 
    864150, 
    866720, 
    870020, 
    871180, 
    875340, 
    879380, 
    882390, 
    884060, 
    887040, 
    888910, 
    899810, 
    903610, 
    906660, 
    911200, 
    914070, 
    915430, 
    917660, 
    920720, 
    923420, 
    926240, 
    926840, 
    930260, 
    933880, 
    937180, 
    940310, 
    941840, 
    944010, 
    944920, 
    947630, 
    951160, 
    954480, 
    958640, 
    962350, 
    967500, 
    969750, 
    972880, 
    977110, 
    982680, 
    984360, 
    986190, 
    989190, 
    992130, 
    994590, 
    997930, 
    1002800, 
    1004670, 
    1008050, 
    1009460, 
    1012020, 
    1014590, 
    1015940, 
    1018760, 
    1021140, 
    1023800, 
    1027750, 
    1030130, 
    1032089, 
    1035640, 
    1037160, 
    1038980, 
    1042230, 
    1043420, 
    1044359, 
    1047380, 
    1049660, 
    1058710, 
    1060660, 
    1063610, 
    1066490, 
    1067380, 
    1070170, 
    1072040, 
    1073880, 
    1077490, 
    1078960, 
    1082830, 
    1084660, 
    1089060, 
    1092860, 
    1098470, 
    1099720, 
    1101700, 
    1104980, 
    1107370, 
    1110150, 
    1113780, 
    1117420, 
    1121110, 
    1124300, 
    1127260, 
    1128710, 
    1130580, 
    1134070, 
    1134750, 
    1137250
  ], 
  "text": [
    "ARMANDO FOX: So let's just take a look at the two statements individually and", 
    "talk about each one separately.", 
    "So let's start with the first one.", 
    "In a duck-typed language like Ruby, LSP violations can occur even when", 
    "inheritance is not used.", 
    "I will now give you evidence that that is a true statement.", 
    "So here's a sort of trivial example of forcing an LSP violation.", 
    "Remember, we talked about mixing in modules like comparable and", 
    "innumerable.", 
    "And the idea is that those modules are effectively making assumptions, right?", 
    "They believe that there's a contract implied by the class they're being", 
    "mixed into.", 
    "So if I'm including comparable in my class, comparable assumes that the", 
    "contract is my class defines the spaceship operator in", 
    "a meaningful way.", 
    "And all I've done here is make it so that it's actually unsafe to call the", 
    "spaceship operator.", 
    "So if I have a class, and I mix comparable into it, there's nothing to", 
    "stop me from violating the contract.", 
    "The type system isn't preventing me from doing it.", 
    "I can still syntactically do it.", 
    "But at run time, this is an error because comparable is assuming that", 
    "there are things that are OK to do based on the assumption that I've", 
    "meaningfully defined spaceship.", 
    "And here I haven't.", 
    "So it is a true statement that just because I'm not using inheritance,", 
    "that doesn't guarantee that I can avoid LSP violations, right?", 
    "Now, admittedly, that example is somewhat contrived.", 
    "But what about the second one?", 
    "In a statically-typed language like Java, if the compiler reports no type", 
    "errors or warnings, then there's no LSP violations.", 
    "False, right?", 
    "Because basically, the example I showed--", 
    "even though we did the square and rectangle example in Ruby which", 
    "doesn't care too much about type signatures--", 
    "in a statically-typed language, there'd be no warnings, right?", 
    "All those methods are syntactically correct.", 
    "They all compile.", 
    "In fact, we can remind ourselves of what they were.", 
    "So you can imagine translating this into Java.", 
    "There's nothing syntactically wrong here, right?", 
    "The types all check out.", 
    "The syntax is all fine.", 
    "The problem is that the behavior makes rectangles", 
    "semantically not be squares.", 
    "So again, it's about what are the assumptions that a class makes about", 
    "its collaborators?", 
    "And do those assumptions hold when you try to substitute a subtype for a", 
    "super type?", 
    "So if you had voted that a is true but b is false, then you got it right.", 
    "Yay.", 
    "OK, onward to dependency injection.", 
    "Dependency injection is a cool concept that actually is not as hard to figure", 
    "out as you might think.", 
    "It sounded a lot more mysterious when I was first exposed to it.", 
    "But it's a really powerful concept.", 
    "And we can show some examples that arise in real life, as is my", 
    "preference for this class.", 
    "You'll sometimes hear it called dependency inversion for reasons that", 
    "will become clear in just a moment.", 
    "The problem that it's trying to solve is you've got some kind of entity--", 
    "an entity of type a in your system--", 
    "maybe it's a class or a subsystem.", 
    "And it depends on another piece of your system that's a b.", 
    "But the interface and or the implementation of b might change even", 
    "if the functionality is stable.", 
    "So what would be an example of something like that?", 
    "Well, imagine that you have different ways to store the information about a", 
    "user's session in a Rails SaaS application.", 
    "The simplest thing you could think of might be to put it in a", 
    "file on a disk somewhere.", 
    "You might also store the session in the database.", 
    "You might pack the session into the user's cookie, which is what Rails", 
    "actually does by default.", 
    "So if you implemented the session store subsystem as something that had", 
    "methods to talk to a database, you'd run into trouble if you wanted to", 
    "change the way that sessions are actually stored.", 
    "And the solution to this--", 
    "the way you get around this problem--", 
    "is that you inject a dependency that doesn't yet exist.", 
    "Now, introducing independency seems like a bad idea, but the reason it's a", 
    "good idea is that you're actually isolating the two", 
    "things from each other.", 
    "And all you're requiring is that the two of them", 
    "adhere to the same contract.", 
    "So what would that look like?", 
    "Well, now, instead of having the Session Manager talk directly in terms", 
    "of a database, we define essentially some abstract methods--", 
    "get_session and store_session.", 
    "And if we were in a statically-typed language like Java, we could define", 
    "SessionStore as an interface and say that database or whatever other", 
    "implementation of session storage we put down here would have to implement", 
    "that interface.", 
    "Now, in Ruby, we don't have first class interfaces the", 
    "way we do in Java.", 
    "But we've seen that you can use a module to essentially", 
    "get the same effect.", 
    "So the idea is the SessionStore would essentially be a module that provides", 
    "some default implementation of these methods or makes", 
    "them abstract methods.", 
    "And then for each type of implementation, you would make sure", 
    "that those methods are overridden in such a way that it does the right", 
    "thing for that implementation.", 
    "So one of the reasons you'll sometimes hear it called dependency inversion is", 
    "that before you had SessionStore depending directly on the database.", 
    "Now there's a dependency both from the database to a SessionStore interface", 
    "and from the original system component to the same interface.", 
    "So the bottom dependency has sort of been inverted relative to what it", 
    "originally was.", 
    "So some people call it dependency injection.", 
    "Some people call it dependency inversion.", 
    "In the next couple of slides, we'll talk about two design patterns that", 
    "can help you deal with this, called the adapter and the facade, and then a", 
    "couple of related design patterns that solve other problems that often arise", 
    "in the same context.", 
    "So what's an example of dependency injection in Rails?", 
    "Well, actually, a really simple example is the relationship among", 
    "models using controllers.", 
    "So imagine that in a view, you had this piece of code.", 
    "Now, we know that it's bad to just put code in views.", 
    "But the real reason this is bad is that in a view, you're exposing what", 
    "amounts to information about details of the model implementation, right?", 
    "You're basically hard coding the name of a specific database column and", 
    "table into the view.", 
    "That's clearly bad because now you've basically forced the dependency from", 
    "the view to the model.", 
    "And that's clearly a design smell.", 
    "A little bit better would be that the view actually calls some sort of a", 
    "method on the user model that does whatever what this", 
    "query would have done.", 
    "So this is somewhat better because you haven't exposed the details.", 
    "But you still have a dependency from the view to a specific", 
    "method in the model.", 
    "And of course, the reason that we do this with Model-View-Controller is", 
    "that this actually isolates the two from each other.", 
    "In this sense, the \"interface\"--", 
    "quote-- unquote--", 
    "between the view and the controller is that they share what appears to be", 
    "access to the same instance variable.", 
    "Remember, the idea is that we can set up instance variables in the", 
    "controller method that are visible to the view.", 
    "So in that case, the only requirement from the view is that", 
    "somebody sets this up.", 
    "And the only requirement from the controller's point of view is that it", 
    "be able to assign this by somehow talking to the user model.", 
    "So again, we've isolated the two ends of the dependency.", 
    "And we've inverted one of the two.", 
    "We've essentially mandated that some common interface has", 
    "to go between them.", 
    "So this is a really kind of almost a trivial example.", 
    "But it shows the basic idea of dependency injection in action.", 
    "What are a couple of design patterns that can actually help you do this?", 
    "Because dependency injection is such a useful technique, there's a couple of", 
    "different design patterns that capture common ways to do this.", 
    "And the most common one, called the adapter pattern, is what you use when", 
    "you have a client that wants to use a service.", 
    "The service supports the things you want to do.", 
    "But maybe the APIs don't match what the client expects.", 
    "Or maybe the client has to interoperate with different versions", 
    "of this service that have slightly different APIs.", 
    "Even though they all have the functionality you want, the APIs to", 
    "calling it are different--", 
    "so not so much different from our SessionStore.", 
    "Another example in Rails that's sort of a little more beefy is how Rails", 
    "deals with databases.", 
    "So there's adapters for all of the different underlying databases that", 
    "you might want to use, including SQLite and Postgres", 
    "and stuff like that.", 
    "And how is this structured in Rails?", 
    "Well, here's the sort of classic adapter design pattern.", 
    "You've got a client that wants to use some sort of a service.", 
    "And the target service is actually essentially an abstract super class", 
    "that the different subclasses could inherit from an override.", 
    "And here's how this looks in Rails.", 
    "This is how the active record is actually architected.", 
    "In active record, it's actually called an adapter, which is nice for the", 
    "point of view of using it as an example.", 
    "But there's an abstract adapter, which is really an abstract class that", 
    "defines all of the things that a database has to be able to do.", 
    "Active record base has a connection method, which really just delegates to", 
    "the abstract class.", 
    "And each type of database has to provide an adapter that overrides", 
    "those methods and implements the method correctly for", 
    "that database type.", 
    "At the level of database APIs, there are actually a lot of subtle", 
    "differences that require each one of these classes to override these", 
    "methods in a different way.", 
    "So again, what are we seeing?", 
    "There is delegation going on here.", 
    "And then there's overriding of an abstract class.", 
    "The two diagrams are pretty congruent in how this is implemented.", 
    "Here's another real-life example-- again, taken from the same application", 
    "I keep coming back to.", 
    "And it's because I try to bring in examples that go beyond what's in the", 
    "textbook and sort of the easy stuff in Rails.", 
    "I use external services to do email marketing from my theater ticketing", 
    "application.", 
    "That means that when it's time to do a marketing campaign, I want to select a", 
    "bunch of customers.", 
    "I want to create a mailing list consisting of those people.", 
    "So maybe everybody who saw this performance, I would like to email", 
    "them about a show that's similar that they might like.", 
    "And as you all know--", 
    "or if you don't know, you'll know when I give my lecture on cool things to", 
    "know for your project--", 
    "in today's world, you can't send email directly from your app.", 
    "You pretty much have to do it through an external provider.", 
    "And different organizations have actually signed up", 
    "with different providers.", 
    "Constant Contact and MailChimp are two for-profit companies that do this job.", 
    "You set up and manage mailing lists.", 
    "You can stage email campaigns to those lists-- collect all", 
    "kinds of great data.", 
    "And they both have RESTful APIs, so you can integrate their email list", 
    "management with your own apps.", 
    "So this is exactly the same scenario.", 
    "I have a notion of a customer who has some email list service", 
    "that they belong to.", 
    "And I want to be able to have them opt in or opt out of email-- update their", 
    "email address.", 
    "And here is the same pattern.", 
    "I've got a client.", 
    "I have the target-- the thing-- the service that I want to use--", 
    "and then I have a specific adapter for a particular instance of that service", 
    "that overrides these methods.", 
    "Now, in this case, you notice that I named the method subscribe,", 
    "unsubscribe, and update, rather than opt in, opt out, and update email.", 
    "That's because that's what they're called in the service.", 
    "So this is kind of a variation of the adapter pattern called the facade,", 
    "where not only am I homogenizing the API, but I'm also possibly renaming it", 
    "and making it look different so that it matches what the client expects.", 
    "And if I wanted to add another email service like Constant Contact, I would", 
    "just need to be sure that whatever operations I've provided up here can", 
    "be implemented in terms of whatever the API to that service is.", 
    "So this is a real example of using a combination of the", 
    "adapter and the facade.", 
    "A little bit more about what the difference is--", 
    "the facade is a variation of adapter where most commonly you're only using", 
    "a subset of a more elaborate API.", 
    "Or you're trying to unify some APIs that occur in different", 
    "parts of the target.", 
    "So, in our case, even though from my point of view, the only interesting", 
    "operations I want it to do on the list were subscribe,", 
    "unsubscribe, and update.", 
    "In fact, if you look at the documentation for MailChimp's RESTful", 
    "API, this is how they think of it.", 
    "They've got sort of six different parts of their service.", 
    "And each part of their service has various RESTful methods", 
    "that you can call.", 
    "And actually, what appears to me to be a single set of APIs actually touches", 
    "a couple of different parts of their service.", 
    "So not only am I adapting it to have a common API from my point of view, I'm", 
    "also unifying different APIs that don't look the same even on their end.", 
    "And in Constant Contact there's yet some other diagram.", 
    "So in this case, the adapter's also a facade.", 
    "Another useful pattern that in some ways is related is what's called a", 
    "null object pattern.", 
    "Again, the motivation for the pattern is you want to have a single API for", 
    "dealing with a certain set of objects.", 
    "But there's a special case when the object is null or when", 
    "the object is undefined.", 
    "And going back to our email example, one variation of this would be:", 
    "Suppose I'm working with a theater that doesn't sign up with any of these", 
    "email providers?", 
    "So they have no use for that API whatsoever.", 
    "It's not an activity that they do.", 
    "But I don't want to have to go to every place in my code where I try to", 
    "use that functionality and essentially have ifs around it.", 
    "So the null object pattern is a really elegant way to do this.", 
    "And I think we'll show a code example in a moment here.", 
    "The idea is that you create a stand-in object that is able to respond to the", 
    "important methods.", 
    "It just doesn't do anything.", 
    "So, for example, if I have a notion of a user being logged in, rather than", 
    "going to every place in my code and first checking if the user is nil, I", 
    "can actually just by default have the user be some special null customer.", 
    "And in a minute, we'll see what the code for this might look like.", 
    "And the null customer is defined in such a way that logged in always", 
    "returns false.", 
    "The various strings always return the empty string or something like that.", 
    "So, basically, I can use this anywhere that I would use a real user without", 
    "having to make special cases in all those different places.", 
    "One reason I wanted to show the code for doing this is that often you'll", 
    "use this in combination with yet another design pattern.", 
    "So this is a rich-in-design pattern section here.", 
    "The singleton pattern is one that you would use when you want there to be", 
    "only one of something.", 
    "So another property of our special null customer-- besides the fact that", 
    "he could be a stand-in safely for anywhere that a real", 
    "customer would be used--", 
    "is we only want to create one instance of it for the whole universe.", 
    "There's only one special value of the null customer.", 
    "This is sort of in advanced aside, but I'll walk you through it anyway", 
    "because it's a Ruby idiom that you may see in other code.", 
    "It's a way to create a class that has exactly one instance.", 
    "So what's going on here?", 
    "Here's the method that creates and returns a null customer.", 
    "It uses a class variable to first see whether we need a customer at all.", 
    "So if this is the first time that the null customer is being assigned, then", 
    "@@ instance will be null.", 
    "And I'll create a new customer as its value.", 
    "And then this is really interesting.", 
    "I'm going to put the singleton in its own class.", 
    "I'm creating a class that has exactly one instance and can never have any", 
    "more instances ever again.", 
    "And the only thing I can do is de-reference it as the single member", 
    "of that class.", 
    "Now, I can override all of the instance methods.", 
    "So now I can say null customer dot name.", 
    "I can assign the name, which you can either raise an exception or just", 
    "silently ignore it.", 
    "And I can do this without interfering with the real methods", 
    "defined on real customers.", 
    "So this is a particularly nice Ruby-istic implementation of the", 
    "singleton pattern, which ensures that there's only one copy of something in", 
    "the service of being able to do the null object pattern.", 
    "In terms of tying this back to our email example, I can imagine that I", 
    "have another override here-- a fake email list.", 
    "It still provides all these methods.", 
    "But the methods just don't do anything.", 
    "So in this example, I don't have to worry about creating a singleton", 
    "because it's an entire class that I'm interacting with.", 
    "But in the case of trying to fake out a customer, I do have", 
    "to worry about it.", 
    "Because I want to be able to call the same instance methods and have them", 
    "behave differently for the null customer than for a real customer.", 
    "The ugly way to do that is to modify the instance methods in the real", 
    "customer to say if it's the null customer, do one thing.", 
    "Otherwise, do the normal thing.", 
    "But the way that I just showed you is more Ruby-istic and", 
    "arguably more elegant.", 
    "You put it in a class by itself, literally.", 
    "And then you can override the instance methods with impunity.", 
    "The last design pattern that's related to this, which you've actually already", 
    "seen different instances of, is the proxy pattern.", 
    "The idea behind a proxy is that it pretends to be another kind of object.", 
    "But it does so with the goal of either hiding some functionality, deferring", 
    "some functionality--", 
    "so examples that we've already sort of seen.", 
    "If you want to do authentication, we talked about how you can stick the", 
    "OmniAuth authentication into the stack of modules that the rack application", 
    "server uses.", 
    "Hiding the remoteness of a service--", 
    "so you can have something that, for example, pretends to be a printer.", 
    "But what it really does is queue up a lot of work and then talk to a printer", 
    "that's far away and send the whole job.", 
    "Deferring work-- this is the example we've actually seen a lot of.", 
    "We've seen that you could use active record scopes that really behave like", 
    "proxies for objects that you can query.", 
    "They don't actually do the work until the first time somebody asks one of", 
    "them to deliver a result.", 
    "So those are an example of using a proxy to be lazy.", 
    "You can do anything to those that you could do to the regular", 
    "active record finder.", 
    "But whenever possible, rather than doing the work, they just build up an", 
    "object that could do the work when you ask for it later.", 
    "And all along, we've been dealing with association proxies.", 
    "Remember when we talked about the fact that you can say movie dot reviews.", 
    "And I asked the sort of trick question, what kind", 
    "of a thing is reviews?", 
    "And the most obvious answer that a lot of people gave immediately was, well,", 
    "it's some kind of an enumeration.", 
    "But that's not actually the case, right?", 
    "It's an object which if asked to behave like an enumeration", 
    "is able to do so.", 
    "And there's a subtle difference.", 
    "This is why duck-typing works particularly nicely for things like", 
    "the proxy and the facade and the adapter pattern--", 
    "is that it behaves like an enumeration, but it doesn't actually", 
    "do work until the last possible minute.", 
    "So that's a classic use of the proxy pattern.", 
    "And you can kind of see how all of these patterns are sort of related to", 
    "a similar goal.", 
    "You want to have what appears to be a uniform API.", 
    "But you vary when the work is done.", 
    "You vary the implementation of the work.", 
    "You're trying to provide a uniform API over APIs that are different because", 
    "you're using different services.", 
    "So all of these are examples of design patterns that support the idea of how", 
    "you do dependency injection.", 
    "So with that in mind, think about RSpec controller tests.", 
    "And from the very first time we started looking at them, one thing we", 
    "were doing is we were stubbing active record base find method-- or the where", 
    "method in some cases--", 
    "the idea being we're going to test the controller.", 
    "We know the controller is going to call find or where on the model.", 
    "But we want to be able to control what it returns.", 
    "So when we're doing that, what is it that we're doing?", 
    "Which statements are true about tests that have that behavior?", 
    "The controller being tested is tightly coupled to the model--", 
    "that if we were in a static language like Java, we would have to use", 
    "dependency injection to restructure the code so that we could achieve the", 
    "same result in the testing framework.", 
    "Both of these statements are true?", 
    "Or neither of these statements are true?", 
    "So, again, I'm sort of cheating by asking what amounts to two different", 
    "questions in one.", 
    "But nobody promised you a garden of roses."
  ]
}