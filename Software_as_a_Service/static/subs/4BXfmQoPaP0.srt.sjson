{
  "start": [
    1416, 
    2660, 
    4320, 
    7210, 
    12440, 
    16970, 
    21480, 
    25590, 
    29050, 
    32369, 
    39200, 
    42960, 
    47000, 
    49000, 
    51630, 
    53330, 
    57970, 
    62300, 
    64489, 
    68770, 
    73770, 
    75580, 
    80310, 
    84110, 
    87690, 
    90230, 
    94080, 
    97120, 
    99800, 
    101010, 
    105120, 
    107430, 
    111880, 
    115700, 
    120390, 
    122290, 
    125580, 
    129910, 
    131970, 
    134040, 
    135730, 
    139740, 
    141650, 
    145570, 
    147990, 
    149670, 
    152370, 
    154710, 
    157800, 
    159700, 
    163790, 
    165850, 
    166790, 
    172020, 
    173530, 
    177930, 
    180930, 
    181820, 
    184240, 
    187900, 
    192080, 
    196020, 
    200090, 
    201780, 
    203280, 
    207960, 
    212310, 
    216510, 
    218260, 
    220720, 
    226080, 
    227950, 
    230010, 
    232460, 
    235420, 
    236980, 
    239080, 
    240620, 
    242060, 
    242780, 
    246150, 
    250060, 
    253890, 
    255700, 
    260079, 
    262019, 
    263300, 
    267490, 
    270870, 
    272540, 
    273940, 
    277170, 
    281200, 
    282870, 
    284740, 
    288520, 
    291440, 
    295270, 
    296690, 
    300040, 
    302590, 
    305580, 
    309770, 
    311840, 
    315410, 
    317380, 
    320870, 
    323130, 
    325980, 
    329620, 
    334190, 
    336340, 
    337720, 
    339560, 
    340920, 
    344720, 
    350490, 
    353760, 
    357360, 
    360450, 
    364570, 
    367650, 
    370760, 
    373050, 
    374150, 
    378960, 
    382840, 
    385860, 
    389810, 
    393180, 
    400630, 
    404270, 
    408930, 
    411510, 
    416030, 
    419380, 
    421230, 
    424190, 
    428560, 
    432020, 
    433020
  ], 
  "end": [
    2660, 
    4320, 
    7210, 
    12440, 
    16970, 
    21480, 
    25590, 
    29050, 
    32369, 
    39200, 
    42960, 
    47000, 
    49000, 
    51630, 
    53330, 
    57970, 
    62300, 
    64489, 
    68770, 
    73770, 
    75580, 
    80310, 
    84110, 
    87690, 
    90230, 
    94080, 
    97120, 
    99800, 
    101010, 
    105120, 
    107430, 
    111880, 
    115700, 
    120390, 
    122290, 
    125580, 
    129910, 
    131970, 
    134040, 
    135730, 
    139740, 
    141650, 
    145570, 
    147990, 
    149670, 
    152370, 
    154710, 
    157800, 
    159700, 
    163790, 
    165850, 
    166790, 
    172020, 
    173530, 
    177930, 
    180930, 
    181820, 
    184240, 
    187900, 
    192080, 
    196020, 
    200090, 
    201780, 
    203280, 
    207960, 
    212310, 
    216510, 
    218260, 
    220720, 
    226080, 
    227950, 
    230010, 
    232460, 
    235420, 
    236980, 
    239080, 
    240620, 
    242060, 
    242780, 
    246150, 
    250060, 
    253890, 
    255700, 
    260079, 
    262019, 
    263300, 
    267490, 
    270870, 
    272540, 
    273940, 
    277170, 
    281200, 
    282870, 
    284740, 
    288520, 
    291440, 
    295270, 
    296690, 
    300040, 
    302590, 
    305580, 
    309770, 
    311840, 
    315410, 
    317380, 
    320870, 
    323130, 
    325980, 
    329620, 
    334190, 
    336340, 
    337720, 
    339560, 
    340920, 
    344720, 
    350490, 
    353760, 
    357360, 
    360450, 
    364570, 
    367650, 
    370760, 
    373050, 
    374150, 
    378960, 
    382840, 
    385860, 
    389810, 
    393180, 
    400630, 
    404270, 
    408930, 
    411510, 
    416030, 
    419380, 
    421230, 
    424190, 
    428560, 
    432020, 
    433020, 
    436730
  ], 
  "text": [
    "ARMANDO FOX: OK.", 
    "So let's get rolling.", 
    "We've made our way through the S and the O of SOLID.", 
    "So we're going to move on to Liskov substitution.", 
    "Barbara Liskov is a recent winner of the Turing Award and , basically, one", 
    "of her big contributions was the idea of abstract types.", 
    "And in particular, she is the designer of a language called CLU that, besides", 
    "being sort of an archetypal language that allowed people to experiment with", 
    "this concept of defining abstract data types and operations on them, and", 
    "having that be the basis of object-oriented design, it was also, I", 
    "think, one of the only other languages that has internal iterators the way", 
    "that Ruby has, where you can define an iterator independently of the", 
    "procedures that you passed it-- so pretty neat.", 
    "I actually took a compiler class and we wrote a compiler in that language.", 
    "It was thrilling, I assure you.", 
    "Anyway, the Liskov substitution principle talks specifically about", 
    "this idea of using abstract types as a way of managing the contracts among", 
    "different kinds of entities in your program.", 
    "And the idea, basically, is that if you're doing subtypes in the sense of", 
    "inheritance, it should always be safe to substitute an item of a subtype for", 
    "an item of the base type.", 
    "So that the more formal version is that if you have a method that works", 
    "on an instance of type T, it should work on any subtype of T.", 
    "Now sometimes types and subtypes equal classes and subclasses.", 
    "But, as you know, in Ruby that's not necessarily the case.", 
    "Because in a duck type language, substitutability, in the sense of", 
    "whether you can actually call a method on an object, really just depends on", 
    "whether the object responds to the method and how its collaborators", 
    "choose to collaborate with it.", 
    "But in statically type languages like Java, the idea of types and subtypes", 
    "is part of what's built into the class system.", 
    "So the easiest way to explain this, as with so many, is to see an example of", 
    "this in action and an anti-example.", 
    "So here's a sort of canonical example of illustrating the problems when you", 
    "have an LSP violation.", 
    "We have a pretty straightforward class, which is a rectangle.", 
    "It's got a width, a height, a top left corner and it's got some methods to", 
    "calculate its area and perimeter.", 
    "And now you come along and you want to class for a", 
    "square, which seems obvious.", 
    "A square should be a subclass of rectangle, so no problem--", 
    "a width, a height, and a side.", 
    "Except that unlike a rectangle, a square has this other constraint which", 
    "is that it has to have equal width and height.", 
    "So we say, OK, no problem.", 
    "We'll just override the width and height methods.", 
    "We'll override them in our super class.", 
    "And whenever we call a method to set the width, we'll also set the height", 
    "and vice versa.", 
    "And we can even provide another accessor and setter generically called", 
    "\"side.\" So you could do either of these things.", 
    "So looks OK.", 
    "The problem comes when you have procedures that expect a rectangle and", 
    "you try to pass them a square.", 
    "So for example, you can imagine a procedure that tries to make a", 
    "rectangle twice as wide as it is high, which doesn't make sense", 
    "for a square at all.", 
    "It would violate the concept of what a square is.", 
    "So the fact that you can call this on a rectangle and it's fine, but you try", 
    "to call it on a subtype or subclass of rectangle and you run into a problem", 
    "is an indicator that you've violated the Liskov substitution principle.", 
    "It's no longer safe to pass a more specialized subtype in place of", 
    "passing the base type.", 
    "So, what's a way to fix this?", 
    "Well, remember one of the two overriding themes that I kept saying", 
    "pervades the solid design principles is very often, instead of using", 
    "inheritance, you can solve a problem more elegantly with some combination", 
    "of composition and delegation.", 
    "So that's what we're going to do here.", 
    "Here's an LSP compliant version, where, in this example, square is no", 
    "longer a subtype of rectangle.", 
    "It's its own thing.", 
    "Now why do people use inheritance to begin with?", 
    "They use it because they want to be able to reuse the existing", 
    "functionality in the base class.", 
    "But the insight here is that you don't have to use", 
    "inheritance to get that effect.", 
    "You can use composition.", 
    "So, what does that mean?", 
    "It means that when you initialize a new square, one of the things you do", 
    "is you create a property of it, using an instance variable, which is a", 
    "rectangle whose sides are just set to the same value, the two", 
    "sides of the square.", 
    "You can still reuse the functionality in the rectangle class for area and", 
    "perimeter because all we're going to do is define methods", 
    "that delegate to them.", 
    "This is sort of the most syntactically obvious example of delegation.", 
    "And we can set the side of a square by setting both the width and the height", 
    "at the same time.", 
    "So see what the difference is here?", 
    "We can still reuse all of the good stuff that we wanted from rectangle by", 
    "delegating to it but it's no longer the case that we're implying that it's", 
    "safe to substitute a square for a rectangle.", 
    "We've made them different kinds of classes.", 
    "So we've broken the concept that there's some contract of a rectangle", 
    "that a square must somehow fulfill.", 
    "So what would that look like in terms of the UML diagrams", 
    "that we've been seeing?", 
    "And again, the guideline that we use to fix the example is preferring", 
    "composition and delegation over inheritance.", 
    "Well, on the left side, we have the bad, old way of doing it.", 
    "We have a rectangle that has these area and perimeter methods and it's", 
    "got width and height attributes.", 
    "And then we just tried to make \"square\" a subclass of it but we ran", 
    "into problems with this method.", 
    "If we refactor it in the following way, now we have a square being a", 
    "separate class, one of whose components--", 
    "remember that in the UML class diagram, when you have a solid arrow", 
    "it means that rectangle is now a component of square.", 
    "So we can still reuse these behaviors because the area and perimeter methods", 
    "can just delegate to their counterparts in", 
    "the rectangle component.", 
    "The rectangle still has a width and height but square", 
    "doesn't expose them directly.", 
    "They're only manipulated inside of squares on methods.", 
    "So if you run into a situation where you find that the assumptions that are", 
    "true between a class and its collaborators aren't consistent,", 
    "depending on whether you're talking about a base class or a subclass, it's", 
    "probable that there's an LSP violation going on somewhere.", 
    "And an almost surefire symptom is if you're making some change to a", 
    "subclass to accommodate new functionality in that subclass, and", 
    "then you realize that that change is going to break something in the way", 
    "that certain methods operate when they believe they're operating", 
    "on the super class.", 
    "If it's not safe to substitute the one for the other, that's a surefire sign", 
    "that you have an LSP violation and one of the names you often are given is a", 
    "\"shotgun surgery.\" So you make a small change somewhere that you think should", 
    "be localized, but then you realize that it causes unexpected problems in", 
    "other places and now you've got to go kind of fix those up as well.", 
    "So here's two fairly subtle statements about Liskov substitution violations.", 
    "And I'm kind of cheating here because I'm really asking two separate", 
    "true-false questions but I'm combining them so you only get one chance.", 
    "You can decide for yourself how you feel about that.", 
    "But the first statement is in a duck-type language, such as Ruby, LSP", 
    "violations can occur even if you don't use inheritance.", 
    "That's one statement.", 
    "The second statement is in a statically-typed language, for", 
    "example, like Java, if your program compiles and there's no type errors", 
    "and no type warnings, then you can be confident that there's also no LSP", 
    "violations.", 
    "So, from among the choices here, which of these statements are true?"
  ]
}