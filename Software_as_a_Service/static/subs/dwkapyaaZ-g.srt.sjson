{
  "start": [
    1630, 
    6290, 
    8050, 
    11090, 
    13530, 
    17230, 
    18580, 
    22830, 
    25510, 
    28440, 
    32759, 
    35660, 
    36980, 
    39580, 
    42610, 
    47390, 
    49210, 
    52170, 
    56950, 
    59090, 
    61970, 
    65680, 
    66560, 
    68830, 
    69670, 
    73960, 
    75590, 
    79070, 
    82820, 
    84610, 
    88750, 
    92600, 
    95850, 
    97700, 
    101130, 
    104010, 
    106740, 
    108440, 
    112380, 
    115230, 
    116540, 
    118060, 
    120510, 
    122720, 
    123870, 
    125630, 
    131310, 
    132520, 
    136780, 
    139390, 
    140520, 
    144710, 
    147110, 
    149850, 
    151910, 
    156130, 
    158730, 
    161520, 
    163180, 
    166450, 
    170000, 
    171370, 
    175830, 
    177280, 
    178660, 
    184170, 
    186970, 
    190280, 
    193440, 
    196170, 
    201445, 
    204900, 
    211570, 
    215710, 
    216860, 
    219440, 
    223420, 
    228010, 
    230470, 
    233180, 
    237340, 
    241130, 
    247500, 
    248830, 
    252850, 
    257149, 
    260410, 
    261800, 
    264590, 
    268260, 
    271990, 
    274370, 
    275530, 
    280330, 
    282820, 
    284020, 
    287780, 
    291000, 
    294000, 
    294990, 
    297480, 
    301590, 
    304016, 
    306450, 
    310090, 
    311910, 
    315060, 
    316710, 
    321120, 
    325210, 
    328690, 
    331600, 
    332540, 
    336510, 
    339820, 
    344490, 
    346140, 
    350020, 
    353050, 
    357170, 
    360020, 
    362530, 
    366500, 
    367840, 
    370580, 
    372960, 
    376620, 
    378150, 
    381370, 
    383950, 
    384790, 
    386210, 
    388735, 
    389640, 
    391830, 
    393300, 
    397270, 
    400290, 
    401890, 
    404940, 
    406090, 
    411200, 
    413670, 
    417490, 
    421030, 
    423450, 
    428290, 
    429150, 
    432520, 
    435110, 
    438950, 
    442640, 
    445460, 
    448800, 
    451520, 
    454870, 
    457740, 
    460420, 
    465410, 
    468670, 
    472700, 
    473670, 
    477640, 
    480340, 
    481530, 
    484450, 
    486980, 
    490010, 
    494120, 
    497790, 
    501930, 
    504470, 
    507390, 
    511480, 
    514010, 
    517020, 
    521400, 
    524220, 
    527990, 
    529130, 
    532660, 
    537120, 
    539660, 
    540790, 
    544780, 
    546450, 
    549640, 
    553050, 
    557240, 
    558860, 
    562650, 
    566610, 
    568650, 
    570070, 
    572655, 
    576280, 
    579350, 
    580550, 
    583980, 
    587360, 
    591420, 
    593070, 
    594800, 
    596330, 
    599150, 
    602475, 
    606290, 
    608880, 
    613690, 
    616630, 
    620500, 
    623730, 
    627480, 
    631180, 
    633340, 
    636500, 
    637310, 
    640460, 
    643350, 
    646670, 
    649540, 
    651720, 
    654670, 
    656240, 
    658900, 
    661130, 
    665230, 
    669440, 
    671850, 
    672790, 
    676610, 
    678740, 
    682190, 
    685020, 
    688450, 
    691500, 
    693080, 
    697190, 
    698010, 
    701310, 
    703830, 
    705650, 
    708810, 
    712210, 
    714390, 
    716020, 
    718980, 
    720260, 
    722910, 
    725380, 
    729570, 
    735060, 
    736870, 
    739310, 
    740370, 
    743350, 
    744790, 
    749180, 
    751500
  ], 
  "end": [
    6290, 
    8050, 
    11090, 
    13530, 
    17230, 
    18580, 
    22830, 
    25510, 
    28440, 
    32759, 
    35660, 
    36980, 
    39580, 
    42610, 
    47390, 
    49210, 
    52170, 
    56950, 
    59090, 
    61970, 
    65680, 
    66560, 
    68830, 
    69670, 
    73960, 
    75590, 
    79070, 
    82820, 
    84610, 
    88750, 
    92600, 
    95850, 
    97700, 
    101130, 
    104010, 
    106740, 
    108440, 
    112380, 
    115230, 
    116540, 
    118060, 
    120510, 
    122720, 
    123870, 
    125630, 
    131310, 
    132520, 
    136780, 
    139390, 
    140520, 
    144710, 
    147110, 
    149850, 
    151910, 
    156130, 
    158730, 
    161520, 
    163180, 
    166450, 
    170000, 
    171370, 
    175830, 
    177280, 
    178660, 
    184170, 
    186970, 
    190280, 
    193440, 
    196170, 
    201445, 
    204900, 
    208420, 
    215710, 
    216860, 
    219440, 
    223420, 
    228010, 
    230470, 
    233180, 
    237340, 
    241130, 
    247500, 
    248830, 
    252850, 
    257149, 
    260410, 
    261800, 
    264590, 
    268260, 
    271990, 
    274370, 
    275530, 
    280330, 
    282820, 
    284020, 
    287780, 
    291000, 
    294000, 
    294990, 
    297480, 
    301590, 
    304016, 
    306450, 
    310090, 
    311910, 
    315060, 
    316710, 
    321120, 
    325210, 
    328690, 
    331600, 
    332540, 
    336510, 
    339820, 
    344490, 
    346140, 
    350020, 
    353050, 
    357170, 
    360020, 
    362530, 
    366500, 
    367840, 
    370580, 
    372960, 
    376620, 
    378150, 
    381370, 
    383950, 
    384790, 
    386210, 
    388735, 
    389640, 
    391830, 
    393300, 
    397270, 
    400290, 
    401890, 
    404940, 
    406090, 
    411200, 
    413670, 
    417490, 
    421030, 
    423450, 
    428290, 
    429150, 
    432520, 
    435110, 
    438950, 
    442640, 
    445460, 
    448800, 
    451520, 
    454870, 
    457740, 
    460420, 
    465410, 
    468670, 
    472700, 
    473670, 
    477640, 
    480340, 
    481530, 
    484450, 
    486980, 
    490010, 
    494120, 
    497790, 
    501930, 
    504470, 
    507390, 
    511480, 
    514010, 
    517020, 
    521400, 
    524220, 
    527990, 
    529130, 
    532660, 
    537120, 
    539660, 
    540790, 
    544780, 
    546450, 
    549640, 
    553050, 
    557240, 
    558860, 
    562650, 
    566610, 
    568650, 
    570070, 
    572655, 
    576280, 
    579350, 
    580550, 
    583980, 
    587360, 
    591420, 
    593070, 
    594800, 
    596330, 
    599150, 
    602475, 
    606290, 
    608880, 
    613690, 
    616630, 
    620500, 
    623730, 
    627480, 
    631180, 
    633340, 
    636500, 
    637310, 
    640460, 
    643350, 
    646670, 
    649540, 
    651720, 
    654670, 
    656240, 
    658900, 
    661130, 
    665230, 
    669440, 
    671850, 
    672790, 
    676610, 
    678740, 
    682190, 
    685020, 
    688450, 
    691500, 
    693080, 
    697190, 
    698010, 
    701310, 
    703830, 
    705650, 
    708810, 
    712210, 
    714390, 
    716020, 
    718980, 
    720260, 
    722910, 
    725380, 
    729570, 
    735060, 
    736870, 
    739310, 
    740370, 
    743350, 
    744790, 
    749180, 
    751500, 
    755560
  ], 
  "text": [
    "ARMANDO FOX: So, the first time that I gave this question, my preferred", 
    "answer is actually orange.", 
    "I think this is a case of an acceptable violation, because what's", 
    "the role of a view in model-view-controller?", 
    "It's to display to the user relationships between things.", 
    "That's what views do.", 
    "So, from that point of view-- now if this same thing occurred in parts of", 
    "the code, in the model code, that might be a different question.", 
    "But that it's occurring in a view, I think of it as an \"acceptable", 
    "violation,\" quote unquote, because the view is fulfilling its purpose, right?", 
    "It's exposing the graph of object relationships so that the user can", 
    "navigate that graph.", 
    "So, I would have chosen, left to my own devices, orange.", 
    "But I got some complaints from people saying, well, wait a minute, you just", 
    "told us that a.b.c is like, you should salivate like a Pavlovian dog and", 
    "immediately replace it with a delegate.", 
    "I like to think I didn't make it quite that concrete, but yes.", 
    "If you held a gun to my head, you could make a case that, yes, it would", 
    "be marginally better to define this method.", 
    "By the way, I think it's a little bogus to define it just for using it", 
    "in a view, but to be fair, I would say you can make a case for", 
    "either of the above.", 
    "What that means is if you voted for any of these three, you", 
    "probably got it right.", 
    "OK, regarding the last one, it's a little bit of a red herring, or", 
    "perhaps a blue herring.", 
    "It's true that belongs_to expresses a relationship between customers and", 
    "ordering, but it doesn't express that the details of either side of that", 
    "relationship should be exposed to the other.", 
    "So, belongs_to expresses a relationship, but it doesn't let us", 
    "off the hook about saying that we don't want to traverse that", 
    "relationship and dig into friends of friends that we", 
    "shouldn't otherwise do.", 
    "Oh, yeah, so Dave's question while we were discussing this, and we'll get to", 
    "your question in a moment, was explain where the name Demeter", 
    "principle comes from.", 
    "And I did look this up, by the way.", 
    "You would think that the answer is like, oh, in the Greek mythology", 
    "there's a story about Demeter and she talked to strangers and", 
    "got killed or something.", 
    "But it's actually not that.", 
    "Demeter was the name of a software project, and they were the ones that", 
    "formulated this, so it became the Demeter principal.", 
    "Sorry, guys.", 
    "What was your question?", 
    "I see, so if we reference customer.order.something, I think it's", 
    "morally the same question.", 
    "If it's happening in a view, then because the view, yeah, your example", 
    "might arise when the customer is looking at a page with", 
    "all of their orders.", 
    "And then it might be reasonable to say customer.order.date, for example.", 
    "My position is that it's basically the same question.", 
    "The view is trying to expose information about the object graph, so", 
    "in this case it's perfectly reasonable to do that.", 
    "But if that was in your model code, you'd want to ask why things in the", 
    "customer are worried about details of the order.", 
    "So, the context in which it occurs is really what makes it a violation.", 
    "Yes?", 
    "So, the question is, in this case, isn't this an example that would", 
    "motivate the use of injecting a dependency because I've got the view", 
    "directly accessing the model?", 
    "The only dependence here is, well, @order has to be set up.", 
    "That's the controller's responsibility,", 
    "that's already the case.", 
    "The only question here is, how much is the view allowed to know about the", 
    "relationships between orders and other things?", 
    "And my argument is because it's a view, it can actually know a fair", 
    "amount about the relationship, because if that relationship changed, the", 
    "views wouldn't make sense anymore anyway.", 
    "If I decided that customers don't have a name, but they have a pseudonym or", 
    "an alias, then all of the views would have to change because the views are", 
    "intended to expose that structure to the end user of the application.", 
    "And by the way, there's no additional code in the view here that would call", 
    "for injecting the dependency.", 
    "It's really just a matter of how much is the view allowed to know.", 
    "But again, let me reiterate it's because it's a view that makes it OK.", 
    "If you saw that same exact code but you saw it in the order model, there", 
    "would be a legitimate question of why is the order reaching through a", 
    "customer and knows details about how customers implement.", 
    "In that case it's very likely would be a Demeter violation.", 
    "Let's wrap up our discussion of design patterns and solid.", 
    "And, by the way, we've spent probably a cumulative total of 70 or 80 minutes", 
    "on design patterns.", 
    "There's entire sets of books, you could take entire courses about this.", 
    "This is one of those topics that really my main goal in introducing all", 
    "of you to it is to make sure, coming out of this class, that you know what", 
    "you don't know.", 
    "Design patterns have evolved over a long period of time.", 
    "The solid design principles emerge from those as some guidelines for", 
    "identifying problems where certain design patterns might apply.", 
    "But this is to give you an idea of how people have been thinking about these", 
    "problems for a long time.", 
    "The kind of bigger, high level message here is, before you reinvent the wheel", 
    "it's worth spending some time really to just peruse the", 
    "other design patterns.", 
    "Have them in the back of your brain so that as you're creating code and as", 
    "you're creating collaborating classes, a little bit will spring up and say,", 
    "wait a minute, what I'm really doing here is I'm having one", 
    "class observe another.", 
    "Is there a way to do this that is known to work?", 
    "And what you'll find is that a lot of the design patterns are either very", 
    "elegantly implementable in Ruby compared to how much code you would", 
    "have to write in a statically-typed language.", 
    "And in many cases, there's built in support either in Ruby itself or in", 
    "Rails to help you do it.", 
    "That was the case we saw with the observer pattern, it's the case with", 
    "certain kinds of delegation.", 
    "So it's worth spending some time offline to at least flip through the", 
    "book, just as I had recommended for refactoring.", 
    "Just to give you a taste of what you might see if you start looking through", 
    "either the Rails source code or things that Rails supports in your own", 
    "applications.", 
    "There's a lot of design patterns that are either part of Rails itself, how", 
    "Rails is implemented, or that it easily supports.", 
    "We saw that the adapter pattern is used to allow Rails to have a bunch of", 
    "different databases.", 
    "We saw a version of the abstract factory pattern in a simple example,", 
    "but in fact when the database connection is created in active", 
    "record, a variant of abstract factory is used to do that.", 
    "We saw a simple example of observer and we're going to see it again when", 
    "we talk about how caching is handled.", 
    "The proxy object, well, we saw that association collections look like", 
    "innumerables, but they're really not.", 
    "One of the things they do is defer doing the work, and you can sort of", 
    "stack them up together.", 
    "Singleton, we saw an example of how we would use it in a real app, but", 
    "there's an element in Rails that does it.", 
    "Inflector is the thing that knows how to pluralize words, so it's the thing", 
    "that if you have a class called person, it looks for a database table", 
    "called people.", 
    "That's Inflector.", 
    "And it has a bunch of interesting behaviors, but there's only allowed to", 
    "ever be one of it.", 
    "So that's an example of a singleton design pattern and how it's", 
    "implemented.", 
    "We saw examples of decorator, how you could use it to decorate or add onto", 
    "existing behaviors so that you could modularly compose them together like", 
    "LEGO blocks.", 
    "And we mentioned that active record scopes is an example of", 
    "being able to do that.", 
    "There's actually an extension provided in Rails called alias method chain", 
    "that allows you to do decoration at the method level.", 
    "So, for example, suppose I have a method send email and what I want to", 
    "do is have the option of decorating that method with, let's say, send", 
    "email using PGP encryption.", 
    "Alias method chain provides me a way to take that original method and split", 
    "it into two.", 
    "One of them will be called send email without PGP encryption, and the other", 
    "will be called send email with PGP encryption.", 
    "And either one of them can readily delegate to the original method.", 
    "So there's a bunch of different kinds support for decoration and delegation.", 
    "The command pattern we didn't talk about, but the command pattern is", 
    "basically defining a small domain-specific language that allows a", 
    "small number of commands to support some task.", 
    "And database migrations in active record are an example of that.", 
    "There's a small set of things that you can do in a migration, to set up", 
    "columns, change them, and so on.", 
    "The iterator design pattern is so ubiquitous in Ruby that you don't even", 
    "think about using it, but in fact we've been using it all the time.", 
    "Ever since the beginning of the course, we've said don't write things", 
    "like for loops.", 
    "Instead think about the collections managing their own traversal and you", 
    "just providing a procedure that knows what to do as each", 
    "element is handed back.", 
    "So you've actually been using the iterator design pattern all the time.", 
    "The next time you get a chance, go back to Java and do it there and tell", 
    "me tell me which one's more painful.", 
    "And in all of these cases, all of the examples that we've seen, duck typing", 
    "has helped simplify some of the ways the mechanics of how you express the", 
    "design patterns, in part, because the type system often provides a", 
    "constraint that gets in the way of doing the design pattern.", 
    "In fact, some of the design patterns we don't cover either in the class or", 
    "in the book, as the book explains, we don't cover them because they solve a", 
    "problem that doesn't exist in a dynamically-typed language.", 
    "They only exist because statically-typed languages, sometimes", 
    "you need a way to work around the type system in some cases.", 
    "I mentioned this before, but I'll mention it again.", 
    "Most of the ideas underpinning the solid principles came out of the use", 
    "of statically-typed languages.", 
    "So it's not a surprise that some of the principals have more impact there", 
    "in the sense that the cost of not obeying them is immediately perceived", 
    "to be higher in those languages compared to the cost of not obeying", 
    "them in Ruby.", 
    "Remember that a lot of the design patterns are trying to avoid changes", 
    "that would modify the type signature.", 
    "Because in a static language if, you modify the type signature you have to", 
    "recompile the world, libraries that depend on you might not work anymore.", 
    "Those kind of problems don't arise in software as a service with Rails, and", 
    "Ruby doesn't really use types.", 
    "So there's a number of things that the cost of violating them in Ruby will", 
    "seem lower initially, because you don't have the upfront pain of, oh my", 
    "gosh, I changed something and now I have to gratuitously", 
    "recompile the world.", 
    "Having to gratuitously recompile the world when it doesn't feel like you", 
    "should have to, in a static language that's one of the indicators that", 
    "you've made a mistake somewhere, that something is not right about your", 
    "application structure.", 
    "But because Ruby doesn't have that step, it's easy to miss the fact that", 
    "you are violating one of these principles.", 
    "Similarly, since Ruby isn't compiled, avoiding changes that require", 
    "recompiling, well, you'll never know.", 
    "That's not going to be your tip off.", 
    "So, it's worth keeping in mind.", 
    "That doesn't make the solid principles any less useful, it just means you", 
    "have to be a little more vigilant using some of the examples we showed", 
    "of when you might be in violation of one and which design patterns might", 
    "help you fix it", 
    "So, I would wrap up what we've been talking about as saying we've seen a", 
    "handful of design patterns that represent successful solutions to", 
    "classes of problems, but we've also seen this idea of solid principles", 
    "that describe good and bad interactions among classes.", 
    "So, our presentation has really been, where do these principles come from,", 
    "and then which design patterns would help you if you're trying to be more", 
    "compliant with each of the principles.", 
    "Some of the patterns are so useful in software as a service that they've", 
    "been reified.", 
    "In other words, they've been made a first class entity and put on a", 
    "throne, reified, in Rails itself.", 
    "Like the fact that the observer design pattern has built-in support by using", 
    "the active record model life cycle hooks.", 
    "The idea of patterns can be applied at many levels.", 
    "So, we've been looking at design patterns which are the Gang of Four", 
    "patterns, of the GoF patterns.", 
    "But as we said originally, there is patterns of architecture, like", 
    "model-view-controller, pipe and filter.", 
    "There's patterns of computation, computations like linear algebra, fast", 
    "Fourier transform, things that arise in a lot of different problem domains.", 
    "So as a practice in software engineering, you're going to run into", 
    "patterns a lot.", 
    "And it's worth the upfront cost to understand what they buy you, because", 
    "if you understand and apply them properly, they can actually save you", 
    "from reimplementing something badly and basically repeating", 
    "other people's mistakes.", 
    "What underlies all of the patterns, as well as the motivation for the solid", 
    "principles, is we're trying to separate things that change from", 
    "things that stay the same.", 
    "And what we said in solid is we're programming to an interface, not an", 
    "implementation.", 
    "That means that often inheritance is not quite the right tool to solve the", 
    "job, but some combination of composition and", 
    "delegation can solve it.", 
    "So, we saw that for dependency injection, we saw it in the adapter", 
    "pattern, we saw it in Liskov substitution.", 
    "And all of these are made easier by duck typing in Ruby.", 
    "So this is just an introduction.", 
    "I want to know you don't know, and hopefully this gets you", 
    "part of the way there.", 
    "But it wouldn't be a segment unless we closed it with a question.", 
    "So here's a good synthesis one.", 
    "As I mentioned, in active record there is an abstract adapter class that", 
    "connects the databases, and each subclass of abstract adapter knows how", 
    "to talk to one kind of database.", 
    "You can add new types of abstract adapters so that you can", 
    "work with new database.", 
    "And then you modify your configuration file to say which type", 
    "of database it is.", 
    "So my question is, which of these four solid principles is not one of the", 
    "things that that design shows off?", 
    "Open/closed, dependency injection, Demeter, or Liskov substitution."
  ]
}