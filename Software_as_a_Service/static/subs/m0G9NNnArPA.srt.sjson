{
  "start": [
    700, 
    3090, 
    4820, 
    7310, 
    14860, 
    17990, 
    22560, 
    24180, 
    28750, 
    31110, 
    33920, 
    39380, 
    41300, 
    42540, 
    44470, 
    45770, 
    50190, 
    52430, 
    56800, 
    59220, 
    61380, 
    64030, 
    65610, 
    68790, 
    71900, 
    73490, 
    78730, 
    80780, 
    85510, 
    88940, 
    92310, 
    95620, 
    99470, 
    102430, 
    103250, 
    106590, 
    110610, 
    112670, 
    116350, 
    117930, 
    121320, 
    127590, 
    133310, 
    134960, 
    137560, 
    139280, 
    142450, 
    145230, 
    147230, 
    148760, 
    153070, 
    156190, 
    160080, 
    162890, 
    164770, 
    168110, 
    171280, 
    173780, 
    176840, 
    179520, 
    180510, 
    183810, 
    184550, 
    187380, 
    190020, 
    194950, 
    196670, 
    199810, 
    200800, 
    205140, 
    208310, 
    210930, 
    211890, 
    215740, 
    219840, 
    222530, 
    225220, 
    227790, 
    229050, 
    232260, 
    238690, 
    242070, 
    246050, 
    249470, 
    250810, 
    256279, 
    258200, 
    262820, 
    264480, 
    266800, 
    267700, 
    270440, 
    271420, 
    274730, 
    276220, 
    282610, 
    285330, 
    288730, 
    292140, 
    295830, 
    296990, 
    298450, 
    302340, 
    305360, 
    308410, 
    312510, 
    314790, 
    316650, 
    321360, 
    323210, 
    328040, 
    330540, 
    333980, 
    336460, 
    339290, 
    343150, 
    347860, 
    350900, 
    352520, 
    355570, 
    358200, 
    360340, 
    362980, 
    364520, 
    367670, 
    370370, 
    372640, 
    375980, 
    378540, 
    379590, 
    382690, 
    385990, 
    387520, 
    390460, 
    395120, 
    398220, 
    402950, 
    405460, 
    408480, 
    412790, 
    415620, 
    418840, 
    422990, 
    424930, 
    427790, 
    431230, 
    433290, 
    434540, 
    437860, 
    441700, 
    443380, 
    444950, 
    447510, 
    452680, 
    455430, 
    457650, 
    461640, 
    462560, 
    464270, 
    469070, 
    474910, 
    476360, 
    478260, 
    481770, 
    486110, 
    487310, 
    490430, 
    494170, 
    494980, 
    498530, 
    500190, 
    502530, 
    503130, 
    507180, 
    510790, 
    514390, 
    515710, 
    517030, 
    520070, 
    523539, 
    526830, 
    528260, 
    530590, 
    532840, 
    533790, 
    536870, 
    538970, 
    542300, 
    545810, 
    550050, 
    552720, 
    556140, 
    558540, 
    562030, 
    563280, 
    565460, 
    570600, 
    574220, 
    575310, 
    578290, 
    583150, 
    585030, 
    587460, 
    588670, 
    592370, 
    594130, 
    595560, 
    599290, 
    602730, 
    606950, 
    611330, 
    614990, 
    618830, 
    622200, 
    625400, 
    628730, 
    630860, 
    632670, 
    636090, 
    639430, 
    642180, 
    643550, 
    648140, 
    649660, 
    653480, 
    655660, 
    658670, 
    661880, 
    664440, 
    665730, 
    669960, 
    671280, 
    673550, 
    676840, 
    681340, 
    683920, 
    687450, 
    689430, 
    693470, 
    696410, 
    698230, 
    699940, 
    703680, 
    707140, 
    710220, 
    712540, 
    716550, 
    718160, 
    718800, 
    722520, 
    723420, 
    725720, 
    727490, 
    728900, 
    731320, 
    732620, 
    734380, 
    737610, 
    741120, 
    744140, 
    745400, 
    748610, 
    753670, 
    755250, 
    757950, 
    762020, 
    764700, 
    765720, 
    768750, 
    769760, 
    773980, 
    776080, 
    779800, 
    780990, 
    783920, 
    785780, 
    787130, 
    790540, 
    792370, 
    794700, 
    799210, 
    801890, 
    805020, 
    807370, 
    810250, 
    811030, 
    813550, 
    816470, 
    821190, 
    825350, 
    829360, 
    833250, 
    835890, 
    837540, 
    839060, 
    841840, 
    842870, 
    846370, 
    850190, 
    850930, 
    854560, 
    858840, 
    862080, 
    865950, 
    868410, 
    870200, 
    873635, 
    875900, 
    878820, 
    882530, 
    886100
  ], 
  "end": [
    3090, 
    4820, 
    7310, 
    11740, 
    17990, 
    22560, 
    24180, 
    28750, 
    31110, 
    33920, 
    39380, 
    41300, 
    42540, 
    44470, 
    45770, 
    50190, 
    52430, 
    56800, 
    59220, 
    61380, 
    64030, 
    65610, 
    68790, 
    71900, 
    73490, 
    78730, 
    80780, 
    85510, 
    88940, 
    92310, 
    95620, 
    99470, 
    102430, 
    103250, 
    106590, 
    110610, 
    112670, 
    116350, 
    117930, 
    121320, 
    127590, 
    133310, 
    134960, 
    137560, 
    139280, 
    142450, 
    145230, 
    147230, 
    148760, 
    153070, 
    156190, 
    160080, 
    162890, 
    164770, 
    168110, 
    171280, 
    173780, 
    176840, 
    179520, 
    180510, 
    183810, 
    184550, 
    187380, 
    190020, 
    194950, 
    196670, 
    199810, 
    200800, 
    205140, 
    208310, 
    210930, 
    211890, 
    215740, 
    219840, 
    222530, 
    225220, 
    227790, 
    229050, 
    232260, 
    238690, 
    242070, 
    246050, 
    249470, 
    250810, 
    256279, 
    258200, 
    262820, 
    264480, 
    266800, 
    267700, 
    270440, 
    271420, 
    274730, 
    276220, 
    282610, 
    285330, 
    288730, 
    292140, 
    295830, 
    296990, 
    298450, 
    302340, 
    305360, 
    308410, 
    312510, 
    314790, 
    316650, 
    321360, 
    323210, 
    328040, 
    330540, 
    333980, 
    336460, 
    339290, 
    343150, 
    347860, 
    350900, 
    352520, 
    355570, 
    358200, 
    360340, 
    362980, 
    364520, 
    367670, 
    370370, 
    372640, 
    375980, 
    378540, 
    379590, 
    382690, 
    385990, 
    387520, 
    390460, 
    395120, 
    398220, 
    402950, 
    405460, 
    408480, 
    412790, 
    415620, 
    418840, 
    422990, 
    424930, 
    427790, 
    431230, 
    433290, 
    434540, 
    437860, 
    441700, 
    443380, 
    444950, 
    447510, 
    452680, 
    455430, 
    457650, 
    461640, 
    462560, 
    464270, 
    469070, 
    474910, 
    476360, 
    478260, 
    481770, 
    486110, 
    487310, 
    490430, 
    494170, 
    494980, 
    498530, 
    500190, 
    502530, 
    503130, 
    507180, 
    510790, 
    514390, 
    515710, 
    517030, 
    520070, 
    523539, 
    526830, 
    528260, 
    530590, 
    532840, 
    533790, 
    536870, 
    538970, 
    542300, 
    545810, 
    550050, 
    552720, 
    556140, 
    558540, 
    562030, 
    563280, 
    565460, 
    570600, 
    574220, 
    575310, 
    578290, 
    583150, 
    585030, 
    587460, 
    588670, 
    592370, 
    594130, 
    595560, 
    599290, 
    602730, 
    606950, 
    611330, 
    614990, 
    618830, 
    622200, 
    625400, 
    628730, 
    630860, 
    632670, 
    636090, 
    639430, 
    642180, 
    643550, 
    648140, 
    649660, 
    653480, 
    655660, 
    658670, 
    661880, 
    664440, 
    665730, 
    669960, 
    671280, 
    673550, 
    676840, 
    681340, 
    683920, 
    687450, 
    689430, 
    693470, 
    696410, 
    698230, 
    699940, 
    703680, 
    707140, 
    710220, 
    712540, 
    716550, 
    718160, 
    718800, 
    722520, 
    723420, 
    725720, 
    727490, 
    728900, 
    731320, 
    732620, 
    734380, 
    737610, 
    741120, 
    744140, 
    745400, 
    748610, 
    753670, 
    755250, 
    757950, 
    762020, 
    764700, 
    765720, 
    768750, 
    769760, 
    773980, 
    776080, 
    779800, 
    780990, 
    783920, 
    785780, 
    787130, 
    790540, 
    792370, 
    794700, 
    799210, 
    801890, 
    805020, 
    807370, 
    810250, 
    811030, 
    813550, 
    816470, 
    821190, 
    825350, 
    829360, 
    833250, 
    835890, 
    837540, 
    839060, 
    841840, 
    842870, 
    846370, 
    850190, 
    850930, 
    854560, 
    858840, 
    862080, 
    865950, 
    868410, 
    870200, 
    873635, 
    875900, 
    878820, 
    882530, 
    886100, 
    887410
  ], 
  "text": [
    "Armando Fox: OK, we have some consensus on green.", 
    "So let's go through these.", 
    "Show has many Vouchers, through show dates.", 
    "Well, there's certainly a multiplicity of shows having Showdates.", 
    "And there's a multiplicity of Vouchers having Showdates.", 
    "So this is actually a good example of a through association being modeled in", 
    "a UML diagram.", 
    "So in fact, I can traverse the association from Show to Showdates and", 
    "thence to Vouchers.", 
    "So this one actually works out.", 
    "Skipping around at random, Voucher belongs to Vouchertype, well, there is", 
    "the aggregation relation right there.", 
    "No problem with that.", 
    "What about Customer has many Donations?", 
    "A little bit more tricky.", 
    "But it actually works out because a Customer has many Items, and a", 
    "Donation is just a subclass of that.", 
    "So customers have both many Vouchers and many Donations, but it's really", 
    "just indirectly through the fact that those things subclass", 
    "from a common ancestor.", 
    "And Item belongs to Vouchertype is the only one that actually can't be", 
    "supported through the diagram.", 
    "So if you said green, you said the right thing.", 
    "OK, so the way we're going to do this is, we're going to go through each of", 
    "the five letters in solid.", 
    "And for each one, I'll try to explain why the principal came into existence,", 
    "what's the problem that it helps try to solve.", 
    "We'll introduce one or sometimes more than one design pattern that can", 
    "sometimes help you solve this problem if it arises in your code, try to help", 
    "you identify cases where this problem might be arising in your code.", 
    "And in some cases, we even have some source code examples.", 
    "So we'll start with the single responsibility principle, which sounds", 
    "just like what its name implies, that a class should only have one", 
    "responsibility.", 
    "That means it should only have one reason to change.", 
    "So the ideas is that if a class does multiple things, each time you change", 
    "any those things, you have to change the class.", 
    "And the goal of the solid principles and of reuse is to minimize", 
    "unnecessary change.", 
    "Now, a thing that's going to come up over and over in all of these is that", 
    "the cost of unnecessary change in Ruby appears to be lower than it really is.", 
    "If you make a gratuitous change, let's say, in a Java library or C# library--", 
    "and what's a gratuitous change?", 
    "It's one that, for examples, suppose you want to add some", 
    "functionality to something.", 
    "Adding some functionality requires recompiling a library.", 
    "The things that used to use that library clearly weren't using the new", 
    "functionality, but now you have to relink them because", 
    "the library has changed.", 
    "So a lot of these principles, and the design patterns that solve them, kind", 
    "of are motivated by the mentality that there's an upfront and very obvious", 
    "cost in statically typed languages is to making gratuitous changes.", 
    "In Ruby, the changes don't appear to be so painful because there isn't", 
    "really a compile cycle that gets forced.", 
    "But if you're working on a reusable artifact, the idea that other people", 
    "might have to change their code because you added stuff still amounts", 
    "to, sort of, a gratuitous, unacceptable change.", 
    "So just keep in mind as we talk about some of these that the cost of change", 
    "doesn't have to be just in the form of recompiling and relinking", 
    "gratuitously.", 
    "It can be in that other people who rely on your code realize that there's", 
    "now a new version.", 
    "And they've got to worry about whether their stuff has been tested with the", 
    "new version.", 
    "So a single, simple test for the SRP is, can you save in 25 words or less", 
    "what the class does?", 
    "If you can't say it in 25 words or less, it's probably trying to do too", 
    "many things.", 
    "And a classic example that comes up in Rails applications is, if you have a", 
    "user model, a whole bunch of junk ends up getting thrown in there.", 
    "And it's often because you're confusing the concept of a model with", 
    "the concept a role.", 
    "So for example, a user is a moviegoer, but they're also the unit of", 
    "authentication, proving that they are somebody who can do certain things.", 
    "They may also be a member of a social network, and if all of the", 
    "functionality for these things goes into a single class, you end up with a", 
    "really big class file that has to change when any of", 
    "those things changes.", 
    "So that sort of obvious tip off when you've violated SRP.", 
    "But as with refactoring, there's also a way that you can quantify it.", 
    "There's a family of metrics called the LCOM metrics, or lack of cohesion of", 
    "methods, can quantifiably tell you whether you're on the wrong track.", 
    "And there's at least two variants that we've identified that're pretty", 
    "commonly used.", 
    "One of them basically counts the ratio of instance methods and how many", 
    "instance variables they access.", 
    "So imagine that you had a class where every instance method is accessing", 
    "only one instance variable.", 
    "You could make a case that those incidents methods really have nothing", 
    "to do with each other.", 
    "There's no instance method that depends on the state of", 
    "more than one variable.", 
    "It's almost like each method being its own little class or having its own", 
    "little responsibility.", 
    "So in those cases, you'll get a number that is pretty close to 1, which means", 
    "your class has lack of cohesion.", 
    "A number that's pretty close to zero means that most of the instance", 
    "methods are accessing most of the variables, so you have good cohesion.", 
    "The other variant is LCOM-4, which counts the number of connected", 
    "components in a graph.", 
    "So basically what does this mean?", 
    "If you've got three methods that, in and of themselves, have high cohesion", 
    "with respect to a set of instance variables, and you've got three other", 
    "methods that have high cohesion with a completely different set of instance", 
    "variables, but between those two cliques, there's very low cohesion,", 
    "then, really, those are two responsibilities.", 
    "That's really what all LCOM-4 is trying to count.", 
    "It's trying to count groups of related methods in terms of which groups of", 
    "instance variables they access.", 
    "And roughly speaking, the nice thing about LCOM-4 is, if you get roughly 1,", 
    "that means your class has roughly 1 responsibilities.", 
    "If you get N, your class has roughly N responsibilities.", 
    "And you can get rid of n minus 1 of them.", 
    "But in either case, higher numbers are bad because it means that your class", 
    "is probably doing more than one thing.", 
    "An interesting debate that's come up in the Ruby community is whether", 
    "Active Record models violate the single responsibility", 
    "principle out of the box.", 
    "Because they seem to mix behaviors in one class.", 
    "They know how to load, and store, and delete themselves.", 
    "That's the database access part of them.", 
    "They know about all the cool stuff with associations that we saw.", 
    "They know about validations.", 
    "And that's all in addition to whatever it is the class actually does.", 
    "So whatever the business logic of the class is, it also has", 
    "all these other behaviors.", 
    "Most Active Record behaviors are actually included as modules, so on", 
    "the one hand, you could say well, technically, it's not", 
    "really part of the class.", 
    "It's this separate group of stuff that gets mixed in--", 
    "but there is actually a big debate about this in the Ruby community.", 
    "It's about Active Record in general.", 
    "We'll come back to that when we do our little question.", 
    "Here's a specific example of how you could extract a module or extract a", 
    "class in order to improve SRP behavior.", 
    "So what I've done here is, I've shown two different versions of dealing with", 
    "having an Address associated with a Moviegoer.", 
    "And why might you care about having that be a separate thing?", 
    "Well, on first blush, it doesn't seem like there's any problem in having", 
    "Address fields associated with part of the Moviegoer model.", 
    "But if you now start to add behaviors that are really about addresses and", 
    "not about moviegoers, for example, you can call out to the post office server", 
    "that canonicalizes the address for you.", 
    "Or you can check whether a zip code is valid, or whether two addresses are", 
    "near each other, or whether two addresses are actually the same.", 
    "Now you're talking about responsibilities that don't really", 
    "have a lot to do with moviegoers.", 
    "And you might want to pull them out into their own separate class.", 
    "So using our Pastebin example, there's a couple of different", 
    "ways you can do this.", 
    "And I'll show you two examples.", 
    "Again, most of these, there isn't a single right way to do it.", 
    "One possibility is to keep everything in one table, so in other words, from", 
    "the data access point of view, you can keep the address information in the", 
    "same table as the other user information.", 
    "But you can pull out a separate class that has all the address-specific", 
    "stuff in it.", 
    "Here's one way that you can do it.", 
    "There's a composed_of function that you get with Active Record that allows", 
    "you to basically say, there's a component of this field that is going", 
    "to act as the customer_address field.", 
    "And it's going to live in its own class.", 
    "And the database columns called address street, address city, and", 
    "address zip should be mapped onto street, city, and zip attributes of", 
    "that class.", 
    "So how does that work?", 
    "When the Customer class is actually instantiated, a new customer address", 
    "will be called.", 
    "And it'll get passed those same fields that you pass in the mapping, those", 
    "will get passed into your constructor.", 
    "And you can do whatever would be appropriate in your address", 
    "constructors.", 
    "So the idea is, in offering the Customer address class, you can pretty", 
    "much behave as if you're offering a completely separate class, except that", 
    "you know that its initializer is going to be called from the class of which", 
    "it's a component.", 
    "So this is one way to do it.", 
    "And in this method, you end up having all the information in one table.", 
    "But you can still have separate classes to nicely split out the", 
    "responsibilities of doing the two different things.", 
    "So that's one way to do it.", 
    "The other thing you could do is, you could use has_one.", 
    "There may be compelling reasons to have the addresses be", 
    "in their own table.", 
    "For example, maybe a customer could have more than one address, right?", 
    "They have a business address and a home address.", 
    "So now it's not even a has_one, it could be a has_many relationship.", 
    "So the straightforward thing to do is, you model it as a straight one-to-one", 
    "association, as you would already have done using Active Record.", 
    "And you actually make it two separate tables.", 
    "But if you really don't have a crying need to have it be in a separate", 
    "table, that's when you could use composed_of.", 
    "Another thing you could do is, you could use a combination of composition", 
    "and delegation.", 
    "So let's see what that means and what that would look like.", 
    "So here's a version in which, when I create a new Customer, I set up an", 
    "instance variable which will be instantiated to be", 
    "a new Address object.", 
    "So again, I have a whole separate class just for dealing with addresses.", 
    "But notice what happens, that when I initialize the Address object of a new", 
    "Customer, what am I passing to it?", 
    "I'm passing a reference to the customer object that", 
    "I'm about the create.", 
    "In other words, it's as if this class knows what it belongs to, and it", 
    "immediately remembers this information.", 
    "Why does it do that?", 
    "Because, in terms of where we're storing the stuff, if we want to still", 
    "be able to store the address and the other customer information all in one", 
    "table, well, Active Record provides the accesses for us, right?", 
    "But the accesses are part of Customer because that's the base class that", 
    "we're using as our database table.", 
    "So we'll just tell the Address class that you can actually call all these", 
    "things on Address, but they'll just delegate them back to the Customer.", 
    "Delegation is basically saying, you're going to call the foo method on me,", 
    "and I'm just going to hand that call off to someone else, to my delegate,", 
    "and I'm just going to return whatever they return.", 
    "It's like a one line method.", 
    "And as with so many things in Rails, I could have actually defined these", 
    "methods and have the one line method that just calls the delegate, but", 
    "there's a shortcut for doing that uses meta-programming, and it makes it more", 
    "clear what it does.", 
    "So again, why my delegating these calls back to Customer?", 
    "Back to the Customer class?", 
    "Because since Customer inherit some Active Record base, it already has", 
    "these accesses because they're fields in my table.", 
    "So this is another way to do it in the case where you want to have a single", 
    "table storing all the information, but you want to be able to have multiple", 
    "classes to separate out the responsibilities of", 
    "what's in that table.", 
    "And this kind of what the diagram would look like corresponding to the", 
    "case we just saw.", 
    "There's the Active Record base class.", 
    "There is our business logic, which is a model that inherits from Active", 
    "Record base, and in this case, I've shown both the address example which", 
    "we just did, and there's also a table of identities.", 
    "Like for different authentication providers, like we saw when we did", 
    "third party authentication.", 
    "So the dotted arrow, again, there's different variants of class diagrams.", 
    "But the dotted arrow is often used to indicate delegation.", 
    "And that's the way we're going to use it because we have more", 
    "examples coming up.", 
    "And what this says is that the street and zip methods are delegated, they're", 
    "present in Address, you can call them on an instance of Address, but all", 
    "that's going to happen is that the method call is going to get passed on", 
    "to its delegate in the Customer class.", 
    "And as we know, those are just Active Record wrappers around", 
    "the database accessors.", 
    "And same here.", 
    "We can delegate name and email, which are fields that we put into our", 
    "database schema.", 
    "We'll just delegate those back to customer as well.", 
    "So this is an example that shows a couple different", 
    "mechanisms at work here.", 
    "There's inheritance, like straight-ahead inheritance, like we've", 
    "seen before.", 
    "There is the idea of a component.", 
    "So one component of a Customer is the customer's address.", 
    "And it has its own class that deals with address-specific things.", 
    "Another component of the Customer is their identity, with respect to some", 
    "authentication provider.", 
    "And we have a class that deals only with those methods.", 
    "And in both cases, those classes need to provide accessories and setters for", 
    "instance variables.", 
    "If we weren't using something like Active Record, the instance variables", 
    "might just be managed as part of each individual component class, but", 
    "because Active Record is managing those for us, we just delegate the", 
    "calls back.", 
    "So this is an unusual use of delegation that comes out of the fact", 
    "that we're using Active Record.", 
    "And this picture is one of the reasons that critics of Active Record say that", 
    "it violates SRP.", 
    "The reason that we're doing this delegation is because Active Record is", 
    "doing too much.", 
    "We have all of our logic about customers, but we also have logic", 
    "about how customers' instance variables are", 
    "persisted in the database.", 
    "And all of that stuff is kind of tied up together in Active Record, thereby", 
    "forcing us to use delegation.", 
    "So it's kind of a matter of subjective taste.", 
    "There is, should you use Active Record, even though it arguably", 
    "violates SRP, because it's so convenient.", 
    "Or should you start over and use something like data mapper, which we", 
    "talked about a little bit when we did associations.", 
    "At this point, I think I've of sort of given away what had started out as a", 
    "good question.", 
    "But we could probably just use it as a point of discussion.", 
    "Which is true regarding Active Record and similar responsibility?", 
    "You could say it violates SRP, but the Rails designers made that choice", 
    "consciously because the convenience you get, in terms of associations and", 
    "how you can make use of the underlying database, makes it all worthwhile.", 
    "You could say it doesn't violate SRP because the data behaviors are", 
    "actually separate modules, and they're pulled into", 
    "Active Record by inclusion.", 
    "Each module is sort of a namespace.", 
    "So in fact, the pieces of functionality are", 
    "isolated from each other.", 
    "They all just get mixed in together into one class.", 
    "You could say that the active record design pattern doesn't really lead SRP", 
    "violations.", 
    "But Rails implements it in a way that it does because of duck typing.", 
    "Or you could say that, yes, Active Record as a design pattern may be", 
    "prone to SRP, but the rails implementation avoids them.", 
    "Without using this is as a review question, I'm just going to say that,", 
    "after reading the literature and weighing both sides of the case, I", 
    "would go with orange.", 
    "It's probably true that Active Record violates SRP, and I think the fact", 
    "that we had to use delegation in that example.", 
    "Is kind of illustrative of that fact.", 
    "But it solves such a common set of problems, in terms of using a", 
    "relational database as your storage system, that, in the opinion of many", 
    "people, it's worth paying the price."
  ]
}