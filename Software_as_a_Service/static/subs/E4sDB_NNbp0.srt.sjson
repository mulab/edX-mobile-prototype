{
  "start": [
    400, 
    710, 
    2350, 
    6120, 
    7490, 
    12270, 
    17455, 
    19430, 
    24190, 
    27300, 
    29940, 
    33470, 
    34530, 
    38130, 
    41080, 
    43800, 
    46790, 
    47680, 
    51850, 
    55530, 
    58370, 
    61690, 
    63270, 
    65800, 
    67690, 
    71150, 
    71980, 
    76210, 
    77300, 
    80780, 
    84100, 
    85480, 
    88690, 
    90090, 
    91190, 
    95710, 
    97440, 
    99980, 
    101840, 
    105130, 
    107480, 
    112340, 
    114450, 
    117800, 
    122820, 
    126380, 
    130479, 
    133320, 
    137900, 
    140360, 
    144200, 
    147300, 
    151310, 
    155070, 
    157770, 
    159580, 
    162400, 
    166660, 
    169750, 
    172340, 
    173840, 
    177920, 
    179120, 
    181310, 
    182750, 
    184410, 
    189000, 
    192560, 
    194100, 
    197220, 
    198090, 
    200330, 
    204670, 
    208290, 
    210700, 
    214090, 
    216910, 
    219310, 
    223980, 
    226280, 
    231760, 
    234190, 
    234990, 
    237160, 
    238710, 
    243820, 
    245690, 
    247160, 
    251360, 
    255720, 
    256720, 
    261380, 
    262700, 
    266490, 
    272190, 
    273130, 
    277770, 
    280920, 
    282470, 
    285720, 
    289750, 
    290760, 
    294300, 
    296170, 
    297590, 
    299320, 
    302780, 
    305460, 
    308500, 
    312350, 
    316580, 
    321670, 
    324660, 
    327770, 
    329570, 
    333280, 
    336040, 
    337720, 
    342090, 
    345410, 
    349040, 
    353420, 
    357460, 
    360380, 
    363900, 
    365810, 
    368890, 
    371890, 
    374940, 
    378580, 
    381260, 
    384240, 
    385580, 
    387830, 
    390120, 
    391130, 
    396277, 
    397760, 
    399530, 
    400870, 
    403810, 
    406190, 
    410630, 
    415530, 
    418890, 
    421110, 
    422170, 
    425350, 
    429220, 
    430870, 
    434230, 
    435780, 
    438950, 
    444640, 
    447960, 
    450980, 
    452660, 
    455910, 
    461990, 
    465150, 
    466550, 
    469000, 
    469990, 
    473620, 
    476350, 
    479660, 
    483110, 
    486220, 
    488310, 
    491700, 
    492630, 
    496460, 
    499290, 
    501400, 
    504810, 
    507940, 
    509120, 
    512270, 
    516220, 
    517880, 
    519340, 
    522690, 
    523280, 
    527400, 
    530350, 
    533490, 
    537540, 
    540950, 
    544600, 
    545060, 
    547480, 
    549330, 
    552330, 
    554570, 
    555700, 
    559670, 
    562570, 
    563780, 
    566980, 
    570410, 
    573860, 
    577260, 
    577800, 
    580810, 
    583330, 
    586500, 
    591030, 
    595380, 
    598010, 
    599640, 
    601950, 
    605410, 
    608440, 
    610060, 
    614090, 
    618390, 
    620340, 
    623350, 
    628730, 
    631510, 
    635660, 
    643360, 
    646310, 
    649540, 
    653700, 
    656190, 
    660970, 
    662560, 
    665040, 
    666350, 
    669840, 
    673630, 
    676390, 
    677330, 
    679580, 
    682870, 
    683800, 
    688670, 
    690820, 
    694230, 
    699380, 
    701740, 
    702490, 
    703540, 
    706160, 
    710090, 
    711690, 
    713080, 
    716710, 
    718590, 
    721360, 
    722940, 
    725760, 
    729200, 
    731430, 
    736225, 
    738030, 
    741580, 
    743530, 
    745510, 
    750380, 
    752560, 
    757100, 
    760680, 
    764470, 
    767320, 
    768080, 
    770130, 
    773980, 
    777260, 
    781260, 
    782550, 
    783220, 
    786510, 
    789630, 
    791940, 
    795470, 
    797770, 
    799700, 
    804310, 
    807690, 
    810890, 
    812880, 
    815540, 
    819110, 
    823820, 
    826210, 
    828390, 
    832120, 
    835510, 
    840030, 
    844540, 
    847780, 
    851100, 
    852540, 
    856930, 
    858650, 
    861430, 
    862180, 
    866830, 
    870250, 
    875030, 
    877780, 
    880990, 
    883400, 
    884170, 
    887330, 
    888800, 
    890880, 
    894500, 
    898600, 
    900900, 
    905020, 
    906090, 
    910870, 
    914320, 
    915550, 
    918040, 
    921570, 
    924410, 
    928470, 
    929460, 
    931420, 
    934680, 
    935990, 
    940960, 
    943600, 
    948020, 
    950300, 
    952150, 
    955410, 
    956900, 
    960710, 
    964140, 
    969650, 
    973890, 
    976800, 
    979750, 
    984810, 
    987770, 
    990310, 
    992150, 
    995720, 
    1000870, 
    1005190, 
    1008710, 
    1009990
  ], 
  "end": [
    710, 
    2350, 
    6120, 
    7490, 
    12270, 
    17455, 
    19430, 
    24190, 
    27300, 
    29940, 
    33470, 
    34530, 
    38130, 
    41080, 
    43800, 
    46790, 
    47680, 
    51850, 
    55530, 
    58370, 
    61690, 
    63270, 
    65800, 
    67690, 
    71150, 
    71980, 
    76210, 
    77300, 
    80780, 
    84100, 
    85480, 
    88690, 
    90090, 
    91190, 
    95710, 
    97440, 
    99980, 
    101840, 
    105130, 
    107480, 
    112340, 
    114450, 
    117800, 
    122820, 
    126380, 
    130479, 
    133320, 
    137900, 
    140360, 
    144200, 
    147300, 
    151310, 
    155070, 
    157770, 
    159580, 
    162400, 
    166660, 
    169750, 
    172340, 
    173840, 
    177920, 
    179120, 
    181310, 
    182750, 
    184410, 
    189000, 
    192560, 
    194100, 
    197220, 
    198090, 
    200330, 
    204670, 
    208290, 
    210700, 
    214090, 
    216910, 
    219310, 
    223980, 
    226280, 
    231760, 
    234190, 
    234990, 
    237160, 
    238710, 
    243820, 
    245690, 
    247160, 
    251360, 
    255720, 
    256720, 
    261380, 
    262700, 
    266490, 
    272190, 
    273130, 
    277770, 
    280920, 
    282470, 
    285720, 
    289750, 
    290760, 
    294300, 
    296170, 
    297590, 
    299320, 
    302780, 
    305460, 
    308500, 
    312350, 
    316580, 
    321670, 
    324660, 
    327770, 
    329570, 
    333280, 
    336040, 
    337720, 
    342090, 
    345410, 
    349040, 
    353420, 
    357460, 
    360380, 
    363900, 
    365810, 
    368890, 
    371890, 
    374940, 
    378580, 
    381260, 
    384240, 
    385580, 
    387830, 
    390120, 
    391130, 
    396277, 
    397760, 
    399530, 
    400870, 
    403810, 
    406190, 
    410630, 
    415530, 
    418890, 
    421110, 
    422170, 
    425350, 
    429220, 
    430870, 
    434230, 
    435780, 
    438950, 
    444640, 
    447960, 
    450980, 
    452660, 
    455910, 
    461990, 
    465150, 
    466550, 
    469000, 
    469990, 
    473620, 
    476350, 
    479660, 
    483110, 
    486220, 
    488310, 
    491700, 
    492630, 
    496460, 
    499290, 
    501400, 
    504810, 
    507940, 
    509120, 
    512270, 
    516220, 
    517880, 
    519340, 
    522690, 
    523280, 
    527400, 
    530350, 
    533490, 
    537540, 
    540950, 
    544600, 
    545060, 
    547480, 
    549330, 
    552330, 
    554570, 
    555700, 
    559670, 
    562570, 
    563780, 
    566980, 
    570410, 
    573860, 
    577260, 
    577800, 
    580810, 
    583330, 
    586500, 
    591030, 
    595380, 
    598010, 
    599640, 
    601950, 
    605410, 
    608440, 
    610060, 
    614090, 
    618390, 
    620340, 
    623350, 
    628730, 
    631510, 
    635660, 
    643360, 
    646310, 
    649540, 
    653700, 
    656190, 
    660970, 
    662560, 
    665040, 
    666350, 
    669840, 
    673630, 
    676390, 
    677330, 
    679580, 
    682870, 
    683800, 
    688670, 
    690820, 
    694230, 
    699380, 
    701740, 
    702490, 
    703540, 
    706160, 
    710090, 
    711690, 
    713080, 
    716710, 
    718590, 
    721360, 
    722940, 
    725760, 
    729200, 
    731430, 
    736225, 
    738030, 
    741580, 
    743530, 
    745510, 
    750380, 
    752560, 
    757100, 
    760680, 
    764470, 
    767320, 
    768080, 
    770130, 
    773980, 
    777260, 
    781260, 
    782550, 
    783220, 
    786510, 
    789630, 
    791940, 
    795470, 
    797770, 
    799700, 
    804310, 
    807690, 
    810890, 
    812880, 
    815540, 
    819110, 
    823820, 
    826210, 
    828390, 
    832120, 
    835510, 
    840030, 
    844540, 
    847780, 
    851100, 
    852540, 
    856930, 
    858650, 
    861430, 
    862180, 
    866830, 
    870250, 
    875030, 
    877780, 
    880990, 
    883400, 
    884170, 
    887330, 
    888800, 
    890880, 
    894500, 
    898600, 
    900900, 
    905020, 
    906090, 
    910870, 
    914320, 
    915550, 
    918040, 
    921570, 
    924410, 
    928470, 
    929460, 
    931420, 
    934680, 
    935990, 
    940960, 
    943600, 
    948020, 
    950300, 
    952150, 
    955410, 
    956900, 
    960710, 
    964140, 
    969650, 
    973890, 
    976800, 
    979750, 
    984810, 
    987770, 
    990310, 
    992150, 
    995720, 
    1000870, 
    1005190, 
    1008710, 
    1009990, 
    1013930
  ], 
  "text": [
    "ARMANDO FOX: OK.", 
    "So why do we believe green is correct?", 
    "Since we all seem to agree on it, let's just assume that it's correct.", 
    "Fragment caching.", 
    "So fragment caching is certainly useful because there will be fragments", 
    "of the individual pages that we'd like to be able to cache even if the page", 
    "is put together in a different way, right?", 
    "So when we do the index view for an under-17 visitor, it will have only a", 
    "subset of the movies that it would have for an over-17 visitor.", 
    "But we could still use fragment caching to take advantage of", 
    "rendering, basically caching rendered partials corresponding to the things", 
    "you're going to see.", 
    "So the fragment caching in this case is saying, I don't know which pieces", 
    "you're going to use to put together the overall page, but I will benefit", 
    "from being able to cache the pieces, rather than re-computing each piece.", 
    "So 3 is definitely included.", 
    "Action caching.", 
    "Well, if the index page is otherwise basically the same, the only", 
    "difference between the under-17 versus over-17 index page is the inclusion of", 
    "these movies, then action caching would work just fine, right?", 
    "You could actually have two different actions, like an under-17 index and an", 
    "over-17 index.", 
    "Cache each of them individually, and have a before filter that tests what", 
    "kind of user it is.", 
    "Page caching is a bad idea because you'd never even get to", 
    "your filter, right?", 
    "The whole idea here is you're making a decision that has application", 
    "semantics embedded in it.", 
    "The idea of a visitor, and of somebody being under 17, and of how that", 
    "affects the behavior of the app, those are all things that deal with the", 
    "semantics of that particular application.", 
    "But page caching is handled in the presentation layer, which knows", 
    "nothing about your application.", 
    "So that is the correct answer.", 
    "Page caching doesn't apply because it cannot make the decision of which", 
    "cache pieces would even be usable.", 
    "So action and fragment caching it is, therefore green is correct.", 
    "Great job.", 
    "Let's talk about avoiding abuse of queries.", 
    "I'm a little punchy today.", 
    "So we already talked about, the goal of caching is essentially to avoid", 
    "using the database whenever you can, right?", 
    "In fact, depending on how you use caching, you can avoid some", 
    "combination of using the database or rendering the content, because the", 
    "astute among you, which is all of you will have observed that when you're", 
    "using caching, even if you end up having to--", 
    "Whether or not you save talking to the database, the idea that you can save", 
    "time rendering, in other words creating HTML out of Haml markup or", 
    "ERB markup is still pretty valuable.", 
    "So the next best thing to do, if you're not able to avoid using the", 
    "database, can you at least use it in a kind way?", 
    "Can you do it in a way that maximizes the benefit that it can give you?", 
    "And the easiest way to do that is to avoid doing certain stupid things.", 
    "Which again, happily from your point of view as a developer, are pretty", 
    "easy to avoid.", 
    "So being kind to the database.", 
    "As we've said over and over, once you outgrow your single machine database,", 
    "there's a lot of techniques that you have to suddenly become familiar with", 
    "that believe me, they sound great on paper, but it's really hard to get", 
    "them right in practice.", 
    "So how do we relieve pressure on the database, given that we can't", 
    "completely avoid using it?", 
    "Caching doesn't get us 100% of the way there.", 
    "Here are some things we can do.", 
    "Caching, well, we already did that.", 
    "We can avoid a classic problem called the n plus 1 queries, which arises in", 
    "any app that uses associations, which is, roughly speaking, any app that's", 
    "interesting.", 
    "And we can make judicious use of database indices to speed", 
    "up the other queries.", 
    "So let's look at these one at a time.", 
    "The n plus 1 queries problem is really easy to illustrate.", 
    "The symptom is that you're traversing an association, then you're doing n", 
    "plus 1 queries rather than a single query.", 
    "Let's take a look at an example of when this would arise.", 
    "So here's a semi-realistic example.", 
    "What I'm doing, it's a little bit of a contrived example.", 
    "I'm basically finding information about the movies that have been seen", 
    "by all moviegoers in a certain zip code.", 
    "Now, in the next part of the lecture, we'll talk about why this is", 
    "potentially already a red flag, but let's not worry", 
    "about it for the moment.", 
    "We're going to get a bunch of moviegoers", 
    "qualified by some condition.", 
    "And then for each one of them, we're going to look at what movies that", 
    "person has reviewed, and we're going to do something with", 
    "each of those movies.", 
    "The bad part is that up here, we're doing a database query to get", 
    "moviegoer where, but each time through this loop, we're doing another", 
    "database query.", 
    "By the way, there is at least one other criticism you could make about", 
    "the way that I've structured this code.", 
    "The thing I'm trying to illustrate here is that each time we get a hold", 
    "of one of these movies, we're forced to do another database look up to get", 
    "information about it.", 
    "But what solid principle am I potentially violating here?", 
    "And if I had handled it correctly, I might be able to avoid looking at the", 
    "view in this discussion.", 
    "Rather than doing this dereference in the view, I should have set up a", 
    "controller instance variable that actually just provides the collection", 
    "to loop through right here.", 
    "And then I wouldn't have queries in the view.", 
    "Am I violating one of the solid principles?", 
    "Hint: yes.", 
    "Which, just by looking at it, which one is it?", 
    "When you see a bunch of dots, this is a Demeter violation, right?", 
    "I know a little more about movies than I probably should, right?", 
    "Because in here, I'm presumably going to dereference things inside movies.", 
    "So I'm counting on something about the implementation of fans in movies.", 
    "But setting that aside, the real problem I have is unwittingly, even", 
    "though my model of the world is that when I get a moviegoer, because of the", 
    "association, I have access to all the movies that they've rated.", 
    "In real life, I actually don't, there's nothing in here that's going", 
    "to cause that information to be fetched, right?", 
    "Here I'm just getting the moviegoers, and in here, I'm going to get another", 
    "query to get the end movies associated with each moviegoer.", 
    "Hence the n plus 1 query problem.", 
    "So an easy way to avoid this, since this is such a common pitfall, there", 
    "is a commonly used mechanism that gets of it for you.", 
    "Basically what I'm going to do is I'm essentially giving a strong hint to", 
    "active relation, saying when you do this query, pre-load all of the", 
    "associations, or pre-load the movies association that goes with all of", 
    "these users, because I'm eventually going to traverse them.", 
    "So the difference here is in this case, what I end up with is fans is", 
    "still an innumerable collection of moviegoers.", 
    "But when I do this dereference, all of the data has already been loaded.", 
    "So I don't take another database hit in the view.", 
    "In fact, I don't take n more database hits in the view.", 
    "And, roughly speaking, the reason this is desirable is that a lot of the", 
    "overhead of doing a database query, at least for the kinds of apps that we're", 
    "writing, where a typical query is going to retrieve on the order of", 
    "maybe hundreds of rows.", 
    "Certainly not thousands of rows per query.", 
    "A lot of the overhead of doing the query is just sort of getting it off", 
    "the ground.", 
    "It's almost as fast for the database to do the query with this join as it", 
    "is to do the query without the join.", 
    "But from your point of view, you've saved a lot of round", 
    "trips to the database.", 
    "So this is a pretty common problem, and as you might expect, that means", 
    "that there are tools that will help you detect it.", 
    "There's a great gem called Bullet that helps you find them.", 
    "And basically, it'll find all the places where you're loading one side", 
    "of an association, and then later on during the same request, you're", 
    "triggering another query that essentially is traversing that", 
    "association.", 
    "Anywhere that you're doing that, you probably could've saved time by", 
    "eagerly loading the association in the original where or whatever your", 
    "original query was.", 
    "But there's a bigger lesson here, which I would summarize as all", 
    "abstractions eventually leak.", 
    "If you remember way back when we started talking about active record,", 
    "the entire motivation for something like active record to exist is if you", 
    "were manipulating data structures in a program, you would have a data", 
    "structure, let's say a moviegoer, and there would be a movies field.", 
    "You could dereference the movies field, right?", 
    "As a programmer, you have this view of you're sort of traversing things in", 
    "this sort of indistinct, large, flat memory space, right?", 
    "But in real life, we have to persist our data somewhere, because it's", 
    "software as a service.", 
    "We've chosen to persist in a relational database for a number of", 
    "good engineering reasons.", 
    "So we need a way to represent the associations in the database.", 
    "Turns out we could do that with foreign keys, so that part was easy.", 
    "But what active record really is trying to do is give you the illusion", 
    "that when you traverse the associations in Ruby, it's hiding from", 
    "you the fact that the traversal of the associations requires doing these", 
    "database table joins.", 
    "Now as long as you use it judiciously, most of the time, the abstraction is", 
    "not a problem.", 
    "But when we say an abstraction leaks, what we really mean is if you're using", 
    "the abstraction in a way that's oblivious to how it works, you're", 
    "likely to eventually hit a performance problem.", 
    "And n plus 1 queries is an example of that, right?", 
    "On the surface, there's sort of nothing obviously", 
    "horrible about this code.", 
    "I mean, yes, we could quibble about the Demeter violation.", 
    "But I also said that in a view, exposing the graph of object's", 
    "relationships is not the end of the world.", 
    "That's kind of what views do.", 
    "So you can't really tell from looking at this view that it's going to cause", 
    "a problem, right?", 
    "You have to understand something about what is happening when you say fan dot", 
    "movies dot each, and attempt to traverse the association.", 
    "Once you realize the way that that's actually implemented, you realize,", 
    "aha, there's a way for me to give a hint in the form of that include on", 
    "the end of my original query to avoid having this problem, right?", 
    "I am using knowledge about how the abstraction is implemented to improve", 
    "performance.", 
    "And this is kind of a basic trade off in computer science.", 
    "Abstractions are mostly great.", 
    "We'd be dead in the water without them, but if you use them and you're", 
    "completely ignorant of how they work, at some point this is", 
    "going to happen, right?", 
    "Another abstraction that has similar behavior, arguably, is virtual memory.", 
    "Virtual memory is infinite for all practical purposes until you actually", 
    "try to treat it that way.", 
    "And then you see how quickly it becomes not infinite and not fast.", 
    "So all abstractions including active record eventually leak.", 
    "This is a classic example of a leak that is easy to find, easy to fix.", 
    "But it does reveal some information about how active record is", 
    "implemented, right?", 
    "The idea of eager loading makes sense in a relational context.", 
    "So eager loading, just to summarize.", 
    "The naive thing to do is you do a single query to pick up one type of", 
    "object, and then you traverse an association related to that object.", 
    "It may be faster to pre-load the association in advance.", 
    "And now when you try to traverse it, you don't have to do another round", 
    "trip to the database.", 
    "Now keep in mind, it's possible to push this too far, right?", 
    "If you always get into the habit of saying include, and then you don't do", 
    "anything with the data, then you're actually asking the database to do", 
    "much more work than necessary.", 
    "So again, some understanding of how you're using the abstraction vis-a-vis", 
    "how it's implemented is how you avoid pitfalls like this.", 
    "The other thing you could do to be nice to your database is you could", 
    "make judicious use of database indices.", 
    "And you can basically think of an index as a hash over the values of", 
    "some column of some table in a database.", 
    "Most databases are already set up so the primary key is a random access", 
    "key, but the goal is to allow certain queries to run in constant time, as", 
    "opposed to running in time proportional to the table size.", 
    "So what's a simple example in Rotten Potatoes?", 
    "If you say a movie where rating equals PG, there's two possibilities for how", 
    "the database can return an answer to this, right?", 
    "The naive way is examine every row and select only those where the rating", 
    "matches your constraint.", 
    "And obviously the larger your table gets, the longer that's", 
    "going to take, right?", 
    "If you're adding hundreds of thousands of movies, at some point this", 
    "seemingly innocuous, very simple query is going to become a bottleneck,", 
    "because every time you do it, you've got a scan the entire table, right?", 
    "That's bad.", 
    "It's another example of a leaky abstraction.", 
    "We like to think of relational tables as these sort of random access things,", 
    "but they're really not.", 
    "They're only random access if there's some function mapping column values to", 
    "the rows that have that column value.", 
    "And that's basically what an index gives you.", 
    "It doesn't have to be the case that the hash is unique valued.", 
    "In other words, there's a lot of different movies that have the PG.", 
    "rating.", 
    "That's OK.", 
    "You can still construct a hash function the greatly cuts down the", 
    "time needed to find them relative to doing a naive table scan.", 
    "You would think if this is a good idea, you would just", 
    "do it on every column.", 
    "And in fact, you can do indices on combinations of columns.", 
    "But indices take up finite space, right?", 
    "In fact, as you might expect, they take up space proportional to the size", 
    "of the table you're indexing.", 
    "And when you think about it, you realize that any time you change the", 
    "table, potentially all of the indices on that table have to be updated as", 
    "well, so that they'll return the right thing in the future.", 
    "Now in practice, we can put down some basic recommendations on columns that", 
    "are always a good idea to index.", 
    "And the effect of indexing those columns in your app is, in terms of", 
    "performance, is basically free.", 
    "So what would you index?", 
    "So columns that can take on potentially a finite number of values.", 
    "I was going to say just an easier one.", 
    "If your column appears as one of the constraints in a where clause and", 
    "there's no index on it, you just signed up for a table scan, right?", 
    "So an easy thing is look for all of your where clauses.", 
    "Unless you're basically doing things based on the primary key, you'd better", 
    "have an index.", 
    "What other kinds of index would you have?", 
    "Foreign key columns, because whenever you dereference the foreign key side", 
    "of an association, you're basically saying, find me all of the-- in this", 
    "example it's find all of the reviews where the movie ID field", 
    "maps to this movie.", 
    "But yeah.", 
    "Basically, most foreign key columns are probably good candidates, because", 
    "the fact that you have the association set up at all means you're probably", 
    "going to traverse it somewhere.", 
    "We already said columns that appear directly in the where clauses of", 
    "active record values, or active record queries.", 
    "Columns that you sort on, right?", 
    "Being able to do a column sort when you're doing an order by.", 
    "There are data structures that the database can maintain to actually make", 
    "the sorts be faster so it doesn't have to sort the entire table in place.", 
    "It can maintain an ordered hash.", 
    "So returning things in sorted orders easily.", 
    "And again, because this is a common thing to do, there's various gems.", 
    "This is one that I've used previously called Rails indexes, that helps you", 
    "identify both indices that are missing,", 
    "in other words, places where you have a query that really would have", 
    "benefited from an index, but you don't have one, as well as the indexes that", 
    "you have, but very few queries seem to ever use.", 
    "And again, on apps of the scale that we're building, most of the indices,", 
    "if you just kind of follow these rules and index where clauses, foreign keys,", 
    "and columns that you do sorting and ordering on, or grouping on, you could", 
    "basically do all these indicies, and the performance penalty is so small", 
    "that it won't matter.", 
    "But it's good to know which indexes aren't actually being used.", 
    "How much does it actually help?", 
    "This is, again, from another micro benchmark that we ran for putting it", 
    "in the book.", 
    "So with different numbers of reviews for the movies, basically doing the", 
    "example we just showed where you have movies and you try to dereference all", 
    "the reviews, if you're reading 100 reviews at a time with no indices,", 
    "these are again, these are times in seconds, I think.", 
    "But if you've indexed the foreign keys, you can see that as you get to", 
    "larger and larger table sizes, the difference becomes really, really", 
    "pronounced.", 
    "So the message is you're not going to see this when you're running your", 
    "regression tests, right?", 
    "This is the reason that you want to have a gem to help you identify this", 
    "stuff, because until your production database gets large enough, the", 
    "differences between doing this without indices and with indices is too small", 
    "to measure compared to other things that you're testing for.", 
    "So this is a case where stress testing or longevity testing on a decent-sized", 
    "database would help.", 
    "Or just carefully monitoring your app in production, and keeping an eye on", 
    "the slowest queries, which is one of the things that monitoring tools like", 
    "New Relic will give you.", 
    "If you see that there's a particular query on the movies table that's going", 
    "slower and slower as more people use your app, that's probably a tip off", 
    "that more people using the app means the table has more rows.", 
    "And you have some query whose performance is a function of the size", 
    "of the table, right?", 
    "So in a nutshell, that's what you're trying to avoid.", 
    "You're trying to avoid having queries whose execution time grows as the", 
    "table gets bigger.", 
    "And this was to show in a sort of pathological case, this is, again,", 
    "with 200,000 total reviews.", 
    "And we created not only an index on every column, but we created an index", 
    "of every permutation of pairs of columns.", 
    "So that's sort of pathologically stupid, right?", 
    "And the question was if you create a lot of needless, stupid indices,", 
    "what's the performance penalty ?", 
    "And even in the pathological case, it was 17%, which is, I don't want to", 
    "leave 17% on the table, but it's not like my app fell off a cliff.", 
    "So this is one of those cases where I would say when in doubt, index", 
    "somewhat conservatively, and use tools like the Rails indexes gem, which will", 
    "help you figure out which ones you needed.", 
    "Here's a question about indexing, since you all understood that.", 
    "Suppose, as we have shown in our simple example, we have not only a has", 
    "many relationship, but we have a has many through relationship.", 
    "So a movie has many reviews.", 
    "Moviegoers have many reviews.", 
    "Therefore there's a has many through from movie to moviegoers.", 
    "So if we had this query, if we're trying to dereference the moviegoers", 
    "who have reviewed a certain movie, which index, and I'm using the", 
    "standard SQL notation where it's the name of the table and then the name of", 
    "a column in that table.", 
    "So which of these indices would most help to speed up that query?"
  ]
}