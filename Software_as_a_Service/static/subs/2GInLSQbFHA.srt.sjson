{
  "start": [
    440, 
    3650, 
    5890, 
    7560, 
    12030, 
    14770, 
    16950, 
    19400, 
    20900, 
    24690, 
    27240, 
    29350, 
    32890, 
    35530, 
    39440, 
    41380, 
    44430, 
    48460, 
    50750, 
    53100, 
    56310, 
    59290, 
    63390, 
    64540, 
    66830, 
    69690, 
    72530, 
    75030, 
    78360, 
    80550, 
    82700, 
    86380, 
    87280, 
    90120, 
    92750, 
    93800, 
    96730, 
    99530, 
    100350, 
    102350, 
    105820, 
    106980, 
    108500, 
    111740, 
    112980, 
    116130, 
    118590, 
    119560, 
    123220, 
    125570, 
    125800, 
    129650, 
    130680, 
    134510, 
    138210, 
    143120, 
    144130, 
    148960, 
    151590, 
    155140, 
    156490, 
    159750, 
    162350, 
    164610, 
    168010, 
    169750, 
    173260, 
    176650, 
    179560, 
    182470, 
    186310, 
    189510, 
    192580, 
    195660, 
    198170, 
    199100, 
    201290, 
    204140, 
    207720, 
    208740, 
    211340, 
    217280, 
    220810, 
    224590, 
    226280, 
    228930, 
    232050, 
    235910, 
    237470, 
    239740, 
    244290, 
    247280, 
    251710, 
    253460, 
    254770, 
    258519, 
    259480, 
    262520, 
    266110, 
    267370, 
    270010, 
    272500, 
    275600, 
    278710, 
    281290, 
    282910, 
    285890, 
    288000, 
    289830, 
    294160, 
    297840, 
    299180, 
    303090, 
    305900, 
    309400, 
    311670, 
    314430, 
    316370, 
    317520, 
    321260, 
    323560, 
    324520, 
    329130, 
    331390, 
    334790, 
    335670, 
    338590, 
    341150, 
    344170, 
    347030, 
    350240, 
    353340, 
    355230, 
    358380, 
    359840, 
    363350, 
    365950, 
    369730, 
    373020, 
    376990, 
    380970, 
    383220, 
    385290, 
    389100, 
    391800, 
    393310, 
    395030, 
    398650, 
    399830, 
    401990, 
    406300, 
    409510, 
    410770, 
    413250, 
    417490, 
    420420, 
    424290, 
    428380, 
    430670, 
    432550, 
    436170, 
    437750, 
    441530, 
    445970, 
    446550, 
    450370, 
    452700, 
    455910, 
    458780, 
    461320, 
    465240, 
    466980, 
    469680, 
    472710, 
    474040, 
    476580, 
    478670, 
    482990, 
    485730, 
    488230, 
    490510, 
    495580, 
    497650, 
    502080, 
    506260, 
    508290, 
    513100, 
    514520, 
    517789, 
    521700, 
    525000, 
    526710, 
    529320, 
    531130, 
    534500, 
    539590, 
    542180, 
    545440, 
    546500
  ], 
  "end": [
    3650, 
    5890, 
    7560, 
    12030, 
    14770, 
    16950, 
    19400, 
    20900, 
    24690, 
    27240, 
    29350, 
    32890, 
    35530, 
    39440, 
    41380, 
    44430, 
    48460, 
    50750, 
    53100, 
    56310, 
    59290, 
    63390, 
    64540, 
    66830, 
    69690, 
    72530, 
    75030, 
    78360, 
    80550, 
    82700, 
    86380, 
    87280, 
    90120, 
    92750, 
    93800, 
    96730, 
    99530, 
    100350, 
    102350, 
    105820, 
    106980, 
    108500, 
    111740, 
    112980, 
    116130, 
    118590, 
    119560, 
    123220, 
    125570, 
    125800, 
    129650, 
    130680, 
    134510, 
    138210, 
    143120, 
    144130, 
    148960, 
    151590, 
    155140, 
    156490, 
    159750, 
    162350, 
    164610, 
    168010, 
    169750, 
    173260, 
    176650, 
    179560, 
    182470, 
    186310, 
    189510, 
    192580, 
    195660, 
    198170, 
    199100, 
    201290, 
    204140, 
    207720, 
    208740, 
    211340, 
    217280, 
    220810, 
    224590, 
    226280, 
    228930, 
    232050, 
    235910, 
    237470, 
    239740, 
    244290, 
    247280, 
    251710, 
    253460, 
    254770, 
    258519, 
    259480, 
    262520, 
    266110, 
    267370, 
    270010, 
    272500, 
    275600, 
    278710, 
    281290, 
    282910, 
    285890, 
    288000, 
    289830, 
    294160, 
    297840, 
    299180, 
    303090, 
    305900, 
    309400, 
    311670, 
    314430, 
    316370, 
    317520, 
    321260, 
    323560, 
    324520, 
    329130, 
    331390, 
    334790, 
    335670, 
    338590, 
    341150, 
    344170, 
    347030, 
    350240, 
    353340, 
    355230, 
    358380, 
    359840, 
    363350, 
    365950, 
    369730, 
    373020, 
    376990, 
    380970, 
    383220, 
    385290, 
    389100, 
    391800, 
    393310, 
    395030, 
    398650, 
    399830, 
    401990, 
    406300, 
    409510, 
    410770, 
    413250, 
    417490, 
    420420, 
    424290, 
    428380, 
    430670, 
    432550, 
    436170, 
    437750, 
    441530, 
    445970, 
    446550, 
    450370, 
    452700, 
    455910, 
    458780, 
    461320, 
    465240, 
    466980, 
    469680, 
    472710, 
    474040, 
    476580, 
    478670, 
    482990, 
    485730, 
    488230, 
    490510, 
    495580, 
    497650, 
    502080, 
    506260, 
    508290, 
    513100, 
    514520, 
    517789, 
    521700, 
    525000, 
    526710, 
    529320, 
    531130, 
    534500, 
    539590, 
    542180, 
    545440, 
    546500, 
    547990
  ], 
  "text": [
    "Armando Fox: So last time we started talking about legacy code.", 
    "And today we're going to continue talking about legacy code and some", 
    "refactoring techniques.", 
    "And one thing we pointed out is that our approach to refactoring is going", 
    "to follow Michael Feathers' advice about legacy code, which is legacy", 
    "code is code that doesn't have good test coverage.", 
    "So you're not very confident when you're going to modify it if you might", 
    "break something.", 
    "So the first thing we can talk about, to follow up on that advice, is how", 
    "can you establish ground truth when you're working with the code base that", 
    "isn't very well tested?", 
    "And I don't know if Feathers originated this term, but he uses it", 
    "pretty widely in his book, a characterization test.", 
    "This is a kind of test that you write after the fact that help you establish", 
    "ground truth about how the app is working now.", 
    "Even if the way it works has some bugs or you think it needs some", 
    "improvements, the idea is to cover the behaviors you already have so you'll", 
    "know if you broke something when you start making changes.", 
    "So it makes the known behaviors repeatable and it gives you some", 
    "confidence that, as you change stuff, those known behaviors aren't", 
    "inadvertently changing out from under you.", 
    "Now how could you start to do this if you don't actually know anything about", 
    "the code yet?", 
    "We'll get to that in a minute, but kind of the important thing to keep in", 
    "mind when you're doing characterization tests and all of the", 
    "other refactoring activities that we're going to talk about today, is", 
    "don't confuse this with making improvements.", 
    "When you're getting test coverage to work, when you're doing a refactoring,", 
    "the goal is not to add features.", 
    "It's not to fix bugs.", 
    "In general, when you're trying to improve your test coverage so that you", 
    "can do some refactoring.", 
    "Or when you're starting to do refactoring, the goal is to make some", 
    "very, very targeted changes to the code structure without changing the", 
    "functionality.", 
    "This is a very common pitfall because we're all optimists as programmers who", 
    "think, as long as I'm doing this, let me just fix this little thing here", 
    "that's ugly.", 
    "Don't do that because you will fail.", 
    "You will get into a mired mess and you'll get the code base into a state", 
    "that is difficult to back out of.", 
    "So just take my word for it.", 
    "Or try it yourself and then there's no teacher like experience.", 
    "Not even me.", 
    "So, if you don't know how the code works, what can you start by doing?", 
    "How could you write tests without any understanding of what's", 
    "going on in the code?", 
    "Well, we've already seen that you can write integration level scenarios", 
    "using Cucumber that really are like black box tests.", 
    "Right?", 
    "Cucumber scenarios don't make any assumptions about the structure of the", 
    "application.", 
    "And in fact, even for the auto-graders we use in this course, there is back", 
    "ends to the Capybara tool, which works with Cucumber, that allow you to", 
    "script almost any interaction that you could have with software as a service", 
    "application.", 
    "Now we talked about when you're doing these Cucumber scenarios, when you're", 
    "sort of designing scenarios for new features, that you want to stay away", 
    "from these very detailed imperative, then I fill in this, then I click on", 
    "that, then I click that.", 
    "But at this point, you're trying to create coverage that will give you a", 
    "ground truth for code that you don't have covered already.", 
    "So at this point, it's actually OK to do this.", 
    "Your goal here is to sort of bootstrap yourself from having little or no test", 
    "coverage to having some that you can actually work with.", 
    "So it's OK at the beginning to do these very detailed level imperative", 
    "scenarios, and then as your understanding of the code improves,", 
    "you can start converting them to more declarative scenarios and use them as", 
    "a basis for improving other stuff.", 
    "Now, in the next few sections, in talking about this approach and about", 
    "other legacy code and refactoring things, I'm going to deviate somewhat", 
    "from the examples in the book and in the screen cast because my daring", 
    "hypothesis is that you could actually go and read those on your own.", 
    "So I'm going to try to give some additional examples that go beyond", 
    "what's in the book.", 
    "And here's one of them.", 
    "This is a good time to talk about the idea of in-process versus out of", 
    "process testing, especially if you're talking about black box integration", 
    "style tests.", 
    "The way you've been running most of your tests when you're developing on", 
    "your VM, is you've got a single software stack where your application", 
    "is running on top of Rails, which is running on top of Rack.", 
    "There is an adapter called Rack Test that's the glue between Rack and a", 
    "testing system like Cucumber.", 
    "And this is all running inside one Ruby interpreter.", 
    "So even though your app is being treated as a black box from a logical", 
    "standpoint, in practice, the step definitions in Cucumber can do", 
    "arbitrary things to your database.", 
    "They can sort of poke into the logic of your application because they're", 
    "running as part of the same process in which your app is running.", 
    "An alternative, which is more realistic, might be if your", 
    "application is running in one interpreter and the actual testing is", 
    "at the other end of a network connection.", 
    "Now it doesn't have to be on a different machine.", 
    "It could be on your same machine, but the idea is that these are now two", 
    "separate worlds.", 
    "This means that, for example, if you want to create some fixtures in the", 
    "database, you can't just sort of poke them in there like you could do in", 
    "this scenario on the left.", 
    "You actually have to do the interactions to make it happen or", 
    "create and upload a separate fixture file.", 
    "And in the extreme case, these two things really are on different", 
    "computers and you might even use something like WebDriver to drive an", 
    "actual browser, instead of using the simulated browser", 
    "that's built into Capybara.", 
    "So, as you go from left to right on this slide, setting up your", 
    "preconditions gets a little tougher.", 
    "You can't really introspect the app.", 
    "At this extreme over here, the only thing that you can check for in your", 
    "then steps, is things that would be visible within the web browser to the", 
    "actual human being.", 
    "Whereas, over here on the left, you could plausibly, in your then steps,", 
    "you could check on conditions that require you to directly inspect the", 
    "database or directly inspect the data structures of your app.", 
    "So this is an important consideration to keep in mind.", 
    "Most of the things you'll be doing in the early parts of this class, you can", 
    "sort of get away with this model on the left, which is", 
    "what we've been doing.", 
    "But if you were developing legacy code tests and you were in a real kind of", 
    "staging environment, you might be forced into one", 
    "of these two scenarios.", 
    "And keep in mind, that the way you deal with GIVENs and with THENs might", 
    "be a little more constrained in these environments.", 
    "So you can certainly imagine how you would write Cucumber tests that are", 
    "integration level.", 
    "They don't really rely on knowledge of how that app is organized.", 
    "They just rely on the fact that if you take certain actions in a certain", 
    "order, you should be able to see specific results.", 
    "And we talked last time about how you could sit down with a customer and", 
    "have them essentially walk you through some interactions with the app, tell", 
    "you what the user stories are, and then you could capture them this way,", 
    "using Cucumber tests.", 
    "But can you do something similar when it comes time to actually make", 
    "statements about the structure of the app?", 
    "Could you do unit or functional level characterization tests, which actually", 
    "do require some knowledge about the structure of the app?", 
    "And there's a great cheat that you can use for doing this.", 
    "If you've watched no other screen casts, although I'm sure you all have,", 
    "I would specifically advise you watch this one because this one actually has", 
    "examples of both this technique and a technique that we're going to see", 
    "momentarily when we talk about refactoring.", 
    "Some of the refactoring techniques we're going to do.", 
    "It's like five minutes and you can actually do it without having a", 
    "Facebook window open in a separate browser at the same time.", 
    "It's more productive that way.", 
    "But here's the cheap that you can do.", 
    "Suppose there's some method that you want to change that has to do with", 
    "calculating sales tax.", 
    "The rules are different in different states and so on.", 
    "So in my unit test, I might try to mock-out an order and then I would try", 
    "to call a method on it and assert that computing the text", 
    "should equal some number.", 
    "Now I'm pretty much making this number up out of the air and I'm pretty sure", 
    "it's wrong, but the goal is to run the test and get it to fail with some sort", 
    "of a failure saying that I should have gotten--", 
    "what happened in the first section here, I mocked out this object, but it", 
    "turns out that when I tried to call COMPUTE TAX, something in that method", 
    "expected to call a method GET TOTAL on ORDER.", 
    "So that's a new fact that I didn't know before.", 
    "I know that somehow, whatever this method does, it relies", 
    "on this other method.", 
    "Let's mock that method out too and we'll just return some number and now", 
    "we're saying that for an order total of $100, the tax should be negative", 
    "some number.", 
    "Clearly wrong, but that's OK, because the goal is to actually get COMPUTE", 
    "TAX to do something and tell us what it did.", 
    "And once we're pretty confident that this is deterministic.", 
    "With the legislature these days, who really knows but let's assume in this", 
    "example that this is a deterministic calculation.", 
    "Then, you actually just change your expectation and you have a", 
    "green pass and test.", 
    "Now don't rely on this too much because if your code actually has", 
    "bugs, or if your code is not deterministic, this might not work as", 
    "well as you'd like.", 
    "But the idea is that this is a way that you could incrementally discover", 
    "knowledge as you read along with the code.", 
    "You can, by trial and error, figure out how some of these pieces work,", 
    "create scaffolding around the places you need to change, and then give", 
    "yourself some confidence that, at least, tests that you know were", 
    "working before should still work the same way.", 
    "With that in mind, what could you say about integration versus module or", 
    "unit-level characterization tests?", 
    "Could you say that integration-level characterization tests are based on", 
    "fewer assumptions about the code compared to module or unit-level", 
    "characterization tests?", 
    "That integration level tests are just as likely to be unexpectedly dependent", 
    "on things in the production database.", 
    "Remember we talked last time about how one of the challenges of getting your", 
    "app running in a staging or development environment, is you need", 
    "some subset of the database that constitutes a valid thing within which", 
    "there's referential integrity.", 
    "Could this be more or less of a problem with integration level", 
    "characterization tests?", 
    "Characterization tests at the integration-level rely less on", 
    "detailed knowledge about the structure of the code, or that if you watched a", 
    "customer do the action, then you should be able to create an", 
    "integration-level characterization test just by mechanizing the action by", 
    "brute force.", 
    "So one of these statements is false."
  ]
}