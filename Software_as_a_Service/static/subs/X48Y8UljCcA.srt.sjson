{
  "start": [
    840, 
    2645, 
    5960, 
    9430, 
    11640, 
    17120, 
    18470, 
    19530, 
    22100, 
    25020, 
    28020, 
    29530, 
    32640, 
    36410, 
    39550, 
    42760, 
    46060, 
    48580, 
    49290, 
    54310, 
    57620, 
    60280, 
    61560, 
    63180, 
    63620, 
    66970, 
    69210, 
    71320, 
    74570, 
    75330, 
    77040, 
    79600, 
    81670, 
    84330, 
    87210, 
    89540, 
    92390, 
    93360, 
    96330, 
    100130, 
    101490, 
    102980, 
    105540, 
    106990, 
    107720, 
    111780, 
    112930, 
    115920, 
    118350, 
    120130, 
    124280, 
    128900, 
    130270, 
    133690, 
    140340, 
    142780, 
    146230, 
    148480, 
    151440, 
    155780, 
    158790, 
    160530, 
    166390, 
    169360, 
    172930, 
    176050, 
    178010, 
    182900, 
    186640, 
    188010, 
    190230, 
    193600, 
    196530, 
    199870, 
    200900, 
    202440, 
    206560, 
    209950, 
    213680, 
    214630, 
    218820, 
    221860, 
    225160, 
    230630, 
    231620, 
    235280, 
    237760, 
    239650, 
    241080, 
    242090, 
    246460, 
    251050, 
    254110, 
    258089, 
    260140, 
    262560, 
    265700, 
    270070, 
    271040, 
    274200, 
    277670, 
    281470, 
    284220, 
    287690, 
    289520, 
    291150, 
    294540, 
    297320, 
    298470, 
    302110, 
    305360, 
    307800, 
    309650, 
    312880, 
    315520, 
    318190, 
    322520, 
    324430, 
    328480, 
    329680, 
    331880, 
    333060, 
    335210, 
    339120, 
    340690, 
    343390, 
    347640, 
    349210, 
    354110, 
    354870, 
    357010, 
    358100, 
    361610, 
    368780, 
    370140, 
    372970, 
    374790, 
    375180, 
    379080, 
    384650, 
    388160, 
    393060, 
    396240, 
    397400, 
    400610, 
    401810, 
    403890, 
    406710, 
    408720, 
    409740, 
    410530, 
    417210, 
    419650, 
    421200, 
    422540, 
    424270, 
    428030, 
    428780, 
    431450, 
    436570, 
    438350, 
    439950, 
    441220, 
    442680, 
    445770, 
    448040, 
    452730, 
    455370, 
    456790, 
    458550, 
    462710, 
    463910, 
    468550, 
    469150, 
    470190, 
    472630, 
    476740, 
    479440, 
    481870, 
    483630, 
    484760, 
    489880, 
    490230, 
    493260, 
    495260, 
    497600, 
    501080, 
    504650, 
    508810, 
    513500, 
    514710, 
    518750, 
    520010, 
    522590, 
    523549, 
    524650, 
    526910, 
    531150, 
    533300, 
    534670, 
    536510, 
    539690, 
    540200, 
    543870, 
    548080, 
    553730, 
    557410, 
    559470, 
    563540, 
    567050, 
    570080, 
    573430, 
    575670, 
    579160, 
    583250, 
    584010, 
    586800, 
    589100, 
    590940, 
    594310, 
    596890, 
    601110, 
    604230, 
    606590, 
    610210
  ], 
  "end": [
    2645, 
    5960, 
    9430, 
    11640, 
    17120, 
    18470, 
    19530, 
    22100, 
    25020, 
    28020, 
    29530, 
    32640, 
    36410, 
    39550, 
    42760, 
    46060, 
    48580, 
    49290, 
    54310, 
    57620, 
    60280, 
    61560, 
    63180, 
    63620, 
    66970, 
    69210, 
    71320, 
    74570, 
    75330, 
    77040, 
    79600, 
    81670, 
    84330, 
    87210, 
    89540, 
    92390, 
    93360, 
    96330, 
    100130, 
    101490, 
    102980, 
    105540, 
    106990, 
    107720, 
    111780, 
    112930, 
    115920, 
    118350, 
    120130, 
    124280, 
    128900, 
    130270, 
    133690, 
    140340, 
    142780, 
    146230, 
    148480, 
    151440, 
    155780, 
    158790, 
    160530, 
    166390, 
    169360, 
    172930, 
    176050, 
    178010, 
    182900, 
    186640, 
    188010, 
    190230, 
    193600, 
    196530, 
    199870, 
    200900, 
    202440, 
    206560, 
    209950, 
    213680, 
    214630, 
    218820, 
    221860, 
    225160, 
    230630, 
    231620, 
    235280, 
    237760, 
    239650, 
    241080, 
    242090, 
    246460, 
    251050, 
    254110, 
    258089, 
    260140, 
    262560, 
    265700, 
    270070, 
    271040, 
    274200, 
    277670, 
    281470, 
    284220, 
    287690, 
    289520, 
    291150, 
    294540, 
    297320, 
    298470, 
    302110, 
    305360, 
    307800, 
    309650, 
    312880, 
    315520, 
    318190, 
    322520, 
    324430, 
    328480, 
    329680, 
    331880, 
    333060, 
    335210, 
    339120, 
    340690, 
    343390, 
    347640, 
    349210, 
    354110, 
    354870, 
    357010, 
    358100, 
    361610, 
    368780, 
    370140, 
    372970, 
    374790, 
    375180, 
    379080, 
    384650, 
    388160, 
    393060, 
    396240, 
    397400, 
    400610, 
    401810, 
    403890, 
    406710, 
    408720, 
    409740, 
    410530, 
    417210, 
    419650, 
    421200, 
    422540, 
    424270, 
    428030, 
    428780, 
    431450, 
    436570, 
    438350, 
    439950, 
    441220, 
    442680, 
    445770, 
    448040, 
    452730, 
    455370, 
    456790, 
    458550, 
    462710, 
    463910, 
    468550, 
    469150, 
    470190, 
    472630, 
    476740, 
    479440, 
    481870, 
    483630, 
    484760, 
    486010, 
    490230, 
    493260, 
    495260, 
    497600, 
    501080, 
    504650, 
    508810, 
    513500, 
    514710, 
    518750, 
    520010, 
    522590, 
    523549, 
    524650, 
    526910, 
    531150, 
    533300, 
    534670, 
    536510, 
    539690, 
    540200, 
    543870, 
    548080, 
    553730, 
    557410, 
    559470, 
    563540, 
    567050, 
    570080, 
    573430, 
    575670, 
    579160, 
    583250, 
    584010, 
    586800, 
    589100, 
    590940, 
    594310, 
    596890, 
    601110, 
    604230, 
    606590, 
    610210, 
    611460
  ], 
  "text": [
    "ARMANDO FOX: Green is actually correct, but let's just talk through", 
    "to make sure that everybody's on the same page here.", 
    "The reason green is correct is there is no magic in routes.", 
    "We have to tell Rails what routes we want.", 
    "And in our example, we showed how we can nest one route inside of another.", 
    "Convention over configuration?", 
    "Well, yeah.", 
    "We're using convention over configuration in the way we", 
    "constructed the name of the path, but we still have to declare it.", 
    "Rails doesn't automatically figure this out for us.", 
    "You could argue that it might, by the way.", 
    "An alternative design decision, which was not taken by the Rails designers", 
    "is, we're going to go scan your model files looking for has_many", 
    "relationships and we will automatically instantiate the routes", 
    "for you without you having to put anything in routes.rb.", 
    "That decision wasn't made just because it's one thing to have a convention", 
    "and make it easy to do, and it's another thing to force you out of that", 
    "convention.", 
    "If you had a good reason why your URL should look different, automatically", 
    "ramming that behavior down your throat would have been a bad thing to do.", 
    "What about, there can be only one RESTful route to", 
    "any particular resource?", 
    "That's just false.", 
    "Right?", 
    "Given a resource and an action, there is no problem with having multiple", 
    "different routes that go to it.", 
    "You probably don't want to have it be the other way around though.", 
    "Having a single route that can do multiple things to different resources", 
    "is a bad idea.", 
    "That's sort of like non RESTfulness.", 
    "But there's no problem having more than one way to do an", 
    "operation on a resource.", 
    "And then the last answer was no, because having more than one", 
    "through-association would lead to ambiguity.", 
    "We discussed last time that that's actually a true statement but it", 
    "doesn't apply in this case because we're not actually navigating the", 
    "through-association.", 
    "We're just navigating the has_many part of the association.", 
    "So this was thrown in there to kind of lead you astray but you're all alert,", 
    "so you were not led astray.", 
    "This is a statement that is accurate.", 
    "It just doesn't apply to this question.", 
    "Yes?", 
    "Ah, good question.", 
    "The question was, if I didn't specify what HTTP method, what", 
    "would be the default?", 
    "The default for form tags is POST.", 
    "So in this case, I needed to use PUT.", 
    "Why did I need to use PUT, by the way?", 
    "Because just as with the simple resource routes that we've already", 
    "seen, movie_review_path has a different meaning with PUT than it", 
    "does with POST.", 
    "Now, you could argue about whether that's needlessly confusing or not.", 
    "They could have just chosen different strings for each of these, and then", 
    "always have the same method and it wouldn't matter.", 
    "But the reason we had to specify the method is that POST is the default but", 
    "we were actually trying to do the UPDATE action, that requires you to", 
    "explicitly say PUT.", 
    "And as a reminder, back to lecture two or three or quite some time ago,", 
    "remember that web browsers are not actually able to generate PUTs, they", 
    "can only generate GET or POST.", 
    "But that's not a problem because when you specify a method PUT, what", 
    "actually happens is there's some additional logic submitted with the", 
    "form that Rails intercepts and it turns it into a PUT internally.", 
    "So physically it gets submitted using POST but from your controller's point", 
    "of view, it will look just like a PUT.", 
    "And recall that the reason that design decision was made is, if you were", 
    "talking to a real external software as a service, PUT is perfectly", 
    "appropriate.", 
    "Web browsers are crippled in that they can't do it.", 
    "So the decision that was made is, let's make it behave in a way that is", 
    "sensible in a service oriented architecture and we'll put in this", 
    "workaround hack that turns PUT into POST just so that web browsers don't", 
    "have a hard time.", 
    "But that's why we had to specify it.", 
    "You could do a form that submits with GET but it's highly unorthodox.", 
    "As a general rule, and I was commenting on this in office hours", 
    "today, if you use GET as part of a route, that route should not have any", 
    "side effects.", 
    "Doing a GET should not cause an action that is isn't item potent.", 
    "So like doing a GET that makes a purchase would be bad.", 
    "Web crawlers would have a field day with that.", 
    "And in general, POST usually implies that an important state", 
    "change could occur.", 
    "So it's best not to use POST for things that really are just doing read", 
    "only stuff and are not changing any state.", 
    "This is a cool thing.", 
    "This is really cool.", 
    "Reusable scopes.", 
    "This is a way to dry out queries that got much, much better in Rails 3.", 
    "And when we later talk about performance and caching, and also in", 
    "the interest of pointing out, how can big ideas from programming languages", 
    "actually make life better for practical code projects like this?", 
    "This is a great topic.", 
    "So we talked about the idea of associations.", 
    "Suppose you wanted to customize some of the associations.", 
    "For example, I want to ask questions like, a query on which movies are", 
    "appropriate for kids.", 
    "Maybe that means only PG or G rated movies.", 
    "I might want to talk about movies that have at least some number of reviews", 
    "written about them or some minimum average review score across all of", 
    "their reviews, or that have been reviewed recently.", 
    "And you can imagine writing queries that do any of these things, but", 
    "what's really cool is if you could easily do", 
    "combinations of these things.", 
    "So if these were all building blocks, I might want to be able to say, I want", 
    "to see all movies appropriate for kids that have a minimum", 
    "average review score.", 
    "Or I want to see all movies that have been recently reviewed and have at", 
    "least N reviews and are appropriate for kids, although I don't care if", 
    "they're appropriate for kids.", 
    "So scopes give you a way to do this.", 
    "You can actually write stuff just like this and you can more or less stack", 
    "them in any order as if they were building blocks.", 
    "Let's see how they work.", 
    "So here is a couple of different scope definitions.", 
    "Here is a really simple scope.", 
    "This is a scope that only applies to the movie class, and all it does is", 
    "specify conditions.", 
    "This is the same kind of conditions as you would specify when", 
    "you were using WHERE.", 
    "So it's just SQL terms.", 
    "So if the rating is either G or PG, I can say that that makes it a movie", 
    "that's good for kids.", 
    "Let's actually cut and paste this code so we can play around with it.", 
    "By the way, one nice little thing that I did here, I redefined the INSPECT", 
    "instance method on movies.", 
    "That's so that when I view a movie, I get a much nicer representation of it.", 
    "See?", 
    "I get that.", 
    "This is a good trick to know.", 
    "It's a way of pretty printing objects of your own class.", 
    "So I said, good for kids means it has these ratings and, in fact, we can see", 
    "that that works.", 
    "What about this?", 
    "This is much more interesting.", 
    "Right?", 
    "So this is a scope that takes advantage of the association from", 
    "movies to reviews, which means it has to join the reviews table.", 
    "If you look up a little bit about other operators that are provided for", 
    "you in SQL, Structured Query Language, what I'm saying is I'm going to JOIN", 
    "the reviews table and I'm going to GROUP all the reviews according to", 
    "their movie ID.", 
    "And I'm going to filter all the ones where the average score is greater", 
    "than SUM CUTOFF.", 
    "And I can provide the CUTOFF as a parameter.", 
    "This is a very, very cool use of a higher order function.", 
    "If you don't think this is a cool use of a higher order function, you need", 
    "to rethink your life.", 
    "OK?", 
    "So let's see it in action and then maybe the elegance will win you over.", 
    "So if we said, what did I call it?", 
    "With good reviews?", 
    "And I have to provide an argument.", 
    "I'll set the bar pretty low.", 
    "So this is the only movie whose average number of potatoes is", 
    "greater than two.", 
    "I didn't really enter that many reviews so that's not too surprising,", 
    "but what's much cooler is I can stack these things.", 
    "Yes, I heard a small murmur going through the crowd.", 
    "But it gets even better than that.", 
    "It gets even better than that.", 
    "Why can I stack them?", 
    "This is a deep question and I want to spend a minute on it because I want", 
    "you to understand this and not just use it blindly.", 
    "When I call movie.for kids, what is the return value of that thing?", 
    "Somebody said an Enumerable of movies.", 
    "That's almost right.", 
    "It is a much cooler thing than that.", 
    "It is a promise to evaluate to that, but it's not actually evaluated.", 
    "Let me prove it to you.", 
    "I'll do that, but I'll just evaluate nil.", 
    "OK.", 
    "What happened here?", 
    "More importantly, what did not happen?", 
    "Notice that, so far, every time we query the database, Rails helpfully", 
    "prints out the query that it's about to send.", 
    "But nothing got printed here.", 
    "Why not?", 
    "No, it's actually not nil.", 
    "Here, I'll prove that to you too.", 
    "OK.", 
    "Now what's the value of M?", 
    "Hmm, that's not nil.", 
    "What happened?", 
    "What's the value of movie.for kids?", 
    "The value of movie.for kids is a relation.", 
    "It is a thing that could be evaluated to pull a result out of the database,", 
    "but as you could see from this example here, executing movie.for kids didn't", 
    "actually do that.", 
    "How come this one does create a query?", 
    "What happened there?", 
    "This is subtle, but you got to learn to think like programmers here.", 
    "Sir?", 
    "Oh, a thunk.", 
    "Somebody has taken other advanced programming classes.", 
    "Instead of a thunk let's call it the promise, promise to evaluate.", 
    "61A.", 
    "You guys learn about thunks in 61A?", 
    "That's awesome.", 
    "So the reason it printed it out in this case, has nothing to do with", 
    "Ruby, right?", 
    "It's the fact that I'm using the IRB Interactive Ruby Interpreter which is", 
    "forced to print out the value of the expression every time I hit Return.", 
    "The value of this expression is the last thing evaluated, which is nil.", 
    "The value of this expression requires evaluating movie.for kids.", 
    "So it forces the database access.", 
    "But in your program, movie.for kids doesn't actually do a database access.", 
    "It returns an object that could do a database access if you ever force it", 
    "to do so and that's the reason we can chain them together.", 
    "You can chain these ad infinitum, but the query doesn't actually happen", 
    "until somebody asks for a value.", 
    "So let's see if we could drive that point home a little bit.", 
    "So when I say scopes are evaluated lazily, that's kind of what I'm", 
    "getting at.", 
    "Let us drive the point home with a little puzzle.", 
    "Here's some code you might see.", 
    "If you've defined these filters.", 
    "In my controller I've defined the new action, which is good movies for kids", 
    "and it chains these two scopes together.", 
    "And in my view, I'm going to grab this variable M that I set up in the", 
    "controller, and I'm just going to iterate over it and I have some pretty", 
    "printer that will print out each movie nicely.", 
    "So the question is, at what line in the code does the database actually", 
    "see some action?"
  ]
}