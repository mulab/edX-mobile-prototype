{
  "start": [
    510, 
    2340, 
    3450, 
    7720, 
    12170, 
    15180, 
    15670, 
    18920, 
    20010, 
    23510, 
    24800, 
    28750, 
    30860, 
    33820, 
    35840, 
    38520, 
    40910, 
    44270, 
    46570, 
    50240, 
    51440, 
    54840, 
    57870, 
    59040, 
    61850, 
    65010, 
    67210, 
    68160, 
    70200, 
    72690, 
    73900, 
    77330, 
    79970, 
    82470, 
    83460, 
    83680, 
    86540, 
    88410, 
    92200, 
    93670, 
    98170, 
    99880, 
    103240, 
    104540, 
    107620, 
    111670, 
    115590, 
    119230, 
    122760, 
    126000, 
    126580, 
    129880, 
    134030, 
    135800, 
    139250, 
    142610, 
    146600, 
    147330, 
    150820, 
    155010, 
    157780, 
    160250, 
    162390, 
    165940, 
    167630, 
    171040, 
    174770, 
    177460, 
    180750, 
    185520, 
    188250, 
    192230, 
    194950, 
    198600, 
    202440, 
    203670, 
    203820, 
    206260, 
    210680, 
    214780, 
    216280, 
    218550, 
    221600, 
    223420, 
    225990, 
    227390, 
    230290, 
    232830, 
    235910, 
    238370, 
    241080, 
    244240, 
    247240, 
    248760, 
    251800, 
    256459, 
    260880, 
    263930, 
    268060, 
    270370, 
    272520
  ], 
  "end": [
    2340, 
    3450, 
    7720, 
    12170, 
    15180, 
    15670, 
    18920, 
    20010, 
    23510, 
    24800, 
    28750, 
    30860, 
    33820, 
    35840, 
    38520, 
    40910, 
    44270, 
    46570, 
    50240, 
    51440, 
    54840, 
    57870, 
    59040, 
    61850, 
    65010, 
    67210, 
    68160, 
    70200, 
    72690, 
    73900, 
    77330, 
    79970, 
    82470, 
    83460, 
    83680, 
    86540, 
    88410, 
    92200, 
    93670, 
    98170, 
    99880, 
    103240, 
    104540, 
    107620, 
    111670, 
    115590, 
    119230, 
    122760, 
    126000, 
    126580, 
    129880, 
    134030, 
    135800, 
    139250, 
    142610, 
    146600, 
    147330, 
    150820, 
    155010, 
    157780, 
    160250, 
    162390, 
    165940, 
    167630, 
    171040, 
    174770, 
    177460, 
    180750, 
    185520, 
    188250, 
    192230, 
    194950, 
    198600, 
    202440, 
    203670, 
    203820, 
    206260, 
    210680, 
    214780, 
    216280, 
    218550, 
    221600, 
    223420, 
    225990, 
    227390, 
    230290, 
    232830, 
    235910, 
    238370, 
    241080, 
    244240, 
    247240, 
    248760, 
    251800, 
    256459, 
    260880, 
    263930, 
    268060, 
    270370, 
    272520, 
    274130
  ], 
  "text": [
    "ARMANDO FOX: We've looked at two different mechanisms in Rails that", 
    "help to DRY out your code.", 
    "We looked briefly at model validations and controller filters.", 
    "And we saw that a thing they have in common, is that they both represent a", 
    "way of thinking about what other languages have called aspect oriented", 
    "programming.", 
    "You have a cross-cutting concern, something that affects multiple points", 
    "in the application.", 
    "Your goal is to avoid repeating code with cutting and pasting at various", 
    "different points.", 
    "So what you really need is a way for a particular piece of code or advice to", 
    "be called from a variety of different places.", 
    "And comparing the two examples that we saw so far-- and by the way, we're", 
    "going to see other examples later in the semester.", 
    "For example, when we talk about caching to improve the", 
    "performance of SaaS apps.", 
    "Comparing the two examples we've seen so far, both of them can be seen as", 
    "examples of aspect orientedness.", 
    "And remember that in aspect oriented programming, advice is the", 
    "cross-cutting concern.", 
    "The code that you want to have run at various different points.", 
    "When you do validations, what you're checking is invariants on the model", 
    "being true or not.", 
    "In controller filters, you're checking whether there's some conditions in", 
    "place that would allow a controller action to run, for example.", 
    "Or actions that you want to take before or after a", 
    "controller action runs.", 
    "For example, suppose you wanted to do some benchmarking.", 
    "Suppose you want to time how long it takes your application", 
    "to do various actions.", 
    "One thing you might want to do is put a timer around every action, so that", 
    "when the action is about to be called, you start the timer.", 
    "And when the action finishes, you stop the timer, and see", 
    "how much time elapsed.", 
    "Right?", 
    "And in fact, that's one of the ways that Rails itself provides some simple", 
    "benchmarking.", 
    "Remember that we said a point cut refers to the place in the code where", 
    "the advice could get called.", 
    "And Ruby doesn't give you fully aspect oriented programming, but Rails", 
    "defines certain points for you.", 
    "So in the case of validations, we saw that there is this idea", 
    "of the model lifecycle.", 
    "In fact, we can refer back to this picture of it.", 
    "And there's well defined points in the lifecycle of an active record model,", 
    "where the different validations and other advices get called.", 
    "In the case of controller filters, you can define them to run before, after,", 
    "or both, with respect to any set of controller actions.", 
    "Model validations don't change the flow of executions, but controller", 
    "filters do.", 
    "Remember, that's why we saw that when you declare a filter, you also have to", 
    "provide some instructions as part of the filter that say what to do if the", 
    "filter condition doesn't pass.", 
    "In other words, if it's a before filter, and the intent is to prevent", 
    "some controller actions from happening unless conditions are met, you have to", 
    "provide advice along with the filter definition itself to say what", 
    "to do in that case.", 
    "Because it's in the middle of a control flow path.", 
    "In both cases, you can provide an arbitrary function, although we saw", 
    "for validations that there's some shortcuts provided for common", 
    "validations you'd want to do, like length of a string, and whether", 
    "something is a number.", 
    "And in both cases, we have to have a way of capturing information about", 
    "what happens if something goes wrong.", 
    "So we saw that in the case of validations, there is an active record", 
    "errors object that now becomes one of the attributes of the model.", 
    "And by checking the contents of that object, which has a bunch of neat", 
    "behaviors, you can figure out what validations failed and why.", 
    "In the case of a controller, we can capture information after the filter", 
    "has run, either in the flash or in the session.", 
    "And usually, a reason we'd want to do that is because it provides some", 
    "visual feedback back to the user about what went wrong.", 
    "So these are two ways of DRYing out your app, by essentially pulling out", 
    "information that's relevant at multiple points in the program, and", 
    "being able to keep it in one place.", 
    "Right?", 
    "That's sort of the essence of DRYness.", 
    "So, I guess we could summarize what we've seen so far as, generally", 
    "speaking, a AOP was created as a way of making it easier to DRY out", 
    "cross-cutting concerns.", 
    "And although we don't have general--", 
    "you can put any advice or any point kind of anywhere you want, Rails", 
    "provides a few pre-defined point cuts.", 
    "So this is sort of a selective application of this kind of", 
    "technology.", 
    "We haven't talked about it in lecture, but you can read in the book and in", 
    "many of the online tutorials about partials.", 
    "a partial is basically a self-contained chunk of a view that", 
    "could be reused for many other views.", 
    "Those aren't really an example of aspect orientedness, because you have", 
    "to explicitly refer to the view everywhere that you want it pulled in.", 
    "But it is another way to DRY out parts of your app and collect", 
    "information in one place.", 
    "So that's why I sort of include it in this section.", 
    "So, given that we've seen examples of these two different kinds of", 
    "DRYnesses, we could ask, what are the Ruby language features that allow", 
    "these to work, and to make them sort of as concise as they are?", 
    "Is it that they are taking advantage of Ruby's higher order functions?", 
    "Is it that they're taking advantage of closures?", 
    "Is it that they're taking advantage of metaprogramming?", 
    "Or is it some combination of those?"
  ]
}