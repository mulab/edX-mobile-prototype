{
  "start": [
    890, 
    1210, 
    1970, 
    4350, 
    7100, 
    8980, 
    10900, 
    11730, 
    14870, 
    17810, 
    19290, 
    20280, 
    23200, 
    24910, 
    28520, 
    32350, 
    36890, 
    41080, 
    44000, 
    47230, 
    50900, 
    52160, 
    55930, 
    57780, 
    60650, 
    65570, 
    68650, 
    69130, 
    71790, 
    73240, 
    76940, 
    80420, 
    83700, 
    87040, 
    91050, 
    94050, 
    96320, 
    100860, 
    105710, 
    106350, 
    109870, 
    112670, 
    114190, 
    114900, 
    117810, 
    120540, 
    121730, 
    124670, 
    126170, 
    129169, 
    132410
  ], 
  "end": [
    1210, 
    1970, 
    4350, 
    7100, 
    8980, 
    10900, 
    11730, 
    14870, 
    17810, 
    19290, 
    20280, 
    23200, 
    24910, 
    28520, 
    32350, 
    36890, 
    41080, 
    44000, 
    47230, 
    50900, 
    52160, 
    55930, 
    57780, 
    60650, 
    65570, 
    68650, 
    69130, 
    71790, 
    73240, 
    76940, 
    80420, 
    83700, 
    87040, 
    91050, 
    94050, 
    96320, 
    100860, 
    105710, 
    106350, 
    109870, 
    112670, 
    114190, 
    114900, 
    117810, 
    120540, 
    121730, 
    124670, 
    126170, 
    129169, 
    132410, 
    133660
  ], 
  "text": [
    "ARMANDO FOX: All right.", 
    "So let's go through these.", 
    "Let's go from the bottom up.", 
    "No, because Associations provide functionality that's not necessarily", 
    "related to the model's business logic.", 
    "That's a true statement, but it doesn't have a lot to do with the", 
    "open/closed principle.", 
    "So nope, that's not the right answer.", 
    "No, because we cannot add a new type of association without", 
    "modifying the source.", 
    "This is a true statement.", 
    "And it's actually a true statement about the open/closedness of the way", 
    "associations are implemented.", 
    "So, for example, if I wanted to add the association that one thing can", 
    "belong to several other things, if I wanted to add a notion of inverse", 
    "ownership, there's actually no way to implement that in Associations without", 
    "going in and changing or adding code to the association's module.", 
    "It's so deeply wired into how it talks to the database that you'd have to", 
    "change Rails itself to add a new type of association.", 
    "So in that respect, you could say the Associations module doesn't really", 
    "adhere to the open/closed principle.", 
    "You can't readily extend it without making some changes to the code", 
    "that's there now.", 
    "We can change the type of relational database used by the app.", 
    "Again, certainly true, but that's not because of Associations.", 
    "That's because of the way that the Rails ActiveRecord module is", 
    "implemented.", 
    "It's specifically implemented so that one of the extension", 
    "points is the database.", 
    "It's so exposed, in fact, you just put it into a config file, and Rails", 
    "identifies what kind of database connector to use based on that value.", 
    "So that's actually a good illustration of adhering to the open/closed", 
    "principle and using a variant of that abstract factory concept.", 
    "At run time, you look in database YML, you see what kind of database it is,", 
    "you use that information to instantiate the right kind of adapter,", 
    "and then you call methods only on that adapter.", 
    "And it can delegate to its super class for generic methods.", 
    "So the green statement is true, but it's not an example that talks about", 
    "Associations.", 
    "It's really about the architecture of the ActiveRecord module.", 
    "And the first choice-- yes, because no source changes are", 
    "needed in the models.", 
    "Same thing, right?", 
    "We're not talking about whether your models adhere to OCP.", 
    "We're talking about whether the Associations functionality module", 
    "adheres to OCP.", 
    "So again, the top one is a true statement, but it's not one that", 
    "answers the question.", 
    "OK, so we've knocked down the S and the O in SOLID.", 
    "And when we're back on Wednesday, we'll talk about the last three and", 
    "some reflections on this."
  ]
}