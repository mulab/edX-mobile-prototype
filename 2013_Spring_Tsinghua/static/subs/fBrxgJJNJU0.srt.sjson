{
  "start": [
    180, 
    1500, 
    3280, 
    4890, 
    7590, 
    11100, 
    13980, 
    15515, 
    17400, 
    20280, 
    20990, 
    22360, 
    23730, 
    26790, 
    29610, 
    30220, 
    33460, 
    35310, 
    39240, 
    42410, 
    44970, 
    47070, 
    48170, 
    52020, 
    54650, 
    56110, 
    63170, 
    66260, 
    68590, 
    71540, 
    74820, 
    76120, 
    80740, 
    84250, 
    86260, 
    88990, 
    90400, 
    93870, 
    99380, 
    100150, 
    103740, 
    106680, 
    110400, 
    113080, 
    117130, 
    121180, 
    123130, 
    127170, 
    129639, 
    133540, 
    134250, 
    138020, 
    140380, 
    144510, 
    148280, 
    150510, 
    152170, 
    154910, 
    156100, 
    158110, 
    161380, 
    165140, 
    166600, 
    171100, 
    172100, 
    174890, 
    179120, 
    181620, 
    183890, 
    187240, 
    191760, 
    194500, 
    199190, 
    203140, 
    207540, 
    210530, 
    213130, 
    214690, 
    218650, 
    222515, 
    224590, 
    229270, 
    232760, 
    236330, 
    237620, 
    241480, 
    246520, 
    247520, 
    249590, 
    252130, 
    253600, 
    257209, 
    261019, 
    261890, 
    264800, 
    268630, 
    271590, 
    273650, 
    276720, 
    279460, 
    281270, 
    282300, 
    285140, 
    287690, 
    291230, 
    294410, 
    300890, 
    303980, 
    306590, 
    310390, 
    311460, 
    316160, 
    318160, 
    320940, 
    322610, 
    325390, 
    328580, 
    332420, 
    335910, 
    338410, 
    341160, 
    342380, 
    347500, 
    350830, 
    352140, 
    356570, 
    358700, 
    359585, 
    363330, 
    367360, 
    370440, 
    373650, 
    375140, 
    379340, 
    382300, 
    383610, 
    386160, 
    390430, 
    391570, 
    396080, 
    400050, 
    403130, 
    408370, 
    412100, 
    414990, 
    417860, 
    420010, 
    421690, 
    425120, 
    429400, 
    429410, 
    429420, 
    429430, 
    429520, 
    430860, 
    434800, 
    437850, 
    442360, 
    446680, 
    450530, 
    452390, 
    456530, 
    462380, 
    464850, 
    466620, 
    470610, 
    473540, 
    475050, 
    477220, 
    479520, 
    480590, 
    483990, 
    487750, 
    490110, 
    493560, 
    496620, 
    499060, 
    504240, 
    507200, 
    509930, 
    512020, 
    515840, 
    519919, 
    523270, 
    525880, 
    531010, 
    536430, 
    539480, 
    543730, 
    545440, 
    549030, 
    551480, 
    552130, 
    555980, 
    561860, 
    564400, 
    569440, 
    570310, 
    571510, 
    574830, 
    578830, 
    580410, 
    584310, 
    587480, 
    591570, 
    594970, 
    598100, 
    601920, 
    608170, 
    609330, 
    613240, 
    614940, 
    618130, 
    620370, 
    623870, 
    629000, 
    630450, 
    631760, 
    633720, 
    635410, 
    638210, 
    642250, 
    643250, 
    646200, 
    648100, 
    650060, 
    652710, 
    656050, 
    658100, 
    662550, 
    665490, 
    666360, 
    670170, 
    676270, 
    677475, 
    680010, 
    683160, 
    687490, 
    689020, 
    692850, 
    696060, 
    699610, 
    702440, 
    705920, 
    708830, 
    711780, 
    715110, 
    718820, 
    720550, 
    723930, 
    725240, 
    727900, 
    729000, 
    732090, 
    735820, 
    738770, 
    742900, 
    747410, 
    749800, 
    753300, 
    755660, 
    758860, 
    761710, 
    762490, 
    766520, 
    769450, 
    772160, 
    775670, 
    776730, 
    780480, 
    781670, 
    784780, 
    786140, 
    788170, 
    788730, 
    790360, 
    793300, 
    795010, 
    798010, 
    801180, 
    804365, 
    805790, 
    808800, 
    811080, 
    814240, 
    815470, 
    818450, 
    819660, 
    820540, 
    821880, 
    825910, 
    827230, 
    832780, 
    834080, 
    835570, 
    838790, 
    840930, 
    844570, 
    846230, 
    850130, 
    853620, 
    855640
  ], 
  "end": [
    1500, 
    3280, 
    4890, 
    7590, 
    11100, 
    13980, 
    15515, 
    17400, 
    20280, 
    20990, 
    22360, 
    23730, 
    26790, 
    29610, 
    30220, 
    33460, 
    35310, 
    39240, 
    42410, 
    44970, 
    47070, 
    48170, 
    52020, 
    54650, 
    56110, 
    63170, 
    66260, 
    68590, 
    71540, 
    74820, 
    76120, 
    80740, 
    84250, 
    86260, 
    88990, 
    90400, 
    93870, 
    99380, 
    100150, 
    103740, 
    106680, 
    110400, 
    113080, 
    117130, 
    121180, 
    123130, 
    127170, 
    129639, 
    133540, 
    134250, 
    138020, 
    140380, 
    144510, 
    148280, 
    150510, 
    152170, 
    154910, 
    156100, 
    158110, 
    161380, 
    165140, 
    166600, 
    171100, 
    172100, 
    174890, 
    179120, 
    181620, 
    183890, 
    187240, 
    191760, 
    194500, 
    199190, 
    203140, 
    207540, 
    210530, 
    213130, 
    214690, 
    218650, 
    222515, 
    224590, 
    229270, 
    232760, 
    236330, 
    237620, 
    241480, 
    246520, 
    247520, 
    249590, 
    252130, 
    253600, 
    257209, 
    261019, 
    261890, 
    264800, 
    268630, 
    271590, 
    273650, 
    276720, 
    279460, 
    281270, 
    282300, 
    285140, 
    287690, 
    291230, 
    294410, 
    300890, 
    303980, 
    306590, 
    310390, 
    311460, 
    316160, 
    318160, 
    320940, 
    322610, 
    325390, 
    328580, 
    332420, 
    335910, 
    338410, 
    341160, 
    342380, 
    347500, 
    350830, 
    352140, 
    356570, 
    358700, 
    359585, 
    363330, 
    367360, 
    370440, 
    373650, 
    375140, 
    379340, 
    382300, 
    383610, 
    386160, 
    390430, 
    391570, 
    396080, 
    400050, 
    403130, 
    408370, 
    412100, 
    414990, 
    417860, 
    420010, 
    421690, 
    425120, 
    426370, 
    429410, 
    429420, 
    429430, 
    429520, 
    430860, 
    434800, 
    437850, 
    442360, 
    446680, 
    450530, 
    452390, 
    456530, 
    462380, 
    464850, 
    466620, 
    470610, 
    473540, 
    475050, 
    477220, 
    479520, 
    480590, 
    483990, 
    487750, 
    490110, 
    493560, 
    496620, 
    499060, 
    504240, 
    507200, 
    509930, 
    512020, 
    515840, 
    519919, 
    523270, 
    525880, 
    531010, 
    536430, 
    537680, 
    543730, 
    545440, 
    549030, 
    551480, 
    552130, 
    555980, 
    561860, 
    564400, 
    569440, 
    570310, 
    571510, 
    574830, 
    578830, 
    580410, 
    584310, 
    587480, 
    591570, 
    594970, 
    598100, 
    601920, 
    608170, 
    609330, 
    613240, 
    614940, 
    618130, 
    620370, 
    623870, 
    629000, 
    630450, 
    631760, 
    633720, 
    635410, 
    638210, 
    642250, 
    643250, 
    646200, 
    648100, 
    650060, 
    652710, 
    656050, 
    658100, 
    662550, 
    665490, 
    666360, 
    670170, 
    676270, 
    677475, 
    680010, 
    683160, 
    687490, 
    689020, 
    692850, 
    696060, 
    699610, 
    702440, 
    705920, 
    708830, 
    711780, 
    715110, 
    718820, 
    720550, 
    723930, 
    725240, 
    727900, 
    729000, 
    732090, 
    735820, 
    738770, 
    742900, 
    747410, 
    749800, 
    753300, 
    755660, 
    758860, 
    761710, 
    762490, 
    766520, 
    769450, 
    772160, 
    775670, 
    776730, 
    780480, 
    781670, 
    784780, 
    786140, 
    788170, 
    788730, 
    790360, 
    793300, 
    795010, 
    798010, 
    801180, 
    804365, 
    805790, 
    808800, 
    811080, 
    814240, 
    815470, 
    818450, 
    819660, 
    820540, 
    821880, 
    825910, 
    827230, 
    832780, 
    834080, 
    835570, 
    838790, 
    840930, 
    844570, 
    846230, 
    850130, 
    853620, 
    855640, 
    857820
  ], 
  "text": [
    "Let's go through these one by one.", 
    "We had the majority opinion was for orange.", 
    "So we'll start at the bottom.", 
    "Although DataMapper doesn't use a relational database, it's a valid way", 
    "to implement a model, absolutely true.", 
    "In fact, as I just mentioned, if you write apps that run on Google App", 
    "Engine, you're basically using DataMapper, and,", 
    "yeah, those are models.", 
    "Although the model data is displayed by the view, the direct interaction is", 
    "with the controller.", 
    "Yep, that is sort of the essence of the", 
    "Model-View-Controller design pattern.", 
    "There is a narrow interface between those pieces.", 
    "Part of the model's job is converting between in memory and stored", 
    "representations.", 
    "Well, that's kind of how we began the discussion of what's the", 
    "model's job in MVC.", 
    "So by elimination, that leaves the top one, the CRUD actions can only apply", 
    "to models backed by an active record capable database.", 
    "CRUD generically is just Create, Read, Update, and Delete.", 
    "And anything that stores data you could talk about", 
    "applying these actions.", 
    "DataMapper does them, too, it just associates the actions with a separate", 
    "mapper class as opposed to bundling them inside of each of", 
    "the types of entities.", 
    "So with that under our hypothetical belts, we can talk about this last", 
    "little bit of architectural foo before we go into Rails itself.", 
    "And this is controllers, routes, and restfulness.", 
    "REST is a term that you're going to hear a lot during this class.", 
    "In fact, in the last year or so, if you do any web programming, you", 
    "probably already heard the term.", 
    "And it's actually much easier to understand than you would think by the", 
    "voluminous references to it in the interwebs.", 
    "We're now, as a reminder, where are we?", 
    "We're still diving down into the Model-View-Controller", 
    "structure of our app.", 
    "And we've moved on from models to controllers.", 
    "So recall that the controller is the direct mediator between the user and", 
    "the rest of the world.", 
    "The user interacts with the view, but whatever happens in the view, it's the", 
    "controller's job to sort of take that and do something with it.", 
    "So when we said that because we're going to do an app that's", 
    "essentially--", 
    "because we're using URL's to address a web application, one of the problems", 
    "we have to solve is deciding how a particular URL maps to one of the", 
    "things that the application can do.", 
    "And in Rails, this concept is called a route.", 
    "Because Rails uses Model-View-Controller as its", 
    "underlying architecture, there's a really sort of regular way that routes", 
    "tend to lay out.", 
    "And when you start working on homework two, which is Rails, you'll start", 
    "seeing some of this.", 
    "So the basic unit of things that your app can do are controller actions.", 
    "Roughly speaking, for everything that the user can do on a page, there is", 
    "some controller action that is going to decide how to", 
    "respond to that thing.", 
    "Now, it's not to say that you could reuse code across controller actions,", 
    "absolutely you can.", 
    "But this mapping is pretty much one to one.", 
    "The user clicks on a particular button or submits a particular form or", 
    "whatever, there is a method somewhere called a controller action that is", 
    "going to take care of doing that.", 
    "So what we need to do, is we need to map an HTTP request to the appropriate", 
    "controller action.", 
    "At the end of the day, that is what a Route helps you do.", 
    "Given a URL, which controller and which action is going to be called?", 
    "Now, in fact, the routing subsystem does a few more things for you.", 
    "But this is kind of the basics.", 
    "Remember that HTTP actually has more than one kind of method.", 
    "I said that GET and POST are the two methods that you see most frequently.", 
    "If you've been doing some kind of self-taught web programming, it might", 
    "surprise you to know that PUT and DELETE are also HTTP methods.", 
    "And technically, the REST specification says that when you're", 
    "trying to update something as opposed to creating it, you should use PUT.", 
    "And when you are trying to delete something, you should use DELETE.", 
    "Now, there's only one small problem with this which is that web browsers", 
    "only do GET and POST.", 
    "For historical reasons, even though all four of these are legitimate HTTP", 
    "method names, or verbs as they're sometimes called, only GET and POST", 
    "are actually understood by web browsers.", 
    "So there's a little bit of engineering in Rails that allows you to pretend,", 
    "essentially, that PUT and DELETE are implemented by the browser so that", 
    "your web application can pretend that it's got the full repertoire of these.", 
    "Why would you do this?", 
    "Because as we'll see, when we start building apps that work in a service", 
    "oriented architecture, the thing consuming the output of your app may", 
    "not be a web browser.", 
    "It may be another application somewhere.", 
    "There's no reason that those applications would restrict themselves", 
    "to just using GET and POST.", 
    "They would use all four HTTP methods as intended to be used.", 
    "So, Rails nicely makes it possible for us to behave as if these were", 
    "implemented.", 
    "And the way that it's done is that when we generate a form that has, for", 
    "example, a delete this thing button, Rails will arrange for it to be the", 
    "case that that button click looks like it has the DELETE method even though", 
    "the browser could never possibly generate it.", 
    "It's just something to keep in mind, and it's why you'll see reference to", 
    "PUT and DELETE in the Rails documentation.", 
    "And you're thinking wait, browsers don't do that.", 
    "And indeed they don't.", 
    "This is something that Rails does, not something that browser does.", 
    "So, what was all that discussion to tell you?", 
    "It was a round about way of saying that actually a route has to map not", 
    "just the URL but the URL plus the method.", 
    "In particular, the URL, for example, GET/movies/3 has a particular meaning,", 
    "which is show me information about the movie whose ID, in other words, its", 
    "primary key, in the database table is 3.", 
    "But that same type of URL with the PUT verb has a", 
    "completely different meaning.", 
    "It means update the movie whose ID is whatever from the information that I'm", 
    "sending along with you.", 
    "So keep in mind that a route is not just the URL.", 
    "This is a very common--", 
    "in the early days of the web, people played fast and loose with this.", 
    "The request is both the verb and the URL.", 
    "And what the routing subsystem does is take the pair of those things and map", 
    "them to something that your app is going to do.", 
    "So here's a very quick introduction.", 
    "And when we talk about Rails in more detail, we'll see some examples, and", 
    "I'll do some fun code demos.", 
    "But just to kind of get year head into this space, remember that the", 
    "application server gets control after the presentation tier has received the", 
    "request from the browser.", 
    "It gets handed the method, the HTTP method like GET or POST and the URI.", 
    "And the first thing that happens is the routing subsystems", 
    "springs into action.", 
    "It's a very exciting thing to watch, springing into action for code, and it", 
    "will figure out what controller and what action in that controller is", 
    "supposed to be mapped to this method in URI.", 
    "One of the things that we'll see about Rails is that it places a lot of value", 
    "on convention over configuration.", 
    "Meaning, if you agree to follow some conventions in how you name stuff, we", 
    "will make it very easy for you to avoid writing a lot of repetitive,", 
    "boring code.", 
    "And one of the places that we see this immediately is in the routing", 
    "subsystem, because we're going to name the entities in our application,", 
    "things like movies.", 
    "And Rails will automatically provide some built-in mappings from certain", 
    "kinds of URLs to CRUD actions that we can do on those things just based on", 
    "the name of the data type, the name of the table.", 
    "So for example, if I try to map the CRUD actions, C,R,U,and D, to a", 
    "variety of routes, these are automatically created when we tell", 
    "Rails that movies are a thing that our app manipulates.", 
    "There's a specific line that we're going to put in the routes file that", 
    "says movies are a thing that we have.", 
    "And that's really all we have to say.", 
    "We don't have to say: here is seven different things I would like to do", 
    "for movies.", 
    "Right?", 
    "Seven?", 
    "Yeah.", 
    "Seven different things I'd like to do for movies.", 
    "And here's what the URLs will look like.", 
    "It will automatically construct these mappings because this is very commonly", 
    "in Model-View-Controller, these are the things you have to be able to do.", 
    "So for example, I will, for free, get a mapping that says if I receive a GET", 
    "request and the URL is just slash movies with nothing else after that,", 
    "then it's going to look for an action called index, and an action, as we'll", 
    "see, is just a plain old Ruby method.", 
    "And I'm going to look for it in the controller that deals with movies.", 
    "Similarly, if I get a POST, and it's to this URL just /movies with nothing", 
    "after it, I'm going to call the CREATE action in the movies", 
    "controller and so on.", 
    "So, what Rails is doing is it's defining a handful of built-in actions", 
    "that are commonly used by most apps and that you don't have to", 
    "now define by hand.", 
    "As we'll see, you can also add other routes.", 
    "Most apps that are interesting will have other routes besides", 
    "the built-in ones.", 
    "But the bottom line is that what's going on here is, the method and the", 
    "URI come in, somebody's got to figure out what function to call in your", 
    "code, and that's what the routing subsystem does.", 
    "It also helps you in another way as well, which is in your pages that your", 
    "app generates, you're going to want things like click this link for more", 
    "information about that movie.", 
    "The routing subsystems other half will also generate the correct URLs given", 
    "the information about I want a link to the following entity.", 
    "The idea being that there's exactly one place where this information has", 
    "to be remembered, and it's in your routes.", 
    "As opposed to, if you decide to change it from movies to films, instead of", 
    "changing 25 places in the code where you are manually putting /films", 
    "/something into your views, all you've got to do is change it in one place.", 
    "And the route helpers are automatically updated.", 
    "So that's the very, very basic idea behind routing.", 
    "As a specific example, suppose that our app receives the following URL,", 
    "GET/movies/3/edit.", 
    "And remember we saw an HTTP request, they look just like this, the verb,", 
    "the URI, and the protocol version.", 
    "So this is exactly what the application server would receive.", 
    "The first thing is to see which route does this match?", 
    "Well, let's see.", 
    "The verb is GET, so it's got to be one of the routes that begins with GET.", 
    "And the URL matches this pattern of /movies, /some number, /edit, so it's", 
    "going to match this route.", 
    "And what that means is that I'm going to call the edit action in the movies", 
    "controller.", 
    "What else is going to happen?", 
    "Well, anywhere in the route that I have a colon like a symbol, in this", 
    "case ID, the routing system will automatically take care of parsing", 
    "those parameters out for me.", 
    "So it will produce something that looks very much like a hash called", 
    "params that my controller action can see.", 
    "And the keys in params are going to be anything that was able to be parsed", 
    "out of the URL that had a wild card in it.", 
    "The edit method will be called in movies_controller.", 
    "And later, if I want to include a URI in the generated view that would", 
    "submit the form back, I can call this built-in method, update_movie_path.", 
    "Where does this come from?", 
    "Well, I want to include a URI that will update a particular movie, the", 
    "movie with ID number 3.", 
    "Rails will construct this method for me, using meta-programming because", 
    "I've said movies are a thing that I have.", 
    "And CRUD is sort of one of the things built under Ruby's DNA, so no problem.", 
    "The update movie path will generate the URI that will eventually match the", 
    "update action.", 
    "And how did it construct this?", 
    "It did it pretty much the way you'd expect.", 
    "Update is the name of the CRUD action.", 
    "Movie is the name of our class, and path is a path.", 
    "So there's also edit movie path, there's create movie path, new movie", 
    "path, and so on.", 
    "All of these are generated automatically for you based on you", 
    "just saying movies are a thing that we manipulate.", 
    "They are a resource that we manipulate.", 
    "Pretty cool.", 
    "So what is this idea about REST, Representational State Transfer.", 
    "It's actually a really simple idea to explain.", 
    "All it means is that a request in HTTP form ought to be self-contained.", 
    "The request should specify what resource you're operating on and what", 
    "to do to it.", 
    "Now, you could go read Roy Fielding's Ph.D. thesis where he explains this in", 
    "great detail, or you can much more likely just kind of read this slide.", 
    "There's a lot of value in his dissertation.", 
    "But here is the high order bit.", 
    "If you could look at a request and based on the request identify what", 
    "it's going to do and which movie it's going to operate on and so forth, then", 
    "it's probably RESTful.", 
    "If your application uses URIs that are constructed that way, it's said that", 
    "your app is RESTful, it's a RESTful service.", 
    "And ideally, RESTful URIs name the operations.", 
    "The easiest way to understand this is maybe to show an anti-example.", 
    "Because when we show the example on the previous slide, it was sort of", 
    "obvious that of course it makes sense to do it this way.", 
    "I'm going to continue my tradition of showing you intimidating code not", 
    "because you're expected to parse and understand the whole thing but to give", 
    "you a sense of what some real-life code looks like.", 
    "So what's going on here?", 
    "Because Dave and I are so avaricious, we like to check how many people have", 
    "bought our Kindle book.", 
    "And Amazon's website makes it extremely hard to do this.", 
    "It's very tedious.", 
    "So I just wrote some Ruby code to do it along the same lines as the Clipper", 
    "card example from last week using mechanize again.", 
    "But what's the problem here is that even though there's a variety of", 
    "things that I can ask the Amazon.com site to do, they're all named by the", 
    "same URL, and they're just based on what this weird SessionToken is.", 
    "So this is absolutely anti-RESTful.", 
    "It would be nice if I could just say the book ID of our Kindle book is", 
    "whatever, some seven digit number Amazon gave us.", 
    "It would be nice if there was basically: show me some statistics", 
    "associated with that book ID and those were just their own methods, but", 
    "they're not.", 
    "I have to log in, and I have to establish some state in the session,", 
    "as a result of logging in, the implicit state in the session is what", 
    "controls what the URI does.", 
    "If you want to think about how not to write your app, here's a bad example", 
    "of how to write your app.", 
    "The URIs all look the same, but something about the session, tells the", 
    "app what to do next.", 
    "That's anti-RESTful because you can't look at just the URI and figure out", 
    "what is this going to try to do?", 
    "It's the URI plus the session that tells you what it's", 
    "going to try to do.", 
    "And that's just confusing.", 
    "Now that's not to say you can't build apps that way, you certainly can.", 
    "And for a long time, that's how apps were built.", 
    "In fact, I'm sure a lot of you have used different websites where once you", 
    "log in, the URI turns into some long garbage string.", 
    "And it stays that same long garbage string forever, even though you're", 
    "going through a sequence of pages.", 
    "And then you try hitting in the back button and the world explodes.", 
    "Those are non-RESTful applications.", 
    "The simple way to do it is the way that you would think, which is each", 
    "action is named by a URI.", 
    "And you should be able to look at the URI and say, ah, I know just what", 
    "that's going to do.", 
    "My code's on [PasteBin]", 
    "if you want to use it yourself.", 
    "I have removed the necessary password so you cannot check our book sales,", 
    "not that you'd care.", 
    "With that, let's ask about Rails RESTful routing and the resources to", 
    "which they refer.", 
    "OK, what's a resource?", 
    "A resource may be existing content, or it might be a request to change", 
    "something, to modify some content.", 
    "Another statement, a route, every route must eventually trigger some", 
    "controller action.", 
    "A common set of RESTful actions is the CRUD actions on models.", 
    "And the route always contains one or more parameters that identify the", 
    "resource that you want to operate on.", 
    "One of these statements is not true."
  ]
}