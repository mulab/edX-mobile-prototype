{
  "start": [
    1780, 
    4640, 
    14080, 
    15180, 
    17880, 
    18320, 
    21070, 
    25560, 
    26270, 
    29330, 
    32060, 
    35470, 
    36380, 
    38760, 
    42430, 
    46570, 
    49430, 
    51510, 
    55610, 
    57390, 
    58750, 
    62490, 
    64590, 
    68670, 
    70720, 
    77230, 
    78980, 
    82750, 
    86990, 
    90230, 
    91800, 
    95900, 
    99270, 
    103110, 
    105950, 
    110290, 
    113640, 
    117060, 
    119000, 
    122212, 
    123150, 
    127130, 
    130460, 
    133060, 
    134680, 
    138130, 
    141130, 
    142560, 
    145080, 
    146780, 
    149460, 
    150280, 
    153650, 
    157250, 
    161160, 
    162790, 
    166020, 
    168280, 
    171600, 
    175660, 
    178590, 
    182160, 
    186840, 
    187930, 
    189920, 
    191250, 
    195080, 
    196140, 
    199160, 
    200250, 
    202930, 
    207370, 
    210850, 
    213560, 
    214140, 
    217700, 
    219710, 
    222460, 
    225940, 
    229850, 
    232270, 
    237540, 
    240060, 
    241480, 
    246220, 
    251020, 
    252880, 
    254280, 
    257550, 
    260910, 
    266060, 
    268940, 
    273990, 
    277730, 
    281280, 
    283580, 
    288620, 
    290590, 
    291760, 
    297990, 
    302410, 
    305440, 
    310470, 
    317980, 
    319160, 
    323510, 
    326550, 
    329500, 
    334090, 
    343600, 
    347560, 
    349860, 
    353780, 
    355370, 
    358830, 
    361100, 
    366590, 
    369240, 
    370930, 
    373350, 
    378200, 
    384070, 
    387920, 
    391210, 
    393740, 
    395120, 
    398540, 
    399730, 
    405730, 
    410320, 
    411350, 
    413250, 
    417730, 
    421360, 
    426930, 
    428550, 
    433190, 
    436150, 
    436840, 
    440500, 
    442970, 
    443780, 
    447840, 
    451080, 
    454280, 
    457730, 
    459160, 
    462240, 
    464680, 
    467100, 
    468250, 
    476350, 
    479360, 
    490780, 
    495610, 
    500310, 
    501520, 
    506240, 
    509100, 
    513220, 
    514490, 
    518640, 
    520780, 
    529762, 
    531280, 
    535510, 
    536610, 
    541760, 
    544390, 
    545640, 
    551080, 
    561020, 
    567090, 
    569555, 
    570740, 
    571100, 
    581210, 
    583430, 
    585490, 
    590010, 
    593970, 
    598820, 
    603340, 
    609270, 
    612670, 
    615640, 
    617780, 
    620710, 
    621630, 
    626490, 
    628950, 
    629840, 
    632790, 
    635840, 
    640860, 
    643680, 
    645140, 
    648850, 
    651660, 
    654010, 
    655810, 
    659220, 
    666230, 
    670390, 
    673440, 
    674380, 
    678220, 
    680980, 
    682920, 
    687740, 
    690110, 
    691260, 
    695040, 
    698640
  ], 
  "end": [
    4640, 
    6195, 
    15180, 
    17880, 
    18320, 
    21070, 
    25560, 
    26270, 
    29330, 
    32060, 
    35470, 
    36380, 
    38760, 
    42430, 
    46570, 
    49430, 
    51510, 
    55610, 
    57390, 
    58750, 
    62490, 
    64590, 
    68670, 
    70720, 
    77230, 
    78980, 
    82750, 
    86990, 
    90230, 
    91800, 
    95900, 
    99270, 
    103110, 
    105950, 
    110290, 
    113640, 
    117060, 
    119000, 
    122212, 
    123150, 
    127130, 
    130460, 
    133060, 
    134680, 
    138130, 
    141130, 
    142560, 
    145080, 
    146780, 
    149460, 
    150280, 
    153650, 
    157250, 
    161160, 
    162790, 
    166020, 
    168280, 
    171600, 
    175660, 
    178590, 
    182160, 
    186840, 
    187930, 
    189920, 
    191250, 
    195080, 
    196140, 
    199160, 
    200250, 
    202930, 
    207370, 
    210850, 
    213560, 
    214140, 
    217700, 
    219710, 
    222460, 
    225940, 
    229850, 
    232270, 
    237540, 
    240060, 
    241480, 
    246220, 
    251020, 
    252880, 
    254280, 
    257550, 
    260910, 
    266060, 
    268940, 
    273990, 
    277730, 
    281280, 
    283580, 
    288620, 
    290590, 
    291760, 
    294250, 
    302410, 
    305440, 
    310470, 
    317980, 
    319160, 
    323510, 
    326550, 
    329500, 
    334090, 
    343600, 
    347560, 
    349860, 
    353780, 
    355370, 
    358830, 
    361100, 
    366590, 
    369240, 
    370930, 
    373350, 
    378200, 
    384070, 
    387920, 
    391210, 
    393740, 
    395120, 
    398540, 
    399730, 
    405730, 
    410320, 
    411350, 
    413250, 
    417730, 
    421360, 
    426930, 
    428550, 
    433190, 
    436150, 
    436840, 
    440500, 
    442970, 
    443780, 
    447840, 
    451080, 
    454280, 
    457730, 
    459160, 
    462240, 
    464680, 
    467100, 
    468250, 
    476350, 
    479360, 
    480880, 
    495610, 
    500310, 
    501520, 
    506240, 
    509100, 
    513220, 
    514490, 
    518640, 
    520780, 
    525685, 
    531280, 
    535510, 
    536610, 
    541760, 
    544390, 
    545640, 
    551080, 
    554075, 
    562270, 
    569555, 
    570740, 
    571100, 
    572350, 
    583430, 
    585490, 
    590010, 
    593970, 
    598820, 
    603340, 
    609270, 
    612670, 
    615640, 
    617780, 
    620710, 
    621630, 
    626490, 
    628950, 
    629840, 
    632790, 
    635840, 
    637260, 
    643680, 
    645140, 
    648850, 
    651660, 
    654010, 
    655810, 
    659220, 
    662225, 
    670390, 
    673440, 
    674380, 
    678220, 
    680980, 
    682920, 
    687740, 
    690110, 
    691260, 
    695040, 
    698640, 
    699980
  ], 
  "text": [
    "OK, try initial vote.", 
    "I see mucho blue.", 
    "Yeah, I'm going to shortcut it.", 
    "Because I see such an overwhelming abundance of blue, let's just go", 
    "through it.", 
    "Because blue is indeed the correct answer.", 
    "So what about A, a route consists of both a URI and an HTTP method?", 
    "Yes.", 
    "In fact, we've seen that there are different routes to different", 
    "controller actions where the URI part is the same.", 
    "The only different part is which HTTP verb or HTTP method is", 
    "associated with it.", 
    "So A is certainly true.", 
    "And then between B and C, pretty much only one of them could be true.", 
    "And what I said before is, I really encourage you to use those helpers", 
    "because if you change information about the mapping of names and routes,", 
    "the helpers will automatically do the right thing.", 
    "But having said that, you could perfectly well hard code strings,", 
    "string consonants, into your views.", 
    "I really don't want to see you doing that.", 
    "But may, must, must is a really harsh word.", 
    "So A and C are true.", 
    "And routes do not have to be generated by the URI helpers, I just think it's", 
    "a really good idea.", 
    "OK, let's talk about forms, the kind you fill out on websites.", 
    "Dealing with forms is pretty easy.", 
    "We've actually already seen a lot of the mechanisms that we need to do it.", 
    "In fact, the same mechanism that we saw that pulls things out of the URI,", 
    "that params hash, pretty much that's the same way we're going", 
    "to deal with forms.", 
    "Now the one thing to keep in mind is, again, let's get back to the mindset", 
    "of service-oriented architecture is a clean design.", 
    "But when we're going to have a human being and a web browser being the", 
    "thing we interact with, we have to compensate for some shortcomings.", 
    "One shortcoming of the human being and browser approach, compared to some", 
    "other piece of code is using me as software as a service approach, is", 
    "that when I want to say create a new movie for example, that's actually two", 
    "interactions.", 
    "Logically, creating a new movie is just one thing that you", 
    "would want to do.", 
    "But in the web browser world, you first got to serve the user a form", 
    "that shows them what stuff they can fill in and then you need a separate", 
    "action to take whatever they filled in and use that", 
    "information for something.", 
    "So you can see that, if in fact a movie creation was being triggered by", 
    "an outside service, you don't need to serve the outside service a", 
    "form to fill in.", 
    "As long as it knows which fields correspond to a movie, it could just", 
    "do a single call to create the movie.", 
    "So that's sort of the clean service-oriented architecture", 
    "way of doing it.", 
    "But we will make some accommodations for the human user.", 
    "So that means that creating a resource is going to take two interactions.", 
    "There's an action called \"new\" which just retrieves the blank form and", 
    "gives the user something to fill out.", 
    "And there's another action called \"create\" that handles the form", 
    "actually being submitted by the user.", 
    "So that means we have to be able to generate that form and display it.", 
    "We have to be able to get our hands on the values that the user filled in.", 
    "And we have to figure out what to render.", 
    "And we'll see in a moment why what to render is a little bit tricky.", 
    "But as a preview, if the action is \"show me details about a movie,\" well,", 
    "it's pretty clear what you render.", 
    "You render the details about the movie.", 
    "That's what the user asked for.", 
    "But if the action is \"create a new movie,\" what should the result of", 
    "rendering that be?", 
    "I mean you could show a page saying movie was created, but", 
    "how useful is that?", 
    "So we'll see how to do it a slightly cleaner way.", 
    "So here's our third Rails' recipe to create a new submittable form.", 
    "You identify the action that gets the form itself.", 
    "In other words, the action that serves the form to the user so they know what", 
    "to fill in.", 
    "You identify the action that receives the form submission with the stuff", 
    "that the user has filled in.", 
    "You make sure that you've got routes, actions, and views for each.", 
    "And, again, because this is such a common manipulation of a resource,", 
    "these basic actions are included in the route set that you get for free", 
    "with Rails.", 
    "In the form view, the HTML element's name attributes, which are applied to", 
    "the form fields, are the things that are going to appear", 
    "in the params array.", 
    "So when we create an HTML of let's say a text box element, and its name is", 
    "FUBAR, then we should expect that we'll find a params sub FUBAR that", 
    "will be whatever the user typed into that field.", 
    "So it's pretty straightforward.", 
    "It's just another use of params which you've already seen.", 
    "And there's helpers that are provided for many common types of elements, for", 
    "example, selecting from a pop up menu, a text box, radio buttons, the", 
    "standard things that you would find on a web form.", 
    "So let's look at first how would we create the form.", 
    "Let's take a look at what it looks like in just HTML, never mind our", 
    "templating language, Haml.", 
    "Here is the form for creating a new movie.", 
    "In fact, I'll go back to the movie list and create a new movie so you can", 
    "see what it actually looks like.", 
    "It's pretty simple.", 
    "This one just has title and rating and release date.", 
    "So here's what that form looks like in raw HTML.", 
    "Again, if you've done any sort of manual web programming or maybe taken", 
    "a web decal or something, you've seen sort of learning by osmosis that", 
    "there's a select menu with different options, and there's things like text", 
    "field for the title.", 
    "So the thing to focus on here is these, the name attributes.", 
    "Because this is what's going to determine what goes into the params'", 
    "array or the params' hash, I should say.", 
    "Now this might seem like a weird name to give an HTML element, but what", 
    "we'll see is that if we think of movie title, movie rating, movie release", 
    "date and so on, if we think of this as a hash whose name is \"movie,\" what", 
    "we'll see is that what we get in the params [ ]", 
    "is an element named movie whose value is this hash.", 
    "When I show you the code, it'll be obvious.", 
    "But it makes it very easy to unpack the values.", 
    "Now, what is it that we actually generate?", 
    "What is our more concise way to express that HTML form?", 
    "Well, to generate the form, we can just use the URI", 
    "helper for the action.", 
    "It's just the URI part of a route, we've done this before.", 
    "But the nicer part is, when we create the form in Haml, there's some helpers", 
    "provided by Rails to make the form elements a lot less verbose.", 
    "Here's the same thing, but the Haml that generates it.", 
    "So I start with a form tag for a movies_path.", 
    "And this will take a do block, which is everything that I want to have", 
    "included in that form.", 
    "I've included some comments here that's what the -#", 
    "is comments in Haml.", 
    "So that you can see how the elements in HTML map to the Haml counterparts.", 
    "Here's a label element that just prints out a label on the screen next", 
    "to the text box.", 
    "Here's a text_field for the movie.", 
    "And what's going on here with this :movie title?", 
    "Well, what's happening is that basically what I'm saying is I'm", 
    "creating a text field for a movie type object and for the title attribute of", 
    "that movie type object.", 
    "That will get converted into something that looks kind of like this.", 
    "And what we'll see in a moment is what this looks like when we get to the", 
    "controller method.", 
    "It's designed to make it easy to parse these values in the controller.", 
    "Here's an example of doing a select menu.", 
    "It's pretty easy.", 
    "I'm saying, here is a selection menu for a movie type object to pick a", 
    "value for the rating attribute, and here's a bunch of things that I can", 
    "have the user choose from and then the submission tag, which I'm going to", 
    "call \"save changes.\" That's the thing where if you click it, you'll actually", 
    "get the form submitted.", 
    "So let's see what the form actually looks like in terms of code.", 
    "In other words, when we submit the form, what happens?", 
    "Remember, I said I always start with the debugger running.", 
    "Now you know why.", 
    "I'm going to go to my controller, and I'm going to go to the \"create\" action", 
    "which is what receives the results of this form.", 
    "By the way, how do we know that that's the case?", 
    "This helper, movies_path, if you go back to that routes' table, by default", 
    "it'll generate the URL that corresponds to the route for creating", 
    "a new thing.", 
    "So that's why we know that in the controller, it's going to be the", 
    "\"create\" action that receives the call to movies.", 
    "So what's the first thing we do, is we unpack params : movie.", 
    "So what's the value of that?", 
    "Well, when in doubt, set a debug break point.", 
    "So I'm going to set a debug break point there.", 
    "I'm going to actually try to submit something.", 
    "OK, save changes.", 
    "And nothing's happening because debug break point.", 
    "You've got to love debuggers.", 
    "OK, so what is params?", 
    "Well, it's a bunch of stuff we don't quite have to worry about yet here.", 
    "But this is the interesting part.", 
    "One of the keys of params is an element whose value is itself a hash.", 
    "Let's see what the implications of that are, if we just assign something.", 
    "This should work, right?", 
    "Where would I be without GS--", 
    "No?", 
    "Well, never mind.", 
    "How about...", 
    "Sometimes the obvious things are the ones that kill you.", 
    "OK, so, what is M?", 
    "If you followed the discussion of active record, and you remember that", 
    "one way to create an object is to pass a hash of keys and values.", 
    "Look how convenient, M almost has the exact right structure.", 
    "It's got a key for title, it's got a key for rating, and so on.", 
    "So we could just pass this to movie.create or movie.new.", 
    "Now, this release date, one stuff, this looks a little weird.", 
    "And it's just compensating for the fact that in HTML, you have to display", 
    "separate menus for month, day, and year.", 
    "But what you're really trying to do is get a single date object out of all", 
    "three menus.", 
    "So, again, part of the Rails' framework is to provide helpers that", 
    "automatically convert these three separate menus to", 
    "a single date object.", 
    "That's what this (1i) businesses is.", 
    "But the bottom line is that if we hypothetically did", 
    "something like this.", 
    "We've actually got a move object that's already populated with what the", 
    "user typed.", 
    "So this way of doing things is designed to make it really quick to", 
    "get the information from the controller into the movie.", 
    "And you can see the only thing I'm going to do here is I'm going to save", 
    "it, make sure it wasn't nil.", 
    "And in a moment, we'll talk about what redirection implies.", 
    "OK, so, what's the moral of the story here?", 
    "The moral of the story is that if you use these form field helpers, again,", 
    "you could hard code everything like HTML field names", 
    "into all of your forms.", 
    "But if you use the helper methods, what you'll get is a set of forms that", 
    "are conveniently named so that when you extract them in the controller", 
    "method, it's like they're already pre-digested.", 
    "It's like the TV dinner version of getting parameters out of your form.", 
    "And when you look at the Rails' document, there's a whole bunch of", 
    "form field helpers.", 
    "I've just shown kind of the basic ones for text fields and for drop downs.", 
    "But there's helpers for radio buttons, check boxes, all of the standard HTML", 
    "form elements that you might want to use."
  ]
}