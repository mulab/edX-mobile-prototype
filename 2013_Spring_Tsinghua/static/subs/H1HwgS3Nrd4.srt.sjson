{
  "start": [
    2510, 
    4910, 
    7800, 
    11280, 
    14130, 
    17270, 
    18840, 
    21560, 
    24610, 
    26090, 
    29160, 
    32920, 
    36080, 
    40760, 
    41630, 
    46290, 
    50840, 
    51790, 
    54650, 
    57090, 
    59430, 
    61410, 
    62690, 
    66560, 
    69190, 
    69900, 
    71480, 
    73420, 
    76990, 
    79330, 
    80980, 
    85230, 
    86620, 
    89360, 
    90520, 
    91830, 
    95550, 
    97500, 
    100340, 
    102490, 
    108940, 
    113810, 
    116650, 
    120070, 
    122670, 
    127176, 
    132680, 
    135650, 
    137190, 
    139660, 
    142130, 
    147420, 
    149300, 
    150260, 
    153550, 
    154570, 
    154810, 
    157220, 
    160210, 
    161840, 
    164630, 
    169020, 
    171410, 
    173160, 
    176640, 
    179840, 
    180470, 
    181800, 
    184680, 
    187790, 
    189300, 
    192390, 
    193650, 
    197460, 
    199450, 
    202740, 
    204870, 
    206610, 
    209190, 
    211210, 
    212090, 
    214140, 
    215980, 
    218100, 
    222060, 
    224140, 
    228240, 
    231820, 
    236680, 
    241320, 
    243950, 
    245550, 
    251070, 
    251650, 
    252950, 
    253750, 
    255950, 
    258820, 
    260630, 
    264060, 
    266880, 
    271940, 
    273200, 
    274870, 
    277490, 
    278060, 
    280240, 
    284810, 
    286810, 
    290910, 
    294830, 
    296340, 
    299440, 
    299970, 
    303010, 
    304820, 
    307270, 
    313870, 
    315250, 
    317880, 
    319140, 
    320360, 
    322260, 
    326070, 
    329970, 
    332260, 
    334330, 
    338240, 
    339870, 
    340810, 
    342250, 
    343680, 
    345140, 
    347350, 
    349540, 
    351320, 
    356030, 
    356205, 
    363530, 
    365220, 
    367520, 
    369600, 
    372700
  ], 
  "end": [
    4910, 
    7800, 
    11280, 
    14130, 
    17270, 
    18840, 
    21560, 
    24610, 
    26090, 
    29160, 
    32920, 
    36080, 
    37935, 
    41630, 
    46290, 
    50840, 
    51790, 
    54650, 
    57090, 
    59430, 
    61410, 
    62690, 
    66560, 
    69190, 
    69900, 
    71480, 
    73420, 
    76990, 
    79330, 
    80980, 
    85230, 
    86620, 
    89360, 
    90520, 
    91830, 
    95550, 
    97500, 
    100340, 
    102490, 
    108940, 
    113810, 
    116650, 
    120070, 
    122670, 
    127176, 
    132680, 
    135650, 
    137190, 
    139660, 
    142130, 
    147420, 
    149300, 
    150260, 
    153550, 
    154570, 
    154810, 
    157220, 
    160210, 
    161840, 
    164630, 
    169020, 
    171410, 
    173160, 
    176640, 
    179840, 
    180470, 
    181800, 
    184680, 
    187790, 
    189300, 
    192390, 
    193650, 
    197460, 
    199450, 
    202740, 
    204870, 
    206610, 
    209190, 
    211210, 
    212090, 
    214140, 
    215980, 
    218100, 
    222060, 
    224140, 
    228240, 
    231820, 
    236680, 
    241320, 
    243950, 
    245550, 
    251070, 
    251650, 
    252950, 
    253750, 
    255950, 
    258820, 
    260630, 
    264060, 
    266880, 
    271940, 
    273200, 
    274870, 
    277490, 
    278060, 
    280240, 
    284810, 
    286810, 
    290910, 
    294830, 
    296340, 
    299440, 
    299970, 
    303010, 
    304820, 
    307270, 
    313870, 
    315250, 
    317880, 
    319140, 
    320360, 
    322260, 
    326070, 
    329970, 
    332260, 
    334330, 
    338240, 
    339870, 
    340810, 
    342250, 
    343680, 
    345140, 
    347350, 
    349540, 
    351320, 
    352570, 
    356205, 
    363530, 
    365220, 
    367520, 
    369600, 
    372700, 
    373950
  ], 
  "text": [
    "One last piece of Ruby-istic stuff--", 
    "And again, if I wanted you to write Java in Ruby, we'd be done.", 
    "But I want you to write Ruby that is beautiful in its own sake, just as", 
    "when you leave this class and go do other projects with other languages,", 
    "you want to use those languages in a way that is beautiful for what means", 
    "beauty in those languages.", 
    "So we're also going to teach you not just how to use the language legally,", 
    "but how to use it idiomatically, right? --How experienced people who", 
    "write Ruby use the language.", 
    "And a very common idiom you'll see is poetry mode, which", 
    "means in many cases--", 
    "well, let me back up a little bit.", 
    "Sorry, switching back and forth between these is very confusing.", 
    "Ruby hashes--", 
    "which became a lot like Python hashes, if you come from the Python world--", 
    "I'm defining a literal hash here by just giving a key and a value, a key", 
    "and a value.", 
    "Notice that the keys don't have to have the same type.", 
    "In this example, the first key, stupid, is a string.", 
    "But the second key, example, is a symbol.", 
    "I think Dave talked about the difference between strings and", 
    "symbols last time.", 
    "We can ask the hash if it has a key called stupid.", 
    "We can try to dereference a key that isn't in the hash.", 
    "And we'll get nil.", 
    "We won't get an exception.", 
    "Hashes are used everywhere in Ruby.", 
    "So that's why I wanted to put a very quick example in here.", 
    "We can delete keys from hash.", 
    "Now what's the poetry mode idiom?", 
    "The poetry mode idiom arises when you're using hashes as part of what", 
    "gets passed to a function.", 
    "And if you've ever seen a language in which you can pass key word-like", 
    "arguments--", 
    "these are less common than they used to be.", 
    "But list is probably the earliest example.", 
    "Let's show an example of a call here.", 
    "Here's a call to a method link to.", 
    "The first argument is a string edit.", 
    "And the second argument is a hash containing two key value pairs.", 
    "Poetry mode says if the last argument to the function is a hash, you can", 
    "leave out the braces that surround the hash.", 
    "And in almost all cases that aren't ambiguous to the parser, you can also", 
    "leave out the parentheses around the function call arguments.", 
    "So if we use poetry mode to rewrite the call, this is what we get.", 
    "In fact, in Ruby 1.9, an additional syntax was added, which is putting a", 
    "colon after the value instead of putting the hash", 
    "rocket after the value.", 
    "And this was actually put in pretty much to mimic Python.", 
    "It makes it look more like Python hashes look.", 
    "And in this case, be aware that the hash key is going to end up being the", 
    "symbol controller, not the string controller.", 
    "Remember they are different.", 
    "You can convert between symbols and strings easily, but they are not equal", 
    "to each other.", 
    "OK?", 
    "So you'll see both examples of the syntax.", 
    "For the most part, the syntax with the hash rocket is more common, just", 
    "because it's been around longer.", 
    "And I personally find it a little bit easier to read.", 
    "So when in doubt, parenthesize defensively.", 
    "Why do I say parenthesize defensively?", 
    "Because it's possible to write.", 
    "We'll see examples where by leaving out braces, you can accidentally", 
    "create a situation that either doesn't do what you want, or actually causes a", 
    "syntax error.", 
    "It can't be parsed.", 
    "So the rule is you can leave out parens around function calls, and you", 
    "can leave braces out of--", 
    "and the mic is off again--", 
    "But you can only do it if doing so doesn't cause a parsing error or", 
    "parsing ambiguity.", 
    "And because it's a pitfall, when in doubt, parenthesize defensively.", 
    "Parens are your friends.", 
    "Just to give you an example of poetry mode in action--", 
    "This is one of the features that people say well this is gratuitous.", 
    "Why do you care about this?", 
    "It can actually make code a lot more readable.", 
    "And when you think about it, at the end of the day, you're not writing", 
    "code for the computer.", 
    "If you were doing that, you'd be writing assembly language.", 
    "You're writing code for other programmers who are going to come", 
    "after you and have to clean up your mess.", 
    "So in deference to that observation, Ruby puts a lot of value on making the", 
    "code as readable as it can be.", 
    "Here's an example on poetry mode in action for doing this.", 
    "To give you an example of why you care about things like poetry mode, if I", 
    "start with this fully parenthesized, fully desugared expression, I have an", 
    "object A. And I have a method called should that I'm calling on the object", 
    "A. What's the argument to the method?", 
    "Well, let's see.", 
    "Here's another method call, as it turns out, B. And I'm sending it.", 
    "What is this?", 
    "Some kind of a weird smiley?", 
    "No.", 
    "This is the greater than or equal method.", 
    "But remember that when I pass a method call to send, I have to either quote", 
    "it or symbolize its name.", 
    "So this is the greater than or equal to method with the argument 7.", 
    "And if I start progressively desugaring this ...", 
    "Well, what this is really doing is calling the be method and I have", 
    "desugared the call to send.", 
    "So it's greater than or equal to 7.", 
    "And if I apply the poetry mode rule again, I can get rid of these", 
    "parentheses.", 
    "And I write: a should be greater than or equal to 7.", 
    "It's cool when you can just read code out loud and it says what it does.", 
    "That is the essence of beautiful code.", 
    "Here's a little bit similar example but from a real program.", 
    "Here's a rule that says, basically, unless the user is logged in, I want", 
    "to send them back to the login page.", 
    "And when we talk about rails, you'll understand exactly how the re-direct", 
    "method works.", 
    "But for now, take it on faith that's what it does.", 
    "Standard method call redirect two.", 
    "And here's the argument to the login page.", 
    "And [INAUDIBLE] operator like Boolean and return, unless the logged in", 
    "condition is true.", 
    "And by the way, poetry mode in action here, logged in", 
    "actually is a method call.", 
    "You can't tell from context.", 
    "It could well be a variable.", 
    "Just from looking at this one line, there's no obvious way to tell if", 
    "logged in is just a plain old variable or it's a method called with a", 
    "parentheses removed because it takes no arguments.", 
    "Usually you have to figure that out from context.", 
    "But again, if we desugar it, redirect to login page and return", 
    "unless logged in.", 
    "Come on.", 
    "I mean, that should just make you weep.", 
    "OK, that's beautiful code.", 
    "That's what you're striving for.", 
    "You're striving for code that is so transparent that you", 
    "don't even need comments.", 
    "That's a subject of controversy which we'll come back to", 
    "later in the course.", 
    "OK.", 
    "So having said all of those things, which of these four is not a legal", 
    "call to the foo method?", 
    "And notice that I've defined the foo method up here", 
    "to take three arguments.", 
    "And I'm giving you a clue that the second and third arguments I'm", 
    "expecting to be hashes."
  ]
}