{
  "start": [
    2060, 
    2210, 
    5960, 
    8109, 
    11090, 
    14000, 
    17600, 
    18250, 
    21460, 
    24380, 
    27490, 
    30570, 
    32420, 
    33145, 
    35350, 
    38820, 
    42040, 
    45160, 
    46510, 
    49100, 
    51860, 
    54920, 
    59760, 
    63320, 
    67410, 
    68700, 
    71230, 
    71450, 
    72790, 
    76040, 
    78430, 
    81750, 
    85010, 
    87520, 
    91200, 
    91690, 
    93200, 
    95910, 
    99490, 
    103070, 
    106330, 
    108070, 
    109200, 
    110760, 
    113040, 
    116130, 
    118420, 
    120610, 
    124780, 
    128460, 
    132220, 
    135620, 
    137700, 
    141530, 
    144050, 
    147540, 
    148720, 
    154150, 
    155260, 
    155500, 
    157090, 
    159130, 
    161000, 
    165150, 
    167680, 
    169220, 
    172200, 
    177170, 
    179120, 
    182240, 
    185190, 
    186330, 
    188090, 
    190450, 
    194130, 
    196040, 
    199030, 
    202130, 
    204890, 
    205880, 
    207440, 
    209970, 
    213630, 
    216600, 
    217910, 
    220900, 
    224170, 
    225620, 
    228990, 
    232200, 
    234360, 
    237140, 
    238010, 
    241120, 
    243680, 
    245060, 
    249010, 
    251750, 
    254680, 
    258130, 
    261450, 
    263020, 
    265150, 
    267600, 
    270380, 
    273340, 
    276030, 
    278830, 
    280740, 
    282610, 
    287160, 
    287860, 
    291610, 
    293550, 
    295870, 
    298240, 
    300550, 
    303580, 
    306710, 
    309200, 
    313120, 
    316880, 
    321120, 
    323900, 
    326620, 
    328820, 
    331440, 
    334850, 
    337390, 
    340840, 
    343440, 
    346760, 
    348990, 
    352290, 
    354950, 
    356550, 
    359470, 
    360660, 
    363580, 
    366080, 
    368380, 
    370600, 
    374920, 
    377290, 
    378840, 
    380790, 
    385510, 
    390020, 
    392420, 
    395110, 
    398910, 
    400610, 
    403610, 
    406240, 
    409560, 
    410840, 
    415060, 
    416570, 
    418710, 
    421980, 
    425670, 
    429430, 
    433220, 
    435880, 
    438500, 
    441040, 
    443450, 
    444680, 
    447210, 
    449510, 
    454240, 
    458900, 
    462670, 
    466030, 
    467330, 
    471580, 
    474070, 
    480040, 
    484160, 
    486270, 
    489780, 
    491740, 
    495980, 
    498160, 
    500010, 
    503700, 
    504860, 
    507550, 
    508770, 
    512820, 
    517860, 
    519320, 
    521120, 
    522870, 
    529550, 
    531990, 
    535640, 
    537030, 
    540140, 
    542290, 
    545850, 
    549520, 
    551870, 
    555160, 
    558630, 
    560020, 
    563500, 
    567920, 
    571900, 
    574880, 
    577810, 
    580200, 
    584050, 
    587760, 
    591520, 
    594440, 
    596880, 
    600490, 
    603450, 
    607690, 
    609870, 
    612370, 
    615240, 
    618370, 
    621710, 
    623560, 
    626570, 
    628490, 
    632710, 
    635480, 
    638540, 
    639400, 
    642080, 
    645330, 
    647370, 
    648500, 
    651380, 
    654300, 
    656070, 
    659490, 
    664870, 
    667110, 
    670060, 
    673810, 
    677550, 
    679800, 
    683900, 
    688100, 
    689560, 
    692390, 
    694510, 
    697880, 
    700580, 
    703600, 
    706110
  ], 
  "end": [
    2210, 
    5960, 
    8109, 
    11090, 
    14000, 
    17600, 
    18250, 
    21460, 
    24380, 
    27490, 
    28740, 
    32420, 
    33145, 
    35350, 
    38820, 
    42040, 
    45160, 
    46510, 
    49100, 
    51860, 
    54920, 
    59760, 
    63320, 
    64570, 
    68700, 
    71230, 
    71450, 
    72790, 
    76040, 
    78430, 
    81750, 
    85010, 
    87520, 
    91200, 
    91690, 
    93200, 
    95910, 
    99490, 
    103070, 
    106330, 
    108070, 
    109200, 
    110760, 
    113040, 
    116130, 
    118420, 
    120610, 
    124780, 
    128460, 
    132220, 
    135620, 
    137700, 
    141530, 
    144050, 
    147540, 
    148720, 
    151240, 
    155260, 
    155500, 
    157090, 
    159130, 
    161000, 
    165150, 
    167680, 
    169220, 
    172200, 
    177170, 
    179120, 
    182240, 
    185190, 
    186330, 
    188090, 
    190450, 
    194130, 
    196040, 
    199030, 
    202130, 
    204890, 
    205880, 
    207440, 
    209970, 
    213630, 
    216600, 
    217910, 
    220900, 
    224170, 
    225620, 
    228990, 
    232200, 
    234360, 
    237140, 
    238010, 
    241120, 
    243680, 
    245060, 
    249010, 
    251750, 
    254680, 
    258130, 
    261450, 
    263020, 
    265150, 
    267600, 
    270380, 
    273340, 
    276030, 
    278830, 
    280740, 
    282610, 
    287160, 
    287860, 
    291610, 
    293550, 
    295870, 
    298240, 
    300550, 
    303580, 
    306710, 
    309200, 
    313120, 
    316880, 
    321120, 
    323900, 
    326620, 
    328820, 
    331440, 
    334850, 
    337390, 
    340840, 
    343440, 
    346760, 
    348990, 
    352290, 
    354950, 
    356550, 
    359470, 
    360660, 
    363580, 
    366080, 
    368380, 
    370600, 
    374920, 
    377290, 
    378840, 
    380790, 
    385510, 
    390020, 
    392420, 
    395110, 
    398910, 
    400610, 
    403610, 
    406240, 
    409560, 
    410840, 
    415060, 
    416570, 
    418710, 
    421980, 
    425670, 
    429430, 
    433220, 
    435880, 
    438500, 
    441040, 
    443450, 
    444680, 
    447210, 
    449510, 
    450905, 
    458900, 
    462670, 
    466030, 
    467330, 
    471580, 
    474070, 
    480040, 
    484160, 
    486270, 
    489780, 
    491740, 
    495980, 
    498160, 
    500010, 
    503700, 
    504860, 
    507550, 
    508770, 
    512820, 
    517860, 
    519320, 
    521120, 
    522870, 
    529550, 
    531990, 
    535640, 
    537030, 
    540140, 
    542290, 
    545850, 
    549520, 
    551870, 
    555160, 
    558630, 
    560020, 
    563500, 
    567920, 
    571900, 
    574880, 
    577810, 
    580200, 
    584050, 
    587760, 
    591520, 
    594440, 
    596880, 
    600490, 
    603450, 
    607690, 
    609870, 
    612370, 
    615240, 
    618370, 
    621710, 
    623560, 
    626570, 
    628490, 
    632710, 
    635480, 
    638540, 
    639400, 
    642080, 
    645330, 
    647370, 
    648500, 
    651380, 
    654300, 
    656070, 
    659490, 
    664870, 
    667110, 
    670060, 
    673810, 
    677550, 
    679800, 
    683900, 
    688100, 
    689560, 
    692390, 
    694510, 
    697880, 
    700580, 
    703600, 
    706110, 
    709570
  ], 
  "text": [
    "ARMANDO FOX: OK.", 
    "Well, let's go through these one by one.", 
    "Let's rule out the easy ones first.", 
    "I think immediately before the slide I had a thing with a big box around it", 
    "that said: this is not the only way to structure a web app.", 
    "So we can safely assume that this statement is true.", 
    "How about this one?", 
    "In SaaS apps on the web controller actions and view contents are", 
    "transmitted using HTTP.", 
    "If you believe that this statement is false, I would ask you, how else would", 
    "they be transmitted?", 
    "So in fact, this is true.", 
    "Right?", 
    "The controller actions--", 
    "the only way to tell a controller to do something is by sending it a URI,", 
    "or URL, and the protocol over which we do that is HTTP.", 
    "If it's on the web, it's going to happen over HTTP, is a good take home", 
    "message from that.", 
    "And certainly the view contents, the stuff that gets sent back to the", 
    "browser, has to be transmitted over HTTP as well.", 
    "So this statement is true.", 
    "How about all Model-View-Controller apps have both a \"client\" part, such", 
    "as the web browser, and a \"cloud\" part?", 
    "This one's controversial.", 
    "Raise your hand, or hold up your green card if you think green", 
    "is the false statement.", 
    "OK.", 
    "Congratulations to all of you.", 
    "I would give you all something from the schwag bag but it's not that big.", 
    "So this statement is false, right?", 
    "It is certainly the case that most apps that are web apps that have a", 
    "client part can be structured as Model-View-Controller, but you can run", 
    "a Model-View-Controller app right on your own computer.", 
    "Model-View-Controller says nothing about where the individual pieces go", 
    "physically.", 
    "It doesn't say where they're deployed.", 
    "All talks about is the logical organization of the app.", 
    "So if your app is organized in a way that there is a part of the app that", 
    "interacts with the user, there's a part of the app that manipulates data,", 
    "and there's a part of the app that mediates between those two things,", 
    "you've got a Model-View-Controller app.", 
    "And it doesn't matter where it's running.", 
    "It could be running 100% in the browser.", 
    "It could be running 100% in the cloud.", 
    "It could be not a web application at all.", 
    "So this was the one, green was the one that was not true.", 
    "And the last one, peer-to-peer applications--", 
    "again, we said the client-server is the way that web apps work because of", 
    "the HTTP protocol being request-reply.", 
    "Other protocols such as those used by Gnutella and other file sharing apps", 
    "are different and there's no reason that those apps can't be", 
    "structured as MVC.", 
    "It just says nothing about whether the overall architecture of the app is", 
    "client-server, in which there are specialized things doing different", 
    "roles, or peer-to-peer, in which everybody can probably do a little bit", 
    "of each thing.", 
    "So this is a subtle question and I'm glad that there was some disagreement.", 
    "All right.", 
    "Good.", 
    "We're going to continue our whirlwind tour.", 
    "I think we're doing really well here.", 
    "Models, databases, and active records.", 
    "So we're going to jump right into the model part of Model-View-Controller,", 
    "which means we can now take yet another dive.", 
    "Look how much we've done already.", 
    "We started up here, the client-server view of the world.", 
    "We broke down the server application into these three tiers, recognizing", 
    "that most of the action-- the code we write--", 
    "is going to go into the application-server tier and that it's", 
    "going to keep interesting data that has to be stored permanently in the", 
    "persistence tier.", 
    "And now we're going to dive deeper.", 
    "Since we've said that the apps we're going to be writing are structured as", 
    "Model-View-Controller, let's take a look at the first element in that", 
    "trilogy, which is the model.", 
    "And remember that models are about both data and the things that you do", 
    "with it, which means that they're going to encompass both code that goes", 
    "into the application tier and stuff that is being stored in the", 
    "persistence tier.", 
    "So how do we store the stuff?", 
    "What's the API that makes the stuff available to our code?", 
    "Those are the kind of things that are the purview of models.", 
    "So starting with this issue of we have In-Memory objects and we have", 
    "In-Storage objects.", 
    "When you write code and you instantiate a new object, an instance", 
    "of some class, there's an In-Memory representation which is some data", 
    "structure with a bunch of stuff.", 
    "And if your goal is to persist, or keep a copy of that object around for", 
    "the future, you need to somehow translate between the In-Memory", 
    "representation and how it's going to be stored.", 
    "The simplest thing you could possibly think of-- which is kind of how people", 
    "used to do it--", 
    "is you would just somehow convert the object into a string representation,", 
    "like a textual representation, and just write it out as a", 
    "line in a text file.", 
    "It's kind of brain dead, but if you have a really simple small app it's", 
    "not ridiculous to try to do that.", 
    "But fortunately, things become a much longer way since then.", 
    "We don't have to do that anymore.", 
    "Regardless, the main question is, we have to somehow convert the thing in", 
    "In-Memory to a thing we can store.", 
    "Some people call that marshalling or serializing.", 
    "It's where the Java term \"serialize\" comes from.", 
    "And when we read it back in the future, we've got to converted it back", 
    "from whatever that representation is into something that our programming", 
    "language can understand and use.", 
    "So, there's three things we have to worry about.", 
    "One of them is this idea of representation.", 
    "How do you convert back and forth?", 
    "The second is the four basic operations that you have to be able to", 
    "do on an object.", 
    "You've got to be able to create new objects, read them, update them-- so", 
    "ideally change their values in place--", 
    "and probably eventually delete them.", 
    "Unless, of course, you're evil and you never delete anything.", 
    "But nobody does that.", 
    "So we're going to use a framework called ActiveRecord.", 
    "Which as it turns out, just like Model-View-Controller is a structural", 
    "pattern, ActiveRecord is actually a design pattern.", 
    "It is a way of generically solving a collection of problems related to", 
    "these two challenges, that while not appropriate in every situation, turns", 
    "out to be a very nice match in some situations, including ours in which", 
    "we're going to use relational databases to store the stuff.", 
    "So for the next few slides, will see kind of the basics of what the", 
    "ActiveRecord design pattern means.", 
    "Just like with Model-View-Controller, we'll also show you other ways to", 
    "organize it that aren't ActiveRecord, so that you have a sense of when might", 
    "you do things a different way and why.", 
    "And then we'll be in a good position to start talking about Rails and how", 
    "it specifically implements the ActiveRecord pattern and hands it to", 
    "you, the programmer.", 
    "OK, so let's cut to the chase.", 
    "In Rails, models store their data in a relational database.", 
    "You don't have to know a whole lot about relational databases for the", 
    "stuff that we're going to be doing.", 
    "Although there is more detail both in the book chapter in", 
    "the suggested readings.", 
    "If you've taken a database course or even done some PHP programming, you've", 
    "probably already seen some of this.", 
    "But the basic idea is very simple.", 
    "A database consists of a set of tables.", 
    "A table is a collection of objects that have identical structure.", 
    "So the collection of all the objects, the structure that they", 
    "have, all the tables--", 
    "that's collectively called the schema.", 
    "And each row in a given table is one instance of that type of thing.", 
    "So, going back to our example with Rotten Potatoes, here is a potential", 
    "table for representing movies.", 
    "Each movie has a unique primary key.", 
    "This is an identifier that is guaranteed to be unique for that type", 
    "of thing within the application.", 
    "We might also imagine movies having a rating, a title, a release", 
    "date, and so on.", 
    "And the important thing is that all movies are going to", 
    "have the same structure.", 
    "Now, we can define whether the specific fields are required or", 
    "optional, things like that.", 
    "But this is what a movie is.", 
    "If you decide that movies need to also have, you know, the name of the", 
    "director, then you have to have a separate place to put that and every", 
    "single movie in the table is going to have to have that value.", 
    "Now, as we'll see, there's common cases where you don't necessarily need", 
    "for every instance to have all the same attributes.", 
    "There's ways that we can take different tables representing", 
    "different instances and establish relationships between them.", 
    "But this is the sort of zero authoritative version.", 
    "There's a bunch of tables.", 
    "Each table is one kind of thing.", 
    "And all instances of that thing have the same structure.", 
    "They have the same attributes.", 
    "Collectively, all the tables together and their structure and what the types", 
    "of the attributes are-- for example, the idea is an integer, the rating", 
    "appears to be one of a specific set of allowed values, the title is an", 
    "arbitrary string--", 
    "that entire definition of your data structures is called the schema.", 
    "So, why might you do things differently?", 
    "Well, one of the things we said is that one of the features of the", 
    "ActiveRecord design pattern is that every type of model knows how to do", 
    "the basic CRUD operations on the database.", 
    "Remember that the idea of the pattern is to capture common functionality", 
    "that you want to be able to reuse.", 
    "And because all elements that are persistent have to know how to create,", 
    "read, update, and delete themselves, that's the thing that", 
    "ActiveRecord captures.", 
    "So, schematically we might say, if you're organizing an app according to", 
    "ActiveRecord--", 
    "there's, let's say, moviegoers and there's movies--", 
    "here's your database.", 
    "And each type of model, the moviegoer model and the movie model, has built", 
    "in knowledge of how to create, read, update, and delete copies of a movie,", 
    "instances of itself.", 
    "What would be a different organization?", 
    "Well, here's the DataMapper organization.", 
    "DataMapper says, there's my models, like moviegoers and movies, but they", 
    "don't actually know how to talk to the database directly.", 
    "Instead, each one of them has sort of a helper.", 
    "And we can call it the mapper.", 
    "So the moviegoer has a moviegoer mapper.", 
    "The movie has a movie mapper.", 
    "And the job of the mapper is to figure out how to translate the", 
    "representation of movies between what you could store in the storage system", 
    "and what your programming language expects.", 
    "Now, in this simple example, it doesn't look like it's that complex.", 
    "But a reason to organize them separately is that--", 
    "you can imagine, right?--", 
    "notice that here I specifically put \"relational database.\" And here I just", 
    "put \"storage.\" The idea behind DataMapper is, if I want to use a kind", 
    "of stores it isn't a relational database, that's fine, as long as my", 
    "mapper classes know how to communicate properly with it.", 
    "And if you use something like Google AppEngine, at the end of the day, what", 
    "you're really using, is you're using something like DataMapper.", 
    "You can't write ActiveRecord based applications on top of DataMapper", 
    "because the storage system used by DataMapper doesn't provide enough", 
    "functionality to do the ActiveRecord CRUD built into each model.", 
    "This is going to become much clearer when we talk about associations, which", 
    "is how you can set up relationships between tables--", 
    "like the relationship between a movie and a review for that movie, or", 
    "between a review in the movie goer that wrote that review.", 
    "As it turns out, there are built-in functionalities in relational", 
    "databases that let us set those up.", 
    "If you're familiar with databases, this is what foreign keys do.", 
    "If not, don't worry about it because we're going to cover it.", 
    "And the ActiveRecord design pattern takes advantage of that built-in", 
    "functionality in relational databases to make it really, really easy to", 
    "manipulate these things in your code.", 
    "But because the DataMapper design pattern makes no assumptions about the", 
    "database, it can't take advantage of them.", 
    "So there are some situations in which creating an association between things", 
    "turns out to be trivial in a relational database, and therefore", 
    "with ActiveRecord, but requires a lot more work if you're going to use", 
    "DataMapper.", 
    "So given that, why would you ever use DataMapper?", 
    "Because as we'll see, those very features in relational databases are", 
    "also the things that start getting in the way when you get to", 
    "really large scale.", 
    "And you have to decide at some point to leave that functionality on the", 
    "table to get better scalability and then you're over here.", 
    "This is a little peek into the future.", 
    "When we talk about associations, we'll come back to this topic.", 
    "But again, the important thing here is to realize that we're going to present", 
    "a way of doing things, the way that we're going to do it.", 
    "But also whenever it's appropriate to talk about what are some other ways", 
    "that you might have done it, and why are we doing it the way that we are.", 
    "So let's say something about Model-View-Controller in terms of the", 
    "model and what we just discussed.", 
    "Which statement is not true regarding the Model in Model-View-Controller?", 
    "That the CRUD actions only apply to models backed by databases supporting", 
    "ActiveRecord?", 
    "That the Model's job includes converting between the In-Memory and", 
    "the stored representation of something?", 
    "That Model data, although it's displayed by the View, the direct", 
    "interaction is by the controller?", 
    "And that although DataMapper doesn't use relational databases, it's a", 
    "reasonable way to implement a Model, just a different one?", 
    "So which is not true?"
  ]
}