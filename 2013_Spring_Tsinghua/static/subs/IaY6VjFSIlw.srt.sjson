{
  "start": [
    2712, 
    6830, 
    9400, 
    12910, 
    14340, 
    18270, 
    19400, 
    20860, 
    23770, 
    26190, 
    30810, 
    32729, 
    34890, 
    37370, 
    41340, 
    41830, 
    43490, 
    46250, 
    47620, 
    50510, 
    54310, 
    57370, 
    60250, 
    61540, 
    67240, 
    72950, 
    73920, 
    75505, 
    77170, 
    78370, 
    79120, 
    83130, 
    89060, 
    92600, 
    94170, 
    98300, 
    99680, 
    100490, 
    105900, 
    106560, 
    107450, 
    108130, 
    108690, 
    110280, 
    111960, 
    115900, 
    117440, 
    120470, 
    121190, 
    122200, 
    123230, 
    128750, 
    131300, 
    134830, 
    138010, 
    141350, 
    142400, 
    146690, 
    150420, 
    152140, 
    153910, 
    155330, 
    157150, 
    161590, 
    166375, 
    169380, 
    172670, 
    176940, 
    181670, 
    187730, 
    190460, 
    194750, 
    198580, 
    203470, 
    205060, 
    207520, 
    209870, 
    214280, 
    218270, 
    221210, 
    223080, 
    225530, 
    226720, 
    230810, 
    233410, 
    235750, 
    238790, 
    239810, 
    241690, 
    244470, 
    245510, 
    247340, 
    248390, 
    251380, 
    254180, 
    255000, 
    256769, 
    257785, 
    259060, 
    260959, 
    264530, 
    265850, 
    266520, 
    268900, 
    269510, 
    271870, 
    274800, 
    276640, 
    279230, 
    285070, 
    287320, 
    290270, 
    291000, 
    297680, 
    299970, 
    304190, 
    308910, 
    313220, 
    314420, 
    315770, 
    316680, 
    319400, 
    321960, 
    325350, 
    325860, 
    327750, 
    331600, 
    332430, 
    333540, 
    335560, 
    338010, 
    338980, 
    340510, 
    341800, 
    350730, 
    351370, 
    353140, 
    354160, 
    357660, 
    358580, 
    359120, 
    363880, 
    365280, 
    366900, 
    371920, 
    374651, 
    376990, 
    378310, 
    380860, 
    384280, 
    384747, 
    388390, 
    393864, 
    395440, 
    399460, 
    401050
  ], 
  "end": [
    6830, 
    9400, 
    12910, 
    14340, 
    18270, 
    19400, 
    20860, 
    23770, 
    26190, 
    27905, 
    32729, 
    34890, 
    37370, 
    41340, 
    41830, 
    43490, 
    46250, 
    47620, 
    50510, 
    54310, 
    57370, 
    60250, 
    61540, 
    67240, 
    72950, 
    73920, 
    75505, 
    77170, 
    78370, 
    79120, 
    83130, 
    89060, 
    92600, 
    94170, 
    98300, 
    99680, 
    100490, 
    105900, 
    106560, 
    107450, 
    108130, 
    108690, 
    110280, 
    111960, 
    115900, 
    117440, 
    120470, 
    121190, 
    122200, 
    123230, 
    126210, 
    131300, 
    132550, 
    138010, 
    141350, 
    142400, 
    146690, 
    150420, 
    152140, 
    153910, 
    155330, 
    157150, 
    161590, 
    166375, 
    169380, 
    172670, 
    173920, 
    181670, 
    187730, 
    190460, 
    194750, 
    198580, 
    203470, 
    205060, 
    207520, 
    209870, 
    214280, 
    218270, 
    221210, 
    223080, 
    225530, 
    226720, 
    230810, 
    233410, 
    235750, 
    238790, 
    239810, 
    241690, 
    244470, 
    245510, 
    247340, 
    248390, 
    251380, 
    254180, 
    255000, 
    256769, 
    257785, 
    259060, 
    260959, 
    264530, 
    265850, 
    266520, 
    268900, 
    269510, 
    271870, 
    274800, 
    276640, 
    279230, 
    285070, 
    287320, 
    290270, 
    291000, 
    297680, 
    299970, 
    304190, 
    308910, 
    313220, 
    314420, 
    315770, 
    316680, 
    319400, 
    321960, 
    325350, 
    325860, 
    327750, 
    331600, 
    332430, 
    333540, 
    335560, 
    338010, 
    338980, 
    340510, 
    341800, 
    350730, 
    351370, 
    353140, 
    354160, 
    357660, 
    358580, 
    359120, 
    363880, 
    365280, 
    366900, 
    371920, 
    374651, 
    376990, 
    378310, 
    380860, 
    384280, 
    384747, 
    388390, 
    389680, 
    395440, 
    396690, 
    401050, 
    403320
  ], 
  "text": [
    "SPEAKER 1: Strings, regexes, reg expressions, if you want", 
    "to get some practice on regular expressions, if you", 
    "need some practice on regular expressions, try rubular.com.", 
    "It's lots of things.", 
    "Most modern languages today have regexes or regular", 
    "expressions.", 
    "How do you specify strings?", 
    "Here's four different ways to specify strings, double", 
    "quoting them, single quoting them, and then", 
    "with this %q approach.", 
    "These two are the same.", 
    "And these two are the same.", 
    "What's the difference between a single and double quote?", 
    "You can stick an expression to be evaluated in a double quote", 
    "here, right?", 
    "So this would be evaluated.", 
    "What the value of a + 1 would be stuck into that string.", 
    "So you'd see 42.", 
    "The answer is 42 would come out of this.", 
    "If it's just the single quoted ones, it will not treat what's", 
    "inside there as an expression, no matter what you write.", 
    "And then one of the reasons you have regexes is to be able", 
    "to match strings.", 
    "So this operator, equal tilde, is an operator you've seen in", 
    "other languages like Python, it has that same string", 
    "matching ability.", 
    "SPEAKER 2: [INAUDIBLE].", 
    "SPEAKER 1: It's Perl, OK.", 
    "This comes from Perl, not Python.", 
    "Thanks.", 
    "So we would get a match for the email address there.", 
    "If it's a email address for an educational institution, it's", 
    "any number of characters followed by an @ sign and any", 
    "number of characters.", 
    "There has to be this period that follows and then edu.", 
    "But this is uppercase.", 
    "This is lowercase.", 
    "This /i, I think of it meaning ignore, but actually, it means", 
    "something else.", 
    "SPEAKER 2: [INAUDIBLE].", 
    "SPEAKER 1: Insensitive.", 
    "Right.", 
    "It's i for insensitive.", 
    "I keep thinking of it, ignore the case.", 
    "But it's insensitive to the case, so that would match.", 
    "And you can have it on either side, right?", 
    "You don't have to have it just the string on the left and the", 
    "expression on the right.", 
    "You can have it the other way around.", 
    "That works fine.", 
    "And you would get the match either way.", 
    "If there's no match, the value is false.", 
    "What happens if it matches?", 
    "So the instant value is not false, that is it's not nil or", 
    "the value false, then you can capture anything in", 
    "parentheses.", 
    "So the $1 through n will capture all the things in", 
    "parentheses on the other side.", 
    "You see there's two parentheses here.", 
    "You can see it over here as well.", 
    "So that's 1, and that's 2.", 
    "So what's it going to capture?", 
    "The $1 will capture the string \"fox.\" And the $2 will capture", 
    "the string \"berkeley.\" So that's one of the powers of", 
    "regexp expression in programming is not only can", 
    "you see if it's matching, you can get the parsing done for", 
    "you as part of the match.", 
    "And then, this slide is just saying that you can specify it", 
    "either with slashes or with curly brackets to", 
    "be able to do that.", 
    "All right, now one of the things that's in the books and", 
    "will start being in more of these examples is, to make it", 
    "easier to follow and for you to do this, instead of see and", 
    "forget-- oh, no--", 
    "hear and forget, see and remember, do and understand.", 
    "To get you into do and understand is all the examples", 
    "in the book and many examples in the slides will have the", 
    "pastebin for it, because you could try it.", 
    "And on pastebin, this is like the pretty printed formatted", 
    "one, would have fonts and things like that.", 
    "What's below on this screen is just plain text, so you can", 
    "copy and paste.", 
    "So what's nice about Ruby, it was embraced very early like", 
    "in the Apple operating system, for those of you have Apple.", 
    "And so Ruby on Rails was there all along.", 
    "So if you open a terminal window and you type IRB,", 
    "you'll get the Ruby Interpreter.", 
    "That's all it takes, if you have a Mac.", 
    "And it's pretty easy to install a Ruby Interpreter on", 
    "any computer.", 
    "And then you can just copy and paste these things", 
    "and try them out.", 
    "Like I say, in 61C, one of the nice things about computer", 
    "science, you can just try things to see how it works.", 
    "Nothing bad happens.", 
    "If we were in nuclear engineering, you don't get to", 
    "try things, right?", 
    "[LAUGHTER]", 
    "And now I wonder what happens when you put these two things", 
    "together, big explosions in Etcheverry Hall, right?", 
    "So they don't get to try things.", 
    "We can try things.", 
    "And Ruby Interpreter makes it very easy, when", 
    "you read that chapter.", 
    "I just throw things in, when it starts talking about what's", 
    "the class and superclass, just to get the hang of it.", 
    "OK, so let's see.", 
    "What was the point here?", 
    "So I think this is the output from [? ARSPEC. ?]", 
    "And the reason we put this here is just to give you an", 
    "example what the regular expressions are going to look", 
    "like in this code.", 
    "And you can see the top line of what that regex is, is all", 
    "of those pieces are put together there.", 
    "That's typically what it would look like.", 
    "And then the dollar sign, see at the bottom there, at the", 
    "fourth line, it's taking the arguments from the parsing and", 
    "parentheses.", 
    "And it says 2i there.", 
    "That's the method call.", 
    "It's converting what was there to an integer.", 
    "So it's going to take the first, second and fourth", 
    "argument, convert it to an integer, assign them to these", 
    "three things.", 
    "But this is actually from the grading program.", 
    "And so it's how many exercises did you try?", 
    "That's totaled.", 
    "How many did you fail?", 
    "And how many are left to do?", 
    "And then passed is simply the difference.", 
    "You subtract the pending.", 
    "You subtract the failed from the total.", 
    "That's how many passed.", 
    "And then the output is you couldn't pass it.", 
    "I see.", 
    "If it is match your regular expression--", 
    "that's the if statement--", 
    "if it matches our regular expression we find above, then", 
    "it's not nil.", 
    "Then you do that.", 
    "Otherwise, you won't get any matches on the", 
    "parenthesized forces.", 
    "And then you put the output message.", 
    "But anyways, that's how you'd use the regular expressions in", 
    "Ruby in an example.", 
    "OK, we're ready.", 
    "So this is going to be hard.", 
    "I don't think you'll all immediately get this one.", 
    "At least, I didn't get it when I was sitting in the classroom", 
    "[INAUDIBLE] did this.", 
    "OK, which of these four expressions", 
    "will evaluate to non-nil?", 
    "Right.", 
    "So that's true.", 
    "If it's not nil, then it's true.", 
    "So which of these--"
  ]
}