{
  "start": [
    130, 
    3130, 
    8150, 
    10000, 
    11130, 
    13060, 
    15550, 
    16540, 
    19380, 
    20260, 
    23250, 
    24250, 
    28940, 
    30470, 
    33710, 
    34810, 
    38050, 
    39210, 
    41400, 
    44890, 
    46010, 
    47630, 
    49950, 
    52290, 
    54540, 
    57900, 
    59090, 
    60590, 
    61985, 
    64220, 
    65780, 
    69560, 
    73060, 
    75460, 
    78910, 
    82600, 
    83570, 
    84940, 
    88890, 
    91460, 
    92500, 
    94680, 
    95640, 
    98420, 
    101110, 
    104860, 
    106530, 
    109830, 
    111250, 
    115910, 
    120020, 
    120630, 
    123610, 
    126750, 
    130229, 
    132720, 
    135670, 
    136880, 
    138410, 
    142420, 
    145990, 
    147540, 
    151200, 
    157680, 
    159550, 
    162010, 
    169790, 
    171380, 
    174070, 
    177970, 
    180820, 
    184130, 
    185520, 
    186650, 
    190860, 
    195030, 
    197970, 
    199230, 
    206860, 
    209470, 
    213420, 
    214950, 
    216690, 
    218900, 
    224490, 
    228060, 
    230460, 
    233060, 
    234640, 
    237330, 
    239230, 
    241560, 
    245210, 
    248350, 
    250490, 
    254450, 
    258130, 
    259899, 
    262380, 
    265040, 
    266590, 
    269040, 
    274080, 
    274670, 
    278180, 
    279490, 
    282980, 
    286660, 
    289410, 
    291400, 
    292450, 
    294120, 
    296620, 
    301160, 
    304980, 
    306270, 
    309880, 
    314400, 
    316980, 
    318930, 
    320100, 
    323040, 
    324350, 
    326950, 
    330070, 
    331620, 
    336780, 
    338030, 
    340690, 
    345010, 
    346390, 
    350150, 
    353470, 
    356510, 
    358800, 
    360050, 
    363520, 
    364800, 
    367530, 
    372820, 
    376010, 
    377850, 
    379160, 
    381080, 
    384870, 
    388520, 
    389920, 
    392680, 
    393950, 
    394750, 
    397040, 
    398430, 
    399550, 
    401550, 
    405940, 
    408860, 
    411020, 
    413270, 
    414445, 
    416830, 
    419330, 
    420810, 
    424240, 
    429530, 
    432360, 
    438020, 
    442140, 
    445960, 
    446960, 
    450980, 
    454190, 
    457880, 
    461360, 
    465110, 
    468390, 
    470730, 
    473930, 
    475800, 
    478130, 
    481550, 
    483530, 
    487360, 
    490100, 
    491910, 
    493890, 
    498100, 
    500260, 
    500840, 
    503950, 
    505540, 
    507250, 
    508840, 
    513360, 
    514929, 
    518320, 
    519830, 
    522039, 
    527290, 
    531540, 
    533300, 
    536380, 
    537890, 
    540300, 
    544070, 
    547320, 
    548760, 
    549620, 
    551770, 
    555090, 
    560140, 
    561270, 
    562320, 
    564750, 
    567870, 
    571070, 
    572660, 
    577040, 
    579020, 
    582400, 
    584460, 
    587850, 
    589780, 
    593370, 
    596210, 
    598550, 
    603520, 
    605690, 
    608300, 
    612550, 
    613590, 
    617180, 
    619830, 
    620980, 
    621860, 
    624620, 
    625720, 
    629320, 
    630460, 
    631300, 
    634690, 
    638430, 
    641190, 
    644600, 
    647980, 
    650520, 
    652160, 
    653690, 
    657700, 
    659790, 
    662940, 
    666770, 
    669030, 
    672470, 
    675520, 
    679650, 
    681810, 
    683850, 
    686440, 
    688540, 
    689900, 
    694540, 
    697650, 
    701380, 
    707890, 
    709445, 
    711740, 
    714740, 
    715680, 
    716420, 
    719270, 
    720330, 
    723660, 
    727460, 
    729530, 
    732370, 
    735120, 
    740680, 
    741900, 
    745580, 
    747730, 
    748010, 
    750650, 
    751210, 
    754310, 
    757490, 
    759430, 
    760310, 
    761610, 
    767370, 
    769030, 
    773760, 
    775510, 
    778420, 
    781190, 
    784420, 
    787430, 
    789990, 
    794360, 
    796830, 
    799510, 
    802730, 
    804210, 
    807630, 
    811590, 
    812080, 
    815750, 
    816930, 
    819070, 
    822760, 
    824020, 
    828250, 
    830140, 
    832000, 
    836420, 
    840220, 
    842610, 
    844490, 
    848570, 
    851100, 
    852420, 
    855710, 
    858500, 
    859470, 
    862290, 
    865730, 
    869020, 
    873190, 
    879730, 
    885810, 
    888740, 
    889410, 
    892360, 
    896210, 
    898910, 
    900150, 
    904100, 
    906500, 
    908730, 
    912010, 
    913650, 
    916100, 
    917040, 
    918800, 
    922030, 
    923320, 
    926180, 
    928945, 
    931810, 
    934270, 
    940260, 
    944920, 
    947100, 
    949960, 
    952690, 
    953630, 
    956580, 
    961510, 
    965660, 
    969730, 
    970880, 
    972730, 
    973560, 
    974320, 
    977790, 
    981315, 
    984670, 
    987790, 
    990550, 
    992200, 
    994570, 
    995820, 
    999730, 
    1003200, 
    1006430, 
    1007310, 
    1008960, 
    1012130, 
    1014000, 
    1017560, 
    1021970, 
    1023850, 
    1026540, 
    1030250, 
    1033910, 
    1037920, 
    1041390, 
    1045280, 
    1047630
  ], 
  "end": [
    3130, 
    8150, 
    10000, 
    11130, 
    13060, 
    15550, 
    16540, 
    19380, 
    20260, 
    23250, 
    24250, 
    28940, 
    30470, 
    33710, 
    34810, 
    38050, 
    39210, 
    41400, 
    44890, 
    46010, 
    47630, 
    49950, 
    52290, 
    54540, 
    57900, 
    59090, 
    60590, 
    61985, 
    64220, 
    65780, 
    69560, 
    73060, 
    75460, 
    78910, 
    82600, 
    83570, 
    84940, 
    88890, 
    91460, 
    92500, 
    94680, 
    95640, 
    98420, 
    101110, 
    104860, 
    106530, 
    109830, 
    111250, 
    115910, 
    120020, 
    120630, 
    123610, 
    126750, 
    130229, 
    132720, 
    135670, 
    136880, 
    138410, 
    142420, 
    145990, 
    147540, 
    151200, 
    157680, 
    159550, 
    162010, 
    165920, 
    171380, 
    174070, 
    177970, 
    180820, 
    184130, 
    185520, 
    186650, 
    190860, 
    195030, 
    197970, 
    199230, 
    201570, 
    209470, 
    213420, 
    214950, 
    216690, 
    218900, 
    224490, 
    228060, 
    230460, 
    233060, 
    234640, 
    237330, 
    239230, 
    241560, 
    245210, 
    248350, 
    250490, 
    254450, 
    258130, 
    259899, 
    262380, 
    265040, 
    266590, 
    269040, 
    274080, 
    274670, 
    278180, 
    279490, 
    282980, 
    286660, 
    289410, 
    291400, 
    292450, 
    294120, 
    296620, 
    301160, 
    304980, 
    306270, 
    309880, 
    314400, 
    316980, 
    318930, 
    320100, 
    323040, 
    324350, 
    326950, 
    330070, 
    331620, 
    336780, 
    338030, 
    340690, 
    345010, 
    346390, 
    350150, 
    353470, 
    356510, 
    358800, 
    360050, 
    363520, 
    364800, 
    367530, 
    372820, 
    376010, 
    377850, 
    379160, 
    381080, 
    384870, 
    388520, 
    389920, 
    392680, 
    393950, 
    394750, 
    397040, 
    398430, 
    399550, 
    401550, 
    405940, 
    408860, 
    411020, 
    413270, 
    414445, 
    416830, 
    419330, 
    420810, 
    424240, 
    429530, 
    432360, 
    438020, 
    442140, 
    445960, 
    446960, 
    450980, 
    454190, 
    457880, 
    461360, 
    465110, 
    468390, 
    470730, 
    473930, 
    475800, 
    478130, 
    481550, 
    483530, 
    487360, 
    490100, 
    491910, 
    493890, 
    498100, 
    500260, 
    500840, 
    503950, 
    505540, 
    507250, 
    508840, 
    513360, 
    514929, 
    518320, 
    519830, 
    522039, 
    527290, 
    531540, 
    533300, 
    536380, 
    537890, 
    540300, 
    544070, 
    545320, 
    548760, 
    549620, 
    551770, 
    553020, 
    560140, 
    561270, 
    562320, 
    564750, 
    567870, 
    571070, 
    572660, 
    577040, 
    579020, 
    582400, 
    584460, 
    587850, 
    589780, 
    593370, 
    596210, 
    598550, 
    603520, 
    605690, 
    608300, 
    612550, 
    613590, 
    617180, 
    619830, 
    620980, 
    621860, 
    624620, 
    625720, 
    629320, 
    630460, 
    631300, 
    634690, 
    638430, 
    641190, 
    644600, 
    647980, 
    650520, 
    652160, 
    653690, 
    657700, 
    659790, 
    662940, 
    666770, 
    669030, 
    672470, 
    675520, 
    679650, 
    681810, 
    683850, 
    686440, 
    688540, 
    689900, 
    694540, 
    697650, 
    701380, 
    707890, 
    709445, 
    711740, 
    714740, 
    715680, 
    716420, 
    719270, 
    720330, 
    723660, 
    727460, 
    729530, 
    732370, 
    735120, 
    740680, 
    741900, 
    745580, 
    747730, 
    748010, 
    750650, 
    751210, 
    754310, 
    757490, 
    759430, 
    760310, 
    761610, 
    767370, 
    769030, 
    773760, 
    775510, 
    778420, 
    781190, 
    784420, 
    787430, 
    789990, 
    794360, 
    796830, 
    799510, 
    802730, 
    804210, 
    807630, 
    811590, 
    812080, 
    813330, 
    816930, 
    819070, 
    820320, 
    824020, 
    828250, 
    830140, 
    832000, 
    836420, 
    840220, 
    842610, 
    844490, 
    848570, 
    851100, 
    852420, 
    855710, 
    858500, 
    859470, 
    862290, 
    865730, 
    869020, 
    873190, 
    876980, 
    885810, 
    888740, 
    889410, 
    892360, 
    896210, 
    898910, 
    900150, 
    904100, 
    906500, 
    908730, 
    912010, 
    913650, 
    916100, 
    917040, 
    918800, 
    922030, 
    923320, 
    926180, 
    928945, 
    931810, 
    934270, 
    937155, 
    944920, 
    947100, 
    949960, 
    952690, 
    953630, 
    956580, 
    961510, 
    965660, 
    969730, 
    970880, 
    972730, 
    973560, 
    974320, 
    977790, 
    981315, 
    984670, 
    987790, 
    990550, 
    992200, 
    994570, 
    995820, 
    999730, 
    1003200, 
    1006430, 
    1007310, 
    1008960, 
    1012130, 
    1014000, 
    1015250, 
    1021970, 
    1023850, 
    1026540, 
    1030250, 
    1033910, 
    1037920, 
    1041390, 
    1045280, 
    1047630, 
    1049280
  ], 
  "text": [
    "ARMANDO FOX: OK, let's go through them one at a time.", 
    "What is the case to be made for a controller method?", 
    "Anybody care to make the case for it?", 
    "Good because you shouldn't.", 
    "Controllers don't do any real work.", 
    "Remember, they're just there to mediate between the user, the view,", 
    "and the model.", 
    "If your controller methods are more than a few lines long, you should be", 
    "suspicious.", 
    "So certainly not a controller method.", 
    "What are some other choices?", 
    "Well, it could be an instance method or a class method of the Movie model.", 
    "What about those choices?", 
    "Does it make sense to talk about it as an instance method of the Movie model?", 
    "Let me rephrase that question.", 
    "Why doesn't it make sense to talk about it as an instance method of the", 
    "Movie model?", 
    "We don't have a movie record in the database yet.", 
    "Therefore there's nothing on which we could call an instance method, which", 
    "leaves another possibility.", 
    "Well, it could be a class method of the Movie model.", 
    "Here's an operation about movies generally.", 
    "But it doesn't yet apply to any specific movie.", 
    "And that's in fact the correct answer in this case.", 
    "Helper methods, if you recall, are really just there to make your views", 
    "more beautiful.", 
    "Helper methods don't do a lot of work, either.", 
    "They just do kind of pretty formatting.", 
    "They dress things up.", 
    "We are primed and ready to go.", 
    "We have identified the things that our controller method should do.", 
    "We have identified three possible tests that we could write to test", 
    "those things, even though there's no controller code yet.", 
    "So the next thing to do is actually figure out what's the process by which", 
    "we develop the controller code, using what we already know.", 
    "We know what it has to do, right?", 
    "We wrote those things down.", 
    "All we've got to do now is actually convert those assertions into tests", 
    "and then have some code that makes those tests pass.", 
    "So here's our pattern.", 
    "We're going to think about one thing the code should do.", 
    "We've already done that step.", 
    "We thought of three things that this controller method has to do.", 
    "We're going to capture that thought by writing some test code.", 
    "And of course, the test will fail because there is no code to be tested.", 
    "But that's not a problem.", 
    "As we will see, testing the code you wish you had is not as hard as you", 
    "might suspect.", 
    "Then, we write the simplest possible code that makes that one test pass.", 
    "We look for opportunities to beautify our code, DRYing out commonality with", 
    "other tests.", 
    "If we find that there's code that we're repeating, either in our app or", 
    "across our tests, this is the time to do a little bit of local clean-up.", 
    "And we continue this on to do the next spec.", 
    "So the process is called Red, Green, Refactor.", 
    "And the idea is that you always start with a failing test.", 
    "You make it pass.", 
    "If necessary, you clean up stuff.", 
    "But the amount of time that things are red or failing is minimized.", 
    "So let's talk about this in terms of our controller action.", 
    "We know we have to add a route.", 
    "Because right now, the Search TMDb button has nowhere to go.", 
    "However, to prove to you that we have to add a route, I will actually get", 
    "some test code.", 
    "Here's our Movies Controller spec.", 
    "And I'm going to copy and paste some code into it.", 
    "We're going to walk through this code in just a minute.", 
    "But what I want to prove to you is that there's no shortcuts here.", 
    "So notice that Autotest woke up.", 
    "On my older machine, it takes a few seconds to start up.", 
    "But it will re-run the test from before.", 
    "And now we have red.", 
    "What's the error?", 
    "I tried to do the equivalent of clicking the Search TMDb button, but", 
    "it says there's no route matching whatever this post was.", 
    "So I just wanted to drive home the fact that we actually have to do this", 
    "one step at a time.", 
    "So let's start by creating the route.", 
    "So I'm using the route syntax.", 
    "I will touch the other files so that the tester wakes up again.", 
    "And what happens now?", 
    "It will re-run my test one more time.", 
    "And is it going to pass this time?", 
    "No, but we're making progress because the error about the route is gone.", 
    "So even at the most basic level, I can use test failures to", 
    "help me drive my code.", 
    "So where are we going with this?", 
    "We have a route.", 
    "We're going to have a controller action that actually does", 
    "the thing we need.", 
    "I took the liberty of creating an empty view.", 
    "Why do I need an empty view in order for my test to ultimately pass?", 
    "Why do I need an empty view in order for my test to pass?", 
    "If what I'm going to do is I'm going to simulate calling the controller", 
    "action, and all controller actions have to render something, right?", 
    "So by convention over configuration, it's going to look for that view", 
    "unless we tell it otherwise.", 
    "And we're eventually going to need a view to show what the results were.", 
    "So I'll just go ahead and create an empty file so that there's", 
    "something to render.", 
    "And we have to start our controller action.", 
    "So we've created a route to an action called search_tmdb in the Movies", 
    "Controller.", 
    "OK, well, we better have a method in the actual controller so we can put", 
    "the method there.", 
    "Here's our Movies Controller.", 
    "And we'll put the method up here.", 
    "So far, it doesn't do anything.", 
    "And by the way, the tester will wake up again because I made", 
    "a change to a file.", 
    "Of course, my test is still going to fail.", 
    "Because I have a method, but it doesn't do anything.", 
    "And in the meantime, let's talk about this question of--", 
    "since you answered the multiple choice question of where does the method go", 
    "that actually calls TMDb.", 
    "And we said, that method goes in the model because the model does the work.", 
    "Fair enough, but what we're trying to test here is the controller method.", 
    "And this functionality doesn't go in the controller method.", 
    "So wait, you're saying, we're going to write a test for", 
    "the controller method.", 
    "The controller method calls a model method, but we don't even have that", 
    "model method yet.", 
    "Not a problem, as it turns out.", 
    "Even though no model method exists to do what we want, we'll just use the", 
    "code we wish we had.", 
    "We will pretend that we already have a method called Movie.find_in_tmdb.", 
    "It's a class method of Movie.", 
    "This is what we decided was the right way to do this.", 
    "And we're going to use a seam to test the code we wish we had.", 
    "We'll talk about seams in a moment.", 
    "But basically what we're doing is, we're going to-- in our test file--", 
    "selectively induce a behavior that doesn't exist in the real app.", 
    "And we're going to do that just for the purpose of being able to test that", 
    "one little piece of the controller that we want to test.", 
    "So here's what our game plan is going to be.", 
    "We're going to simulate POSTing the form to the controller action.", 
    "That's easy enough.", 
    "Then we're going to check that when the controller action starts", 
    "executing, it will try to call this nonexistent method, find_in_tmdb, and", 
    "that it will properly get whatever data the user put into that form and", 
    "pass it to that method.", 
    "Notice how much I'm taking for granted here.", 
    "This method doesn't actually exist.", 
    "But what we're saying is if it did exist, we would need to make sure that", 
    "it's getting called and that it's getting past the correct argument.", 
    "Now we're going to do this.", 
    "Of course, the test will fail because our controller method doesn't", 
    "actually exist yet.", 
    "But no problem.", 
    "We can fix the controller action to make it green.", 
    "This is a little bit of a leap of faith.", 
    "So follow me carefully here.", 
    "What we're going to do--", 
    "let's take a look at the code on Pastebin so we can see", 
    "how the action happens.", 
    "So here's our first test.", 
    "Remember before, we just had this It part.", 
    "We didn't actually have any code.", 
    "Let's make it bigger so it's readable.", 
    "So what is our test case going to do?", 
    "Here is our actual test code.", 
    "We're going to say that Movie-- remember, Movie's just a class--", 
    "Movie should receive a call to a method called find_in_tmdb.", 
    "And the call should have this argument.", 
    "We're setting up an expectation here that when we do a POST--", 
    "and the POST action is provided for us as part of RSpec--", 
    "POST essentially simulates what would happen if you actually did a form", 
    "submission.", 
    "So it's going to use this as the route that receives the POST.", 
    "And this is what's going to get passed in the params hash.", 
    "Now, if you remember, when we talked about the basics of a Rails app, the", 
    "params hash just includes whatever the user typed in various fields.", 
    "So what we're doing here is simulating the case where the user filled in a", 
    "field called search_terms with the word \"hardware.\" So presumably,", 
    "they're searching for a movie by that name.", 
    "And we're going to post that to the search_tmdb action.", 
    "So what is it that's going on here?", 
    "The important line here is line six.", 
    "It sets up an expectation that this method is going to be called and that", 
    "it's going to be called with certain arguments.", 
    "Now, the fact that this method doesn't exist is not a problem because the act", 
    "of setting up the expectation sets up a shadow method.", 
    "It's called a mock or a stub, depending on the", 
    "terminology that you use.", 
    "Which means that even if this method did exist, the fact that we're using", 
    "an expectation here is going to override it.", 
    "Why?", 
    "Because we don't actually want this method to execute to completion.", 
    "That's not what we're testing.", 
    "This is really, really, really important.", 
    "So let me say this again.", 
    "What we're testing is not whether the find_in_tmdb method is implemented or", 
    "whether it does the right thing.", 
    "All we want to know is, when the controller action executes, does it", 
    "try to call that method?", 
    "And does it pass the correct arguments to it?", 
    "If we can confirm that fact, we will have fulfilled our controller spec.", 
    "Because the controller doesn't say, and the find_in_tmdb method will then", 
    "call TMDb and do the right thing.", 
    "The controller spec is only testing that the controller action is going to", 
    "try to do the right thing.", 
    "This is the code we wish we had.", 
    "And let's grab it, by the way, so that we can actually paste it in.", 
    "Yes.", 
    "Sure, we can explain that.", 
    "Let's do that.", 
    "That was going to be the self-check question.", 
    "But since you've asked it--", 
    "the first question had to do with shouldn't we also be testing the model", 
    "method that's going to do the work.", 
    "Yes, we should be testing it.", 
    "But a spec tests one thing.", 
    "Each spec is going to test one behavior of one part of the app.", 
    "In this case, the only behavior we care about is, is the controller", 
    "action correctly implemented?", 
    "If find_in_tmdb decides to blow up, that's another test's problem.", 
    "It is not our problem today.", 
    "But with respect to the question of, why are these two lines in this order?", 
    "Why does line six come before line seven?", 
    "In other words, why aren't we first doing the POST and then", 
    "executing line six?", 
    "The reason has to do with the fact that we're setting up the expectation.", 
    "Think about how this would be implemented in a dynamic language like", 
    "Ruby where you can define new methods on the fly.", 
    "What we're doing is overriding any existing definition of a class method", 
    "with this name in the Movie class.", 
    "And we're saying we're going to replace it with a different method.", 
    "The only thing that our fake method is going to do is keep track of whether", 
    "it gets called.", 
    "And if so, whether it gets called with the right argument.", 
    "Once it does that, it will drop things on the floor.", 
    "It'll return nothing.", 
    "It's done.", 
    "Now, we'll see in a minute that if we want it to simulate a return value, we", 
    "could do that, too.", 
    "But for the moment, we're creating a shadow method whose only role is to be", 
    "a stunt double.", 
    "That's what this is.", 
    "It's a stunt double for a real method that we don't have yet.", 
    "But that's OK, because this method is not the subject of the test.", 
    "This is why in our initial discussion, I called this a seam.", 
    "A seam is a concept that is really, really important, especially in", 
    "testing, and is more difficult to get right in static languages.", 
    "It's a place where you can change the behavior of your app", 
    "without editing the code.", 
    "Because notice, that's exactly what we did.", 
    "We set up a fake method that is going to shadow the real method--", 
    "which doesn't exist yet-- in our Movie class.", 
    "And the only reason we have to do that is so that we can satisfy the", 
    "dependency between the controller action and the model.", 
    "So why is this useful for testing?", 
    "Because the goal of a unit is to isolate one particular behavior.", 
    "In this case, the behavior we're isolating is, does the controller", 
    "action correctly pull information from the posted form and pass that", 
    "information to the right model method?", 
    "That's all we're testing.", 
    "In order to test that, of course, we have to have a model method.", 
    "So that we can ask, did you try to call it?", 
    "And that's what we just set up.", 
    "We set up a seam without modifying the source code in our app that sets up", 
    "just enough infrastructure to break that dependency.", 
    "So should_receive is an example of using runtime definition in open", 
    "classes so that we can create a way to isolate the controller action from the", 
    "other things that it depends on.", 
    "And by the way, notice the other important side effect of this.", 
    "Going back to the original question of wouldn't we also need tests for the", 
    "model method--", 
    "of course we will.", 
    "But suppose for the moment that the model method is buggy.", 
    "There's some problem with it.", 
    "We've already written it, but it's got a bug that we haven't found yet.", 
    "If we use the real model method in our controller test, it would cause the", 
    "controller test to fail, too.", 
    "Because even though the controller's trying to do the right thing, it would", 
    "die because there's a bug or an exception in the model method.", 
    "So in this case, we use should_receive to create a mock method for something", 
    "that doesn't exist yet.", 
    "But even if the method existed, it's still a good idea to use something", 
    "like should_receive to mock it out.", 
    "Why?", 
    "Because we need to isolate the behavior of all these components that", 
    "it depends on.", 
    "We want to isolate just those pieces of the controller action that we want", 
    "to test the behavior of.", 
    "If you haven't done this before, this is a little bit of a", 
    "mind-bending concept.", 
    "But stay with me here.", 
    "Now, of course, every time you finish one test case, RSpec sensibly resets", 
    "all of the mocks and stubs.", 
    "So once this test finishes executing, the shadow of the", 
    "find_in_tmdb method goes away.", 
    "And if you want to do that same thing for a different test, you've got to", 
    "create a shadow method in that test, too.", 
    "And as the book describes, there's ways to DRY this stuff out so that you", 
    "can have a whole group of tests that rely on the same set of mocks.", 
    "But in general, each test is independent.", 
    "Because otherwise, imagine the chaos if sometimes you're setting up a", 
    "shadow method and other times you're not setting one up.", 
    "So with that in mind, how do we make this spec green?", 
    "Well, the expectation says that the controller action should call", 
    "find_in_tmdb.", 
    "So what if we actually call it?", 
    "Let's copy that line into our--", 
    "OK.", 
    "Suppose we call it.", 
    "Crunch.", 
    "Who sees green?", 
    "Green is good.", 
    "Green means that test passed.", 
    "It should call the model method that performs TMDb search.", 
    "That's not too bad, right?", 
    "If you think about what we just did--", 
    "we successfully tested this method right here, search_tmdb, even though", 
    "it tries to call this method right here, which doesn't exist.", 
    "This is the essence of isolating dependencies.", 
    "This is why seams are so important.", 
    "We need to be able to test this controller method even though it", 
    "depends on other things that have their own tests and which may or may", 
    "not be working.", 
    "If you think about those machines at the gym, the Nautilus machines, where", 
    "this muscle here gets isolated from the rest of your body--", 
    "think about it like that.", 
    "You're trying to isolate one specific characteristic.", 
    "And you do it by creating seams around the things that it depends on and", 
    "controlling the behavior of the seams as if they were puppets.", 
    "That is the essence of doing unit testing with seams.", 
    "Now let's get back to being able to address the other questions we had.", 
    "And by the way, in real life, if we had this find_in_tmdb method, well,", 
    "remember what it's going to do is it's going to poll TMDb and get some", 
    "results back.", 
    "So you'd think in real life, this method should return something.", 
    "We have this shadow method, this mock, that we set up.", 
    "It returns nil, which is the moral equivalent of really", 
    "not returning anything.", 
    "And as we'll see, there is indeed a way that we can set up a mock where we", 
    "can also control what it's going to return.", 
    "Why didn't we do that in this case?", 
    "Very simply because the only thing we're checking is that the controller", 
    "action calls the model method.", 
    "In particular, we're not checking whether the model method returns", 
    "something sensible.", 
    "That's the subject of a different test.", 
    "So I'm really kind of taking the point to an extreme here to", 
    "make the message clear.", 
    "Each test cares about exactly one thing.", 
    "All of the other things that it depends on should be mocked out so", 
    "that the test runs in a controlled, repeatable environment and you can", 
    "trust its results.", 
    "So let's start a list of testing techniques we know.", 
    "With respect to an object, we can set up an expectation that the object", 
    "should receive some method call.", 
    "And we can optionally say with certain arguments.", 
    "If we leave out the with part, all it will check is whether", 
    "the method gets called.", 
    "But it won't check whether any particular arguments get passed.", 
    "If we pass with, it will also check that the arguments match.", 
    "The question was, we're doing all this in the test environment.", 
    "But if we actually tried to execute find_in_tmdb in the real environment,", 
    "we would get an exception.", 
    "Because the method doesn't exist.", 
    "And you're absolutely right.", 
    "We would.", 
    "But in the test environment, we can indulge in fantasy.", 
    "For the purposes of a specific test, we can indulge in the fantasy that all", 
    "of the other things that that test depends on will work perfectly.", 
    "And we do that by creating fake versions of them that do exactly the", 
    "one thing that they need to do just for that test.", 
    "By the way, you can do this in other languages.", 
    "But it is exceedingly painful in languages that are compiled and", 
    "statically typed.", 
    "What we're relying on that makes this easy in Ruby is at runtime, we can", 
    "define any method on any object and redefine it later.", 
    "So we're using that ability to redefine existing methods on objects.", 
    "Say, no, no, no.", 
    "Don't call the real find_in_tmdb.", 
    "Here's a fake version that does just what I need for this one test.", 
    "And every test can do a different thing with that.", 
    "It's extremely powerful.", 
    "So you spoiled one of my multiple choice questions, which was regarding", 
    "the order of POSTing and Should.", 
    "But we can still use the other one, which is this one.", 
    "Which statement is false regarding should_receive?", 
    "That it provides a stand-in for a real method that doesn't exist yet, that it", 
    "would override the real method even if it did exist, that you can issue it", 
    "either before or after the code that should make the call, and that it", 
    "exploits Ruby's open classes and metaprogram to create seams.", 
    "Which is the false statement?", 
    "And one of them is false, I assure you."
  ]
}