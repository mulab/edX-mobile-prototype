{
  "start": [
    810, 
    3890, 
    6610, 
    7990, 
    11870, 
    14660, 
    17040, 
    19710, 
    21180, 
    22880, 
    26560, 
    30650, 
    32049, 
    37220, 
    41240, 
    43690, 
    45290, 
    49310, 
    50060, 
    52840, 
    56420, 
    57050, 
    59300, 
    62430, 
    64280, 
    69070, 
    71470, 
    74540, 
    77270, 
    78080, 
    82060, 
    86490, 
    88190, 
    91380, 
    94440, 
    97360, 
    98810, 
    103940, 
    105310, 
    108960, 
    111440, 
    112480, 
    115540, 
    116430, 
    118410, 
    122710, 
    126460, 
    128840, 
    129960, 
    131940, 
    135190, 
    137530, 
    142650, 
    145420, 
    149850, 
    153730, 
    154820, 
    157530, 
    160870, 
    164520, 
    168170, 
    171220, 
    173410, 
    176020, 
    179410, 
    182330, 
    185450, 
    189020, 
    190690, 
    193300, 
    196120, 
    200170, 
    204520, 
    205600, 
    207720, 
    208590, 
    211580, 
    215370, 
    216640, 
    218930, 
    223170, 
    224960, 
    228080, 
    230310, 
    232160, 
    232620, 
    234990, 
    237020, 
    238880, 
    241060, 
    244740, 
    246200, 
    249130, 
    252320, 
    253750, 
    256649, 
    257670, 
    260829, 
    263410, 
    269640, 
    271740, 
    276540, 
    278080, 
    281590, 
    285440, 
    287040, 
    288100, 
    291020, 
    293110, 
    295840, 
    296830, 
    299540, 
    300940, 
    304350, 
    308230, 
    309470, 
    312220, 
    314590, 
    317900, 
    321270, 
    322340, 
    325690, 
    328410, 
    330070, 
    332810, 
    334590, 
    337550, 
    338370, 
    339830, 
    342770, 
    345460, 
    348860, 
    351160, 
    352920, 
    355670, 
    358710, 
    360780, 
    363040, 
    366570, 
    371860, 
    377150, 
    378820, 
    381830, 
    385790, 
    388890, 
    390490, 
    394360, 
    395990, 
    398720, 
    400500, 
    403180, 
    419750, 
    422560, 
    423920, 
    426500, 
    428075, 
    428865, 
    430120, 
    431110, 
    433770, 
    434900, 
    436240, 
    437330, 
    440450, 
    442040, 
    443890, 
    448150, 
    450120, 
    453230, 
    454700, 
    459180, 
    462160, 
    463330, 
    469830, 
    471460, 
    473960, 
    475870, 
    481510, 
    483800, 
    487950, 
    492890, 
    494940, 
    497190, 
    501290, 
    502890, 
    504230, 
    505930, 
    507400, 
    508930, 
    512159, 
    516620, 
    518799, 
    521929, 
    523159, 
    525060, 
    526510, 
    527200, 
    530200, 
    533000, 
    537050, 
    541310, 
    542110, 
    547440, 
    550120, 
    552610, 
    556390, 
    560140, 
    563240, 
    567590, 
    570450, 
    572280, 
    576810, 
    578640, 
    584040, 
    585110, 
    587700, 
    591410, 
    595270, 
    597150, 
    600260, 
    604060, 
    604880, 
    607590, 
    610700, 
    614790, 
    616110, 
    619570, 
    623490, 
    627380, 
    629370, 
    632240, 
    634790, 
    638500, 
    639710, 
    640800, 
    644260, 
    645400, 
    646950, 
    650310, 
    652380, 
    654690, 
    658040, 
    660760, 
    663300, 
    664770, 
    667830, 
    670130, 
    674350, 
    675450, 
    676630, 
    678960, 
    683120, 
    685960, 
    687220, 
    690140, 
    692890, 
    694320, 
    697810, 
    699100, 
    702540, 
    704610, 
    706600, 
    709420, 
    711250, 
    713340, 
    716140, 
    718840, 
    720810, 
    724700, 
    727440, 
    729590, 
    731640, 
    733300, 
    736000, 
    736820, 
    739460, 
    740920, 
    742460, 
    745430, 
    747430, 
    750810, 
    754090, 
    756890, 
    759820, 
    761450, 
    764200, 
    765650, 
    768500, 
    771840, 
    775270, 
    777830, 
    783140, 
    784550
  ], 
  "end": [
    3890, 
    6610, 
    7990, 
    11870, 
    14660, 
    17040, 
    19710, 
    21180, 
    22880, 
    26560, 
    30650, 
    32049, 
    37220, 
    41240, 
    43690, 
    45290, 
    49310, 
    50060, 
    52840, 
    56420, 
    57050, 
    59300, 
    62430, 
    64280, 
    69070, 
    71470, 
    74540, 
    77270, 
    78080, 
    82060, 
    86490, 
    88190, 
    91380, 
    94440, 
    97360, 
    98810, 
    103940, 
    105310, 
    108960, 
    111440, 
    112480, 
    115540, 
    116430, 
    118410, 
    122710, 
    126460, 
    128840, 
    129960, 
    131940, 
    135190, 
    137530, 
    142650, 
    145420, 
    149850, 
    153730, 
    154820, 
    157530, 
    160870, 
    164520, 
    168170, 
    171220, 
    173410, 
    176020, 
    179410, 
    182330, 
    185450, 
    189020, 
    190690, 
    193300, 
    196120, 
    200170, 
    204520, 
    205600, 
    207720, 
    208590, 
    211580, 
    215370, 
    216640, 
    218930, 
    223170, 
    224960, 
    228080, 
    230310, 
    232160, 
    232620, 
    234990, 
    237020, 
    238880, 
    241060, 
    244740, 
    246200, 
    249130, 
    252320, 
    253750, 
    256649, 
    257670, 
    260829, 
    263410, 
    269640, 
    271740, 
    276540, 
    278080, 
    281590, 
    285440, 
    287040, 
    288100, 
    291020, 
    293110, 
    295840, 
    296830, 
    299540, 
    300940, 
    304350, 
    308230, 
    309470, 
    312220, 
    314590, 
    317900, 
    321270, 
    322340, 
    325690, 
    328410, 
    330070, 
    332810, 
    334590, 
    337550, 
    338370, 
    339830, 
    342770, 
    345460, 
    348860, 
    351160, 
    352920, 
    355670, 
    358710, 
    360780, 
    363040, 
    366570, 
    371860, 
    377150, 
    378820, 
    381830, 
    385790, 
    388890, 
    390490, 
    394360, 
    395990, 
    398720, 
    400500, 
    403180, 
    405845, 
    422560, 
    423920, 
    426500, 
    428075, 
    428865, 
    430120, 
    431110, 
    433770, 
    434900, 
    436240, 
    437330, 
    440450, 
    442040, 
    443890, 
    448150, 
    450120, 
    453230, 
    454700, 
    459180, 
    462160, 
    463330, 
    469830, 
    471460, 
    473960, 
    475870, 
    481510, 
    483800, 
    487950, 
    492890, 
    494940, 
    497190, 
    501290, 
    502890, 
    504230, 
    505930, 
    507400, 
    508930, 
    512159, 
    516620, 
    518799, 
    521929, 
    523159, 
    525060, 
    526510, 
    527200, 
    530200, 
    533000, 
    537050, 
    541310, 
    542110, 
    547440, 
    550120, 
    552610, 
    556390, 
    560140, 
    563240, 
    567590, 
    570450, 
    572280, 
    576810, 
    578640, 
    584040, 
    585110, 
    587700, 
    591410, 
    595270, 
    597150, 
    600260, 
    604060, 
    604880, 
    607590, 
    610700, 
    614790, 
    616110, 
    619570, 
    623490, 
    627380, 
    629370, 
    632240, 
    634790, 
    638500, 
    639710, 
    640800, 
    644260, 
    645400, 
    646950, 
    650310, 
    652380, 
    654690, 
    658040, 
    660760, 
    663300, 
    664770, 
    667830, 
    670130, 
    674350, 
    675450, 
    676630, 
    678960, 
    683120, 
    685960, 
    687220, 
    690140, 
    692890, 
    694320, 
    697810, 
    699100, 
    702540, 
    704610, 
    706600, 
    709420, 
    711250, 
    713340, 
    716140, 
    718840, 
    720810, 
    724700, 
    727440, 
    729590, 
    731640, 
    733300, 
    736000, 
    736820, 
    739460, 
    740920, 
    742460, 
    745430, 
    747430, 
    750810, 
    754090, 
    756890, 
    759820, 
    761450, 
    764200, 
    765650, 
    768500, 
    771840, 
    775270, 
    777830, 
    783140, 
    784550, 
    786580
  ], 
  "text": [
    "ARMANDO FOX: So let's go through these one at a time.", 
    "Let's look at the first one, result should not be empty.", 
    "Well, what's going to happen here?", 
    "Because it begins with be_, RSpec's behavior is it's going to try to call", 
    "the method empty question mark on result.", 
    "That's a perfectly legitimate thing to try to do.", 
    "Now, whether it makes any sense to call empty on whatever", 
    "result is, who knows.", 
    "But this is certainly a valid way to use it.", 
    "Because empty will either return True or return False.", 
    "5.should be \"spaceship\" result.", 
    "Recall the \"spaceship\" operator.", 
    "The \"spaceship\" operator returns what when applied to its two arguments?", 
    "Negative 1, 0, or 1, depending on whether the receiver is less than,", 
    "equal to, or greater than the result.", 
    "Which is problematic, right?", 
    "Because the idea of a should assertion or a should_not assertion is not try", 
    "value, right?", 
    "A should assertion either is true or is not true.", 
    "So even though this is syntactically legal, it's almost certainly", 
    "not what you want.", 
    "Because it will never return false.", 
    "Negative 1, 0, and 1 are all values that are non-nil.", 
    "Therefore, that makes them true values.", 
    "So the green one is not a way that you would ever see it being called, unless", 
    "you have a very strange testing environment.", 
    "Not because there's a syntax error, but because it doesn't make any sense", 
    "to use this operator which can never return false.", 
    "So that's the reason here.", 
    "The message is should or should not have to have a matcher after them that", 
    "will reasonably return true or nil, true or false depending on what the", 
    "test condition is.", 
    "And by that criterion, the third choice is perfectly reasonable.", 
    "Because we can talk about matching a regular expression.", 
    "Match a regular expression is either something that yes, it'll match, or", 
    "no, it won't match.", 
    "So the green one is the correct answer as in a not valid use of should or", 
    "should_not.", 
    "OK, so so far, we're doing pretty well.", 
    "We identified the three things that the simple controller", 
    "action should do.", 
    "So far, we have tests for two of them that started out as yellow because the", 
    "tests hadn't been written.", 
    "And we managed to make them both pass green.", 
    "So that leaves us with just one thing, which is that the controller action", 
    "should make the search results available to the template.", 
    "And again, remember, we're living in a world of fiction here.", 
    "There is no template.", 
    "There is no model method that's going to generate the results.", 
    "But that doesn't matter because we can still test that the controller action", 
    "would do the right thing if those existed.", 
    "So we can introduce one more augmentation to RSpec that's provided", 
    "by the Rails plugin, called assigns.", 
    "Remember that we said that the response object from the controller", 
    "essentially is a representation of the thing that is about to be rendered.", 
    "Which view is it?", 
    "And what instance variables are available to that view?", 
    "Remember also that when we did our introduction to walking through a", 
    "Rails app, we pointed out that there is a neat piece of machinery whereby", 
    "instance variables that you set up in the controller action are also", 
    "available in the view, so that you can interpolate the values of those", 
    "variables when you render HTML.", 
    "And that even though the controller and the view are separate, Rails", 
    "essentially manages to copy over the instance variables for you.", 
    "So in terms of our test, what is it we're trying to do?", 
    "We want to make sure that if that view was going to be rendered, there would", 
    "be an instance variable available that has the results obtained by the", 
    "controller.", 
    "Because then if we wrote the view, we could use that instance variable.", 
    "And we could make a table or whatever we wanted to do.", 
    "So there's an Rspec-Rails method that's provided to help us do this,", 
    "called assigns, which lets us ask the question, does this instance variable", 
    "exist in the view?", 
    "And if so, what is its value?", 
    "Pretty cool, right?", 
    "We pass it a symbol that names the instance variable.", 
    "And we get back whatever the value is that the controller assigned to that", 
    "instance variable.", 
    "Let's take a look, shall we?", 
    "So here's our controller method so far.", 
    "What's wrong with this controller method?", 
    "By the way, even though it passes our tests, what's wrong with it?", 
    "Anybody care to take a stab at it?", 
    "It can't send anything to the view at the moment.", 
    "Why not?", 
    "Because there's no instance variables.", 
    "Yeah, we're calling this method which doesn't exist.", 
    "But we're throwing away the result.", 
    "This is the whole point of the controller action.", 
    "So you would think that the controller action would have assigned", 
    "something to this.", 
    "For example, @movies or @matches or something.", 
    "In that case, the instance variable would be made available to the view.", 
    "Good thing we're about to write a test.", 
    "Because so far, we haven't tested for the fact that we're capturing the", 
    "value of this.", 
    "So we can do that.", 
    "OK, so now we run into an issue.", 
    "Because in our controller method, we could surely say something like this.", 
    "That looks pretty reasonable.", 
    "Because then, we could check that the movie's variable is made", 
    "available to the view.", 
    "But we've got this problem that our method doesn't exist.", 
    "So far we've been able to stub it out, because we need it to make the rest of", 
    "the controller test pass.", 
    "So what could we do here?", 
    "Well, here's something we could do.", 
    "Let's make this larger so we can see it.", 
    "And I'm deliberately going to do a little more than we really need to do", 
    "for this case.", 
    "Because I want to show you how you would test this", 
    "in realistic scenarios.", 
    "But once we finish explaining this, I'll show you what's the minimum", 
    "amount we could have gotten away with if we were lazy, which we are.", 
    "So what's going on here?", 
    "Here's our test case where we're spelling out that it should make the", 
    "search results available to that template.", 
    "Now, find_in_tmdb doesn't exist yet.", 
    "And yet we're saying whatever it returns, we want to check that it's", 
    "passed the view.", 
    "OK, let's continue our fantasy of the code we wish we had.", 
    "We're going to manufacture something for it to return.", 
    "Here's what we're going to manufacture.", 
    "We're going to create two mock objects.", 
    "What is mock movie?", 
    "It creates an object that if you ask it, are you an instance", 
    "of the movie class?", 
    "It would say, yes.", 
    "But if you ask it to actually do anything, it would barf.", 
    "It would say, I don't know how to do this because I am a stunt double.", 
    "So we're going to create an array containing two of those.", 
    "And we're going to use those as our fake results.", 
    "What do I mean by fake results?", 
    "Well, we're going to take our stub one step further here.", 
    "Not only are we going to stub the method, but if it ever gets called,", 
    "we're going to return the fake results.", 
    "Now the fantasy is really complete.", 
    "Not only are we stipulating that the method which doesn't exist is going to", 
    "be called, but we're also stipulating what it's going to return when called.", 
    "Now when we do our post to search TMDB, in our controller, we took", 
    "whatever the return value of this was.", 
    "And we're assigning it to this instance variable, @movies.", 
    "Well, if everything is working correctly, then in our view, we should", 
    "have access to an instance variable called @movies.", 
    "And we can check that.", 
    "We can check whether the view has an instance variable", 
    "assigned called @movies.", 
    "And if it does, it should equal whatever we passed", 
    "in as the fake results.", 
    "So let's fill this in in order to prove our point.", 
    "And then I'll explain why this is actually a little bit of overkill.", 
    "Are we going to have some joy?", 
    "And we are.", 
    "Ladies and gentlemen, these demos are live.", 
    "I'm doing this without a net.", 
    "[APPLAUSE]", 
    "ARMANDO FOX: It's OK.", 
    "Hold your applause.", 
    "Save it for when one doesn't work.", 
    "And then do not hiss.", 
    "They will cancel each other out.", 
    "So what's going on here?", 
    "Let's go back and take a look at the code that we just put in there.", 
    "Let's walk through one more time.", 
    "We set up some fake results.", 
    "We said, if you ever call the find_in_tmdb method, make it return", 
    "that fake results object that we just set up.", 
    "We're staging it so that if we ever call it, we can control what's going", 
    "to come back from that method.", 
    "And once we execute our controller action, we verify that the view is", 
    "going to have an instance variable that matches whatever we set up as our", 
    "fake result.", 
    "Again, we've isolated the behavior of find_in_tmdb by essentially setting it", 
    "up to do exactly what we want.", 
    "So that we can check that the code around it, the things that depend on", 
    "it, are implemented correctly.", 
    "Now, why did I say that in this case, we actually did a little bit more than", 
    "was required?", 
    "If you want to be absolutely a purist, you could make the criticism that this", 
    "test does more than is needed to verify that it should make the TMDB", 
    "search results available to the template.", 
    "Where could I have gotten away with doing less?", 
    "Where could I eliminate characters from this test and still claim that", 
    "it's testing this functionality?", 
    "I'll give you a hint.", 
    "It's somewhere in this line.", 
    "Very good-- fake_results.", 
    "What did I set up fake_results to be?", 
    "I set it up to be an array containing two fake movies.", 
    "But does the method say it should make the TMDB search results consisting of", 
    "movies available to the template?", 
    "No, it just says it should make the TMDB search results", 
    "available to the template.", 
    "Fake_results could have been anything.", 
    "Well, anything non-nil, right?", 
    "Anything nontrivial.", 
    "It could have been a string saying, I am the answer.", 
    "Because the only thing that we're checking is that if that's the thing", 
    "that came back from the model, then it should be made available to the view.", 
    "Now in this case, I set it up just so that I could illustrate that here's", 
    "another thing you can do.", 
    "You can create stunt double objects that are enough just like a real", 
    "object that they can stand in in other tests.", 
    "And there's more examples in the book of how you use these.", 
    "But strictly speaking for this test, we didn't even need to do that.", 
    "All we needed to do is assign any nontrivial value to fake_results and", 
    "make sure that it comes out the other end when we do our controller action.", 
    "So from a purely, purely, purely, \"do the minimum that you can to test one", 
    "thing\" point of view, this is actually a little bit of overkill.", 
    "In this case, it's forgivable.", 
    "Because it sort of feels right to have the fake value be something that could", 
    "plausibly exist in your real app.", 
    "But again, it's a matter of engineering judgment there.", 
    "So we did really well, right?", 
    "We identified three things the controller action had to do.", 
    "We created three specs that test those things individually.", 
    "And in each one, we essentially mocked or stubbed out the behavior of all the", 
    "things we didn't care about.", 
    "So we've sort of introduced a couple of new concepts in this example.", 
    "Stub, which we introduced, is similar to should_receive, but it doesn't set", 
    "the expectation.", 
    "It just says, if you call me, this is what could happen.", 
    "It doesn't say that it's an error for me not to be called.", 
    "We also saw that you can use and_return to optionally control the", 
    "return value.", 
    "And you can use it with either should_receive or with stub.", 
    "We saw that you can use a mock to create a stunt double object that", 
    "doesn't really know anything about itself except that it claims to be an", 
    "impostor for some class.", 
    "And as we describe in the book examples, once you've created this", 
    "dumb object, you can endow it with a few abilities.", 
    "So if I created a mock for a movie, I could stub the title method on it and", 
    "return something reasonable.", 
    "Why would I do that?", 
    "Because there's a piece of code I'm testing that relies on calling m.title", 
    "and I need it to not barf.", 
    "I need it to do something sensible.", 
    "So I'm stubbing out the minimum necessary to isolate my one little", 
    "piece of behavior.", 
    "So this is kind of the key idea.", 
    "Each seam gives you just enough functionality to get through some", 
    "specific test that tests one thing and only one thing.", 
    "We can summarize all of this into what I'll call our first--", 
    "how do you do new tests?", 
    "First of all, you think of a spec that tests one behavior.", 
    "If you think of a whole bunch of specs at once, that's fine.", 
    "You could just use the it clauses with no code in between as a reminder, so", 
    "that they'll show up yellow.", 
    "They're not implemented yet.", 
    "They serve as a reminder that you have to write those tests.", 
    "When you're writing a test, use seams generously to isolate that behavior.", 
    "One thing you'll notice, by the way, is that this is an indicator of when", 
    "you've got bad code.", 
    "If you're trying to test a method and you find that before you can test it,", 
    "you've got 10 lines of mocks and stubs, that's called", 
    "a mock train wreck.", 
    "And it's a signal that the method you're trying to test does too much.", 
    "It relies on too many things.", 
    "And it is difficult to test all of its behaviors in isolation.", 
    "Determine which kind of expectations you'll need.", 
    "Are you going to check whether a method is being called?", 
    "Are you going to check the return value from something to see if it has", 
    "the correct value?", 
    "Create the test, which is going to fail.", 
    "It better fail, because you haven't written the code yet.", 
    "If it passes with no code, something is clearly wrong.", 
    "So make sure it fails for the right reason.", 
    "When we started out, remember the very first controller spec.", 
    "The first time it failed isn't because we had no code.", 
    "It's because we had no route in the routes file.", 
    "So when it fails, read the error message.", 
    "Make sure that it failed for the right reason.", 
    "A test that fails for the expected reason is gold.", 
    "It's just like debugging.", 
    "It's when you isolate the bug and you see, ah.", 
    "It's failing for the reason I thought.", 
    "Now I understand the problem.", 
    "That's the same attitude you need when you're doing testing.", 
    "You add code until the test is green.", 
    "And you look for opportunities to maybe factor common code into a", 
    "different module, maybe pull a few tests together into a group, all of", 
    "which rely on the same set of mocks or stubs.", 
    "So that's an opportunity to do a little bit of refactoring as you go,", 
    "rather than a lot of refactoring later.", 
    "We will have much more to say about refactoring when we talk", 
    "about legacy code.", 
    "So the test techniques we know have been augmented.", 
    "We've seen additional Rails-specific extensions to RSpec that let us check", 
    "things like are certain instance variables available in the view.", 
    "And we'll conclude with this question.", 
    "should_receive combines something and something, whereas stub is only this", 
    "other thing.", 
    "You have to parse this, so I'll give you a minute."
  ]
}