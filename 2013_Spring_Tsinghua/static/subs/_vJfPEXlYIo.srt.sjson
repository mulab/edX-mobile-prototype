{
  "start": [
    1020, 
    2600, 
    5210, 
    6740, 
    10730, 
    14320, 
    15860, 
    19060, 
    20690, 
    20980, 
    21820, 
    23740, 
    25310, 
    28960, 
    31200, 
    32890, 
    36090, 
    40070, 
    42080, 
    44810, 
    48330, 
    51140, 
    53970, 
    55030, 
    57060, 
    57860, 
    61520, 
    65030, 
    68000, 
    70200, 
    71140, 
    73230, 
    77060, 
    79980, 
    82320, 
    85230, 
    87920, 
    90960, 
    92500, 
    94950, 
    99030, 
    101250, 
    103250, 
    105040, 
    107360, 
    108880, 
    112810, 
    116510, 
    121380, 
    123030, 
    126210, 
    128680, 
    131510, 
    133040, 
    134090, 
    136640, 
    139870, 
    141240, 
    143080, 
    144660, 
    146200, 
    150340, 
    152890, 
    155730, 
    159330, 
    161160, 
    164550, 
    168520, 
    170560, 
    173120, 
    174290, 
    177650, 
    180400, 
    183280, 
    187600, 
    188250, 
    190640, 
    192230, 
    194720, 
    196110, 
    198010, 
    199790, 
    202900, 
    206820, 
    209360, 
    212830, 
    215030, 
    218050, 
    219860, 
    224730, 
    227470, 
    231150, 
    235800, 
    238540, 
    241600, 
    246410, 
    248740, 
    250180, 
    253490, 
    254620, 
    258910, 
    262210, 
    266250, 
    268440, 
    270995, 
    274960, 
    278380, 
    282670, 
    284780, 
    288370, 
    291590, 
    293530, 
    297670, 
    302680, 
    303790, 
    307830, 
    311310, 
    313700, 
    318690, 
    322160, 
    326140, 
    328090, 
    330670, 
    334590, 
    337180, 
    341190, 
    346870, 
    348150, 
    352660, 
    355480, 
    358590, 
    361980, 
    364920, 
    367430, 
    370510, 
    373350, 
    374740, 
    377160, 
    379230, 
    382440, 
    385630, 
    389040, 
    391150, 
    393380, 
    396950, 
    399090, 
    400460, 
    403580, 
    408900, 
    411900, 
    413810, 
    414940, 
    418700, 
    422050, 
    425930, 
    428600, 
    430620, 
    433950, 
    436520, 
    438600, 
    443160, 
    447360, 
    450410, 
    453420, 
    454200, 
    457580, 
    461170, 
    463580, 
    466850, 
    470330, 
    472785, 
    473850, 
    477430, 
    478690, 
    482590, 
    484660, 
    487340, 
    489710, 
    494060, 
    498800, 
    500780, 
    503020, 
    505470, 
    510030, 
    513580, 
    518159, 
    521250, 
    523520, 
    526510, 
    530570, 
    533550, 
    535220, 
    537190, 
    540770, 
    544060, 
    549610, 
    552220, 
    555490, 
    557870, 
    560390, 
    563610, 
    569090, 
    573030, 
    575470, 
    579100, 
    581060, 
    584720, 
    586390, 
    589470, 
    590830, 
    594000, 
    597530, 
    599100, 
    601570, 
    603640, 
    605330, 
    609970, 
    613370, 
    616080, 
    619140, 
    622050, 
    624190, 
    626600, 
    629250, 
    633270, 
    638270, 
    642400, 
    645430, 
    646500, 
    650890, 
    654630, 
    658470, 
    660390, 
    662090, 
    665430, 
    666510, 
    667390, 
    670380, 
    672010, 
    673110, 
    676700, 
    678850, 
    682510, 
    684590, 
    688310, 
    693290, 
    694380, 
    697930, 
    699220, 
    702890, 
    706390, 
    707720, 
    712440, 
    715260, 
    717920, 
    718940, 
    723300, 
    726860, 
    730660, 
    732220, 
    735720, 
    737740, 
    739870, 
    743010, 
    745610, 
    751110, 
    753520, 
    758100, 
    760910, 
    765070, 
    769970, 
    772210, 
    775500, 
    776920, 
    777870, 
    781690, 
    783750, 
    786480, 
    788110, 
    791040, 
    792260, 
    794150, 
    797740, 
    801330, 
    803540, 
    805240, 
    808540, 
    811620, 
    814940, 
    818500, 
    819750, 
    823470, 
    826610, 
    827600, 
    829140, 
    833350, 
    836250, 
    838570, 
    841730, 
    842970, 
    846840, 
    851890, 
    853740, 
    857210, 
    859390, 
    862380, 
    868290, 
    869940, 
    872020, 
    872950, 
    873900, 
    877990, 
    879960, 
    884150, 
    886380, 
    889430, 
    894130, 
    897460, 
    900210, 
    903510, 
    905390, 
    909540, 
    913020, 
    915310, 
    918460, 
    919520, 
    921740, 
    923020, 
    925300, 
    926710, 
    931450, 
    932400, 
    938380, 
    941680, 
    944620, 
    948470, 
    952830, 
    955530, 
    956730, 
    958920, 
    961850, 
    965100, 
    966710, 
    968330, 
    971740, 
    974890, 
    975970, 
    979180, 
    982370, 
    984930, 
    989760, 
    993200, 
    994160, 
    997690, 
    1001460, 
    1003550
  ], 
  "end": [
    2600, 
    5210, 
    6740, 
    10730, 
    14320, 
    15860, 
    19060, 
    20690, 
    20980, 
    21820, 
    23740, 
    25310, 
    28960, 
    31200, 
    32890, 
    36090, 
    40070, 
    42080, 
    44810, 
    48330, 
    51140, 
    53970, 
    55030, 
    57060, 
    57860, 
    61520, 
    65030, 
    68000, 
    70200, 
    71140, 
    73230, 
    77060, 
    79980, 
    82320, 
    85230, 
    87920, 
    90960, 
    92500, 
    94950, 
    99030, 
    101250, 
    103250, 
    105040, 
    107360, 
    108880, 
    112810, 
    116510, 
    121380, 
    123030, 
    126210, 
    128680, 
    131510, 
    133040, 
    134090, 
    136640, 
    139870, 
    141240, 
    143080, 
    144660, 
    146200, 
    150340, 
    152890, 
    155730, 
    159330, 
    161160, 
    164550, 
    168520, 
    170560, 
    173120, 
    174290, 
    177650, 
    180400, 
    183280, 
    187600, 
    188250, 
    190640, 
    192230, 
    194720, 
    196110, 
    198010, 
    199790, 
    202900, 
    206820, 
    209360, 
    212830, 
    215030, 
    218050, 
    219860, 
    224730, 
    227470, 
    231150, 
    232435, 
    238540, 
    241600, 
    246410, 
    248740, 
    250180, 
    253490, 
    254620, 
    258910, 
    262210, 
    266250, 
    268440, 
    270995, 
    274960, 
    278380, 
    282670, 
    284780, 
    288370, 
    291590, 
    293530, 
    297670, 
    302680, 
    303790, 
    307830, 
    311310, 
    313700, 
    318690, 
    322160, 
    326140, 
    328090, 
    330670, 
    334590, 
    337180, 
    341190, 
    346870, 
    348150, 
    352660, 
    355480, 
    358590, 
    361980, 
    364920, 
    367430, 
    370510, 
    373350, 
    374740, 
    377160, 
    379230, 
    382440, 
    385630, 
    389040, 
    391150, 
    393380, 
    396950, 
    399090, 
    400460, 
    403580, 
    408900, 
    411900, 
    413810, 
    414940, 
    418700, 
    422050, 
    425930, 
    428600, 
    430620, 
    433950, 
    436520, 
    438600, 
    443160, 
    447360, 
    450410, 
    453420, 
    454200, 
    457580, 
    461170, 
    463580, 
    466850, 
    470330, 
    472785, 
    473850, 
    477430, 
    478690, 
    482590, 
    484660, 
    487340, 
    489710, 
    494060, 
    498800, 
    500780, 
    503020, 
    505470, 
    510030, 
    513580, 
    518159, 
    521250, 
    523520, 
    526510, 
    530570, 
    533550, 
    535220, 
    537190, 
    540770, 
    544060, 
    549610, 
    552220, 
    555490, 
    557870, 
    560390, 
    563610, 
    569090, 
    573030, 
    575470, 
    579100, 
    581060, 
    584720, 
    586390, 
    589470, 
    590830, 
    594000, 
    597530, 
    599100, 
    601570, 
    603640, 
    605330, 
    609970, 
    613370, 
    616080, 
    619140, 
    622050, 
    624190, 
    626600, 
    629250, 
    633270, 
    638270, 
    642400, 
    645430, 
    646500, 
    650890, 
    654630, 
    658470, 
    660390, 
    662090, 
    665430, 
    666510, 
    667390, 
    670380, 
    672010, 
    673110, 
    676700, 
    678850, 
    682510, 
    684590, 
    688310, 
    693290, 
    694380, 
    697930, 
    699220, 
    702890, 
    706390, 
    707720, 
    712440, 
    715260, 
    717920, 
    718940, 
    723300, 
    726860, 
    730660, 
    732220, 
    735720, 
    737740, 
    739870, 
    743010, 
    745610, 
    751110, 
    753520, 
    758100, 
    760910, 
    765070, 
    769970, 
    772210, 
    775500, 
    776920, 
    777870, 
    781690, 
    783750, 
    786480, 
    788110, 
    791040, 
    792260, 
    794150, 
    797740, 
    801330, 
    803540, 
    805240, 
    808540, 
    811620, 
    814940, 
    818500, 
    819750, 
    823470, 
    826610, 
    827600, 
    829140, 
    833350, 
    836250, 
    838570, 
    841730, 
    842970, 
    846840, 
    851890, 
    853740, 
    857210, 
    859390, 
    862380, 
    868290, 
    869940, 
    872020, 
    872950, 
    873900, 
    877990, 
    879960, 
    884150, 
    886380, 
    889430, 
    894130, 
    897460, 
    900210, 
    903510, 
    905390, 
    909540, 
    913020, 
    915310, 
    918460, 
    919520, 
    921740, 
    923020, 
    925300, 
    926710, 
    931450, 
    932400, 
    938380, 
    941680, 
    944620, 
    948470, 
    952830, 
    955530, 
    956730, 
    958920, 
    961850, 
    963100, 
    966710, 
    968330, 
    971740, 
    974890, 
    975970, 
    979180, 
    982370, 
    984930, 
    989760, 
    993200, 
    994160, 
    997690, 
    1001460, 
    1003550, 
    1005660
  ], 
  "text": [
    "ARMANDO FOX: Unit tests give you higher confidence.", 
    "Well, they give you higher confidence of specific things.", 
    "But system correctness--", 
    "if there's one message of the world of test infrastructure, is that there's", 
    "no single kind of test that is a guarantor of system correctness.", 
    "You've got to do testing at all levels.", 
    "So, this is manifestly not true.", 
    "Mocking and stubbing early and often.", 
    "Yep.", 
    "You should do that.", 
    "We've seen several examples.", 
    "Aim for high unit test coverage.", 
    "Again, you shouldn't let yourself be obsessive about not releasing until", 
    "you have 100 percent, but that doesn't mean you shouldn't", 
    "aim for high coverage.", 
    "And what does high mean, 90 percent, 95 percent?", 
    "Again, use it as a tool to call attention to places where coverages is", 
    "surprisingly lacking.", 
    "And what about stubs and mocks in integration tests?", 
    "Well, although integration tests was supposed to be realistic, we saw an", 
    "example where we're calling out to TMDb.", 
    "If you had an integration test that relied on calling TMDb, you would", 
    "still want to stub that.", 
    "You don't want your integration test to actually use a", 
    "real internet service.", 
    "You would need to mock it out or stub out the service at that point.", 
    "So the idea of isolation always applies.", 
    "If you interact with other services, someday you're going to have to write", 
    "tests that check what happens when you interact with those", 
    "services in real life.", 
    "And at that point, you're going to be stubbing.", 
    "So this statement in red is correct.", 
    "So, our summary of TDD.", 
    "We've seen this cycle of red-green-refactor.", 
    "You start out with a test that fails because you don't have any code.", 
    "You write just enough code to get it to pass green.", 
    "You look for opportunities to beautify your tests as well as the code that", 
    "you just wrote, and then you go back.", 
    "And you keep doing that until you build up enough functionality, for", 
    "example, to get to a step in your Cucumber story.", 
    "The idea of unit tests is one behavior at a time.", 
    "That's why you have different kinds of seams.", 
    "You've learned about mocks and stubs.", 
    "You've learned about expectations, the fact that you can", 
    "control return values--", 
    "these are all ways to make sure that each test is testing only one thing.", 
    "And we saw an extreme example of this in the previous segment when we talked", 
    "about whether a particular value that gets set in the control room method is", 
    "properly passed through to view.", 
    "Remember when we were talking about this, we said, well we created a fake", 
    "movie because that seems like the right thing to do in this app.", 
    "But strictly speaking, if all we want to make sure is the value gets from", 
    "point A to point B, it could've been anything.", 
    "It could have been a strength, right.", 
    "We wouldn't have cared.", 
    "Remember that when we very first started our discussion of RSpec, we", 
    "had a bunch of it's.", 
    "It should do this, it should do that.", 
    "They didn't have any code associated with them.", 
    "They were just placeholders.", 
    "It's OK to have place holders that don't have code yet to remind yourself", 
    "that there's tests you know you have to write.", 
    "You'll find that there's also a keyword pending that you can use in", 
    "RSpec, which you can put into the body of a test to give yourself a message", 
    "as to why this test isn't written yet.", 
    "For example, maybe it's a functional test, and it's waiting for somebody", 
    "else's functionality that they haven't committed to the project yet, and", 
    "until they committed, you won't know what the API is, so you", 
    "can't write the test.", 
    "Coverage reports--", 
    "when you run SimpleCov, which you'll do as part of one of the next", 
    "homeworks, understand what the report's trying to tell you.", 
    "It gives you very detailed information, literally line by line,", 
    "like, which lines of your code were executed or were not executed by this", 
    "test suite.", 
    "That's your information for figuring out where you should", 
    "concentrate your effort.", 
    "And don't rely too heavily on any one kind of test.", 
    "This is defense in depth.", 
    "The bugs that are missed by one are probably going to be", 
    "caught by another one.", 
    "This is our TDD summary and philosophy.", 
    "We're going to start talking about the first in a handful of advanced topics.", 
    "Now that you've seen the very basics of model view controller.", 
    "You've seen how to think about testing in this environment.", 
    "Now it's time to start getting to the good stuff, which is how to be more", 
    "productive, how to make code more beautiful, how to dry it out.", 
    "Remember, dry is, don't repeat yourself.", 
    "Drying out your code is finding places where a naive programmer would repeat,", 
    "or cut and paste, or almost cut and paste blocks of code.", 
    "But we want to find ways to factor it out, so that each useful piece of code", 
    "appears in exactly one place.", 
    "Rails provides a bunch of ways to do this, but before we dive into the", 
    "mechanisms, let's set the context with some big ideas.", 
    "The whole idea behind software engineering as a discipline is, make", 
    "people more productive by letting them reuse code at", 
    "various different levels.", 
    "So if you have different applications, they might be able to reuse libraries", 
    "or modules.", 
    "Within the same application, you might want to create helpers or sub-classes", 
    "the capture commonly used methods.", 
    "We saw that Ruby provides methods like mixins, so that behaviors can be", 
    "applied to a variety of different classes, a little bit like", 
    "interfaces in Java.", 
    "But the more challenging one is when you have cross-cutting concerns, and", 
    "idea that there's some behavior that you'd like to be logically", 
    "centralized, but it appears in multiple quite different places in the", 
    "implementation of your app.", 
    "The first example we're going to talk about is an example of how Rails uses", 
    "Ruby features to handle two different kinds of cross-cutting concerns.", 
    "What's the problem with cross-cutting concerns?", 
    "Well, we'll start with a little bit of history.", 
    "Last time, I showed an article from the 1960 issue of", 
    "\"Communications\" of the ACM.", 
    "This was a letter to the editor only a few years later.", 
    "And this is from a computer scientist whose picture we've seen before.", 
    "This article is now somewhat famous.", 
    "And this was the first forceful argument in favor of what we now think", 
    "of as structured programming, where, instead of having gotos that break you", 
    "out of a block of code, you've got block constructs with if and else.", 
    "Today this is sort of the way we program.", 
    "But if you look at the early high-level languages, if you look at", 
    "Fortran and, heaven forbid, BASIC, which I cut my teeth on, there isn't", 
    "really block programming in the sense that we think of it now.", 
    "You used go to's and go subs to actually jump around in the code.", 
    "And this was an impassioned condemnation of that style of", 
    "programming.", 
    "So a few years after that, there was a parody piece--", 
    "that you can still look up if you have \"The New Hacker's Dictionary.", 
    "It's called the Jargon File, and you can Google that online.", 
    "The parody was, come from statement considered harmful.", 
    "It was a fictional language construct where you would have a piece of code", 
    "preceded by come from something.", 
    "So the idea was, over somewhere else in the code, whenever you got to that", 
    "label, it would mysteriously without explanation jump to", 
    "the come from block.", 
    "And then the from block would execute and eventually control would be", 
    "returned-- so it was a parody.", 
    "But all parodies have a grain of truth in them.", 
    "The idea was if you're just reading the code over in the main part of the", 
    "application, there would be no way for you to know just by looking at it,", 
    "that at some point, it was magically going to jump over to", 
    "the come from section.", 
    "As it turns out, come from sort of became a thing.", 
    "Oh, by the way we saw this guy before.", 
    "This time I'll get it right.", 
    "Edsger Dijkstra, influential in the development of ALGOL, arguably the", 
    "first block-structured language, not the development of another language.", 
    "So, come from exists, except it has a better name.", 
    "It's aspect-oriented programming.", 
    "And it's well-intentioned.", 
    "The idea is exactly to allow you to centralize the expression of", 
    "cross-cutting concerns instead of repeating them all over the place.", 
    "The idea is, an advice is a piece of code and that has something to do with", 
    "a cross-cutting concerns, something that you might want to take advantage", 
    "of for many different places in the app.", 
    "Pointcuts are the places in your app where you might want to inject that", 
    "behavior, but you don't want to inject it in every place because that would", 
    "be not dry.", 
    "If the combination of an advice and a set of pointcuts is an aspect, and the", 
    "idea is that you can use these to dry out your code, the problem is that", 
    "depending on how you express this syntactically, it can turn out just", 
    "like come from where all of a sudden, there's nothing about the linear", 
    "ordering of the code.", 
    "There's no clue that execution will jump to a random place.", 
    "And obviously, you can imagine, this might be hard to debug.", 
    "If you think that you're executing code in a certain order, but that", 
    "what's really happening is at some point it's magically jumping somewhere", 
    "else and then jumping back, and that the error you're experiencing is not", 
    "in your code, but in the stuff that it jumped to, you can see how", 
    "it could get ugly.", 
    "So as with many things in software engineering, this is a power tool.", 
    "AOP is a power tool.", 
    "And if you use it wisely and think carefully about the implications for", 
    "debugging, it can dry out your code.", 
    "If you use it badly, it can make your life a living hell.", 
    "Let's look at an example, shall we?", 
    "The first example of this in Rails is validations, which is a great idea.", 
    "The idea is that, when I declare a type of model, like a movie, I might", 
    "want to have some constraints about what makes it valid.", 
    "For example, the title of the movie can't be blank.", 
    "That would be a simple example.", 
    "The way that you might naively program this is, every place in the code that", 
    "a user could try to modify a movie record, you would have to somehow", 
    "insert a set of checks, or at least a call to a checking function, that can", 
    "actually figure out if this object is valid or not.", 
    "So in this sense, validation is advice.", 
    "In the aspect-orienting programming sense, there's many places it could be", 
    "called, many places that a model could have its values updated, and you don't", 
    "want to include that explicit code in every place.", 
    "You want include it indirectly.", 
    "So how do we do this?", 
    "Let's take a look at a piece of code that actually implements this, and", 
    "then compare it to this idea of aspects and pointcuts.", 
    "Here is some simple code that sets up a few different", 
    "validations for a movie.", 
    "We can say that the title of the movie has to be present, in other words, it", 
    "can't have a blank title.", 
    "It has to have a release date.", 
    "We can actually have custom validations, that if we only want to", 
    "deal with movies released after 1929, we can create our own method.", 
    "And unless the release date of the movie meets our criteria, we can add", 
    "an error to the movie.", 
    "We could say that the rating has to be included in this list", 
    "of ratings up here.", 
    "Or we could even say, well, unless the movie is grandfathered.", 
    "What makes a movie grandfathered?", 
    "Well, there's a specific date on which the MPAA movie rating", 
    "system went into effect.", 
    "So obviously, any movie made before that date can't have a rating.", 
    "And for those movies, we don't want to mark them as invalid just because they", 
    "were released before that date.", 
    "So here's a set of constraints--", 
    "and by the way, as with everything we've seen so far, these are just", 
    "regular old method calls--", 
    "now the question is, if these are kinds of advice, a cross-cutting", 
    "concern that we want to take account of in many different places in the", 
    "application, where are the pointcuts?", 
    "Where are the places in the application at which we would want to", 
    "check these things and take some action?", 
    "So let's look at that.", 
    "The life cycle of a model object--", 
    "one of the things that Active Record gives us, is it gives us a", 
    "well-defined set of phases that a model goes through.", 
    "When you first create something, for example, there's a set of calls in", 
    "link in the case of an existing movie, if you call save on an existing movie,", 
    "there's the Save method, which is actually the active record based on if", 
    "it gets called.", 
    "But one of the first things the Save method does, is it calls a before", 
    "validation method if one exists, and depending on whether you're creating a", 
    "new movie or saving an existing movie, there's also a hook called before", 
    "validation on update.", 
    "This is where the validations get run.", 
    "So the statements that I put about what makes a movie valid, this is the", 
    "place where they happen.", 
    "after.", 
    "These two hooks are run, then my stuff is run.", 
    "There's an after-validation hook.", 
    "There's a before-save hook.", 
    "And then, finally, the database gets touched.", 
    "So these are well-defined points.", 
    "And they're well-defined because Active Record has made the choice of", 
    "exposing these points.", 
    "If I actually wanted a point that--", 
    "if I want another point that was after validation but before creation, then", 
    "I'm out of luck.", 
    "Without modifying Rails itself, I don't have access to what happens at", 
    "that point in time.", 
    "But Active Record has chosen to expose these points.", 
    "And what they have in common is that there's a particular point at which", 
    "the validations are run.", 
    "So that means that any point in my app that eventually calls save is", 
    "eventually going to run my validations.", 
    "So from the aspect-oriented programming point of view,", 
    "what does this mean?", 
    "It means that any method that modifies a model object, because it has to go", 
    "through Active Record and because ultimately, it calls Active Record's", 
    "save method, those are all the places where validations can get triggered.", 
    "So that's the pointcut.", 
    "The pointcut is, either of these two paths, these are well-defined things", 
    "that happen, and that's where validations run.", 
    "But this is exactly an aspect.", 
    "Because any place in your app, no matter which controller action is", 
    "trying to update or save the movie, it's eventually got to go down this", 
    "path, and that's where the validations get to kick in.", 
    "You can also trigger validations explicitly if you want.", 
    "You can an instance of an Active Record model and call valid on it.", 
    "And what happens if it's invalid?", 
    "Well, if you did it by call and save, the save will fail.", 
    "And there's an errors object that is one of the attributes of the model", 
    "that contains a bunch of information about what went wrong.", 
    "Which of the validations that you stated didn't actually get passed for", 
    "this object.", 
    "Why is this important?", 
    "Why is it the case that you need to carry around the errors", 
    "along with the object?", 
    "because the place that validations gets called is", 
    "basically from this pointcut.", 
    "By the time that validations are called, you don't have access to what", 
    "happened to the object.", 
    "It happens in the middle of this flow.", 
    "And at the end of the flow, either the object gets saved in the database, or,", 
    "if it was invalid, the save is aborted and it just returns to you.", 
    "You need a place to capture what all happened.", 
    "This is a pattern that you'll see a lot.", 
    "Whenever Rails gives you a declarative way to do something that's an aspect--", 
    "meaning, you're going to declare what to do but you're not going to declare", 
    "when to do it-- there's well-defined points were Rails will do it for you.", 
    "But if something goes wrong, you need a place to capture information about", 
    "what went wrong.", 
    "In the case of the validations system, where you capture it is an Active", 
    "Record areas object that actually has a lot of cool behaviors that are worth", 
    "looking into.", 
    "But this is a pattern you'll see.", 
    "There's a pointcut, there's an advice, which you provide in your code, and", 
    "there's a place to remember the result of what happens when", 
    "the advice was applied.", 
    "Another example, which follows a very similar pattern, is the example of", 
    "controller filters.", 
    "If we take a look at an example controller filter, here's an example", 
    "of a controller filter that fictitiously checks whether somebody's", 
    "actually correctly logged in.", 
    "You can imagine in your software as a service app, there's certain actions", 
    "that you can't do unless you've already logged in.", 
    "And we'll talk about how you implement things like authentication next week.", 
    "But here's a filter that says unless I'm logged in, or unless I'm actually", 
    "doing login action--", 
    "and obviously you can't say that in order to log in, you", 
    "have to be log in.", 
    "That will be bad--", 
    "but unless I'm doing the login action, the before filter will run before", 
    "every controller action in this controller.", 
    "And if current users doesn't evaluate to something non-nil--", 
    "in other words, if the user really isn't logged in--", 
    "then I'll redirect him to the login page immediately.", 
    "So again, this is an example of an advice, because every controller", 
    "action is going to be affected by this, except for the login action,", 
    "because I explicitly said omit it for that one.", 
    "So this is another example of an advice.", 
    "And where is the pointcut for this?", 
    "It's just before any controller action runs.", 
    "A difference between controller filters and validations is that a", 
    "validation doesn't change the flow of control.", 
    "The worst that can happen if a validation fails is that the database", 
    "doesn't get updated.", 
    "But in the case of a controller filter, it", 
    "changes the flow of execution.", 
    "Because if the before filter fails, you don't want the", 
    "controller action to run.", 
    "However, as we know, in request-reply applications, you have to have a", 
    "render for everything.", 
    "So you'll see that if you look up the documentation for how filters work,", 
    "that you can call redirect to immediately redirect to another page.", 
    "Or you could call render to show the user some error page.", 
    "But since the filter can change the flow of execution, it has to give you", 
    "a way to determine what should happen when something actually goes wrong.", 
    "But the key here is-- these two things are more alike", 
    "than they are different.", 
    "both of them are an advice.", 
    "Both of them are executed a very specific point in the code.", 
    "Those are the pointcuts.", 
    "Filters can change execution flow.", 
    "Validations can't.", 
    "In both cases, you can provide an arbitrary function that implements the", 
    "advice, or you can do arbitrarily sophisticated checks for what you want", 
    "the advice to be.", 
    "And in both cases, you can do something to capture the information", 
    "about what went wrong so you can either show it to the user or take", 
    "some action on it", 
    "Ruby is not a language that has aspect orientation built into it, but Ruby's", 
    "features are used by validations and filters to give you a limited subset", 
    "of aspects.", 
    "They've defined what the pointcuts are and what the kinds of advice are.", 
    "And when we talk about design patterns, we'll see more of them.", 
    "Because of the limit of time, let's stop here.", 
    "And we will finish this section and continue next time."
  ]
}