{
  "start": [
    410, 
    630, 
    2020, 
    4730, 
    6310, 
    7070, 
    8820, 
    11730, 
    12960, 
    15740, 
    17230, 
    20040, 
    22660, 
    25480, 
    26680, 
    31630, 
    34480, 
    36890, 
    40170, 
    42210, 
    47530, 
    50870, 
    53270, 
    55940, 
    60140, 
    61580, 
    64800, 
    66350, 
    69690, 
    70680, 
    73570, 
    74350, 
    75370, 
    77320, 
    78720, 
    81580, 
    82620, 
    83370, 
    87530, 
    88910, 
    91920, 
    93730, 
    94760, 
    95430, 
    96030, 
    98680, 
    105850, 
    111150, 
    114530, 
    114940, 
    117160, 
    118410, 
    122215, 
    124540, 
    125180, 
    127870, 
    130812, 
    133560, 
    135760, 
    137120, 
    138710, 
    141500, 
    144410, 
    145530, 
    148840, 
    151670, 
    154490, 
    155070, 
    158160, 
    159610, 
    162240, 
    163560, 
    167630, 
    169040, 
    171840, 
    175710, 
    177380, 
    178430, 
    179690, 
    180750, 
    182800, 
    185040, 
    185990, 
    189800, 
    190660, 
    193120, 
    194600, 
    196930, 
    200110, 
    202670, 
    206690, 
    209050, 
    210250, 
    213240, 
    216720, 
    217670, 
    220380, 
    222890, 
    226140, 
    229140, 
    231010, 
    234060, 
    237280, 
    240840, 
    242200, 
    244370, 
    248560, 
    250540, 
    252040, 
    253360, 
    257899, 
    261410, 
    265450, 
    267770, 
    270330, 
    274090, 
    274950, 
    278920, 
    281520, 
    282400, 
    284930, 
    287110, 
    290430, 
    292520, 
    295660, 
    297810, 
    299470, 
    303110, 
    306590, 
    311120, 
    314980, 
    316730, 
    320310, 
    321830, 
    325880, 
    329130, 
    331570, 
    332660, 
    335900, 
    338110, 
    338850, 
    343470, 
    345210, 
    347280, 
    352850, 
    356050, 
    363600, 
    367120, 
    368900
  ], 
  "end": [
    630, 
    2020, 
    4730, 
    6310, 
    7070, 
    8820, 
    11730, 
    12960, 
    15740, 
    17230, 
    20040, 
    22660, 
    25480, 
    26680, 
    31630, 
    34480, 
    36890, 
    40170, 
    42210, 
    47530, 
    50870, 
    53270, 
    55940, 
    60140, 
    61580, 
    64800, 
    66350, 
    69690, 
    70680, 
    73570, 
    74350, 
    75370, 
    77320, 
    78720, 
    81580, 
    82620, 
    83370, 
    87530, 
    88910, 
    91920, 
    93730, 
    94760, 
    95430, 
    96030, 
    98680, 
    105850, 
    111150, 
    114530, 
    114940, 
    117160, 
    118410, 
    122215, 
    124540, 
    125180, 
    127870, 
    130812, 
    133560, 
    135760, 
    137120, 
    138710, 
    141500, 
    144410, 
    145530, 
    148840, 
    151670, 
    154490, 
    155070, 
    158160, 
    159610, 
    162240, 
    163560, 
    167630, 
    169040, 
    171840, 
    175710, 
    177380, 
    178430, 
    179690, 
    180750, 
    182800, 
    185040, 
    185990, 
    189800, 
    190660, 
    193120, 
    194600, 
    196930, 
    200110, 
    202670, 
    206690, 
    209050, 
    210250, 
    213240, 
    216720, 
    217670, 
    220380, 
    222890, 
    226140, 
    229140, 
    231010, 
    234060, 
    237280, 
    240840, 
    242200, 
    244370, 
    248560, 
    250540, 
    252040, 
    253360, 
    257899, 
    261410, 
    265450, 
    267770, 
    270330, 
    274090, 
    274950, 
    278920, 
    281520, 
    282400, 
    284930, 
    287110, 
    290430, 
    292520, 
    295660, 
    297810, 
    299470, 
    303110, 
    306590, 
    311120, 
    314980, 
    316730, 
    320310, 
    321830, 
    325880, 
    329130, 
    331570, 
    332660, 
    335900, 
    338110, 
    338850, 
    343470, 
    345210, 
    347280, 
    352850, 
    356050, 
    363600, 
    367120, 
    368900, 
    371240
  ], 
  "text": [
    "OK.", 
    "So let's go through these.", 
    "First one.", 
    "This is OK, right?", 
    "Why?", 
    "Well, here's a function call.", 
    "Poetry mode says we can leave the parentheses out from the arguments.", 
    "That's no problem.", 
    "First argument is A. Second argument is clearly", 
    "delimited by the hash braces.", 
    "So this hash is the second argument.", 
    "And the third argument is a hash of one element.", 
    "And because of its argument position, we can leave out the braces.", 
    "So why is this the case?", 
    "Well, here's the first argument, A. But what's this?", 
    "One way you could look at it is say well the interpreter's got no way to", 
    "tell that ...", 
    "where does one hash end and another hash begin, right-- like which keys", 
    "and values do these belong to?", 
    "However, keep in mind that unlike, for example, languages like Java, the", 
    "types of function arguments don't matter in Ruby.", 
    "So in fact, all that really matters is the number of arguments.", 
    "The way that the interpreter parses this green one", 
    "is: this entire argument is sucked up as being a single hash.", 
    "And in and of itself, there's nothing wrong with that.", 
    "The problem is that it's the wrong number of arguments for foo, which", 
    "expects three arguments.", 
    "So whereas there are languages where the interpreter or the compiler might", 
    "give you a different error here.", 
    "What happens in Ruby is, there's nothing syntactically wrong with this", 
    "as a function call.", 
    "It's perfectly legal.", 
    "It just happens to be that the function you're calling", 
    "expected three arguments.", 
    "And this parses out as two arguments.", 
    "OK with everybody?", 
    "Cool?", 
    "And then for these last two, again, here we've eschewed poetry mode.", 
    "And we put in the parens.", 
    "And we've got our argument number one, number two, and number three.", 
    "And then the blue choice-- same thing.", 
    "Except we've blocked out the function arguments.", 
    "So those are golden.", 
    "Yes, question.", 
    "[INAUDIBLE]", 
    "The question was: what if you, let's say in this top example, you put a", 
    "bracket around z 3 and not around this middle hash.", 
    "Anybody want to take a guess as to whether that would be legal or not?", 
    "OK.", 
    "The no's have it.", 
    "Why is that though?", 
    "It's because once again, suppose you left out these braces around x and y.", 
    "OK, you got braces around z 3.", 
    "That's good.", 
    "That means that's a hash with just one key value pair.", 
    "But would that be two hashes or would it be one hash?", 
    "And in that case, there's really no way for the parser to tell us.", 
    "So that would confuse the parser.", 
    "Good question, though--", 
    "so good that it might appear on a quiz.", 
    "That's a pro tip, kids.", 
    "Let's talk about object-oriented programming, which fortunately you", 
    "already all know.", 
    "Because you know Java and/or some other object-oriented language.", 
    "It said you had to, to sign up for the class.", 
    "That means that we can do this pretty fast because all of these concepts are", 
    "familiar to you.", 
    "We just have to sort of see how Ruby handles them differently compared to", 
    "how Java would handle it.", 
    "So let's start with a canonical example of doing a", 
    "bank savings account.", 
    "You need a constructor, which gives you back an element of that class, or", 
    "an instance of that class.", 
    "In Ruby constructors, by default, are called initialize.", 
    "That means that when I call savingsaccount.new, it's going to look", 
    "for a method called initialize.", 
    "And that's the constructor.", 
    "Why?", 
    "Just because.", 
    "It's one of these idiosyncrasies you just got to get used to.", 
    "Now you can define your own constructors that do", 
    "various other things.", 
    "But the default constructor when you call it using new has to be called", 
    "initialize.", 
    "Just remember that.", 
    "How would we initialize a bank account?", 
    "Well, we could pass it a starting balance.", 
    "But we can define our function in such a way that says if I don't pass any", 
    "argument, give it a default value of zero.", 
    "So it would be legal to call new on savings account without any argument.", 
    "And in that case, what would happen is, it will be the same as calling it", 
    "with an argument of zero.", 
    "This is how you can do default argument values in Ruby.", 
    "And we're going to initialize an instance variable to be whatever that", 
    "starting balance was.", 
    "An @ sign is how you designate an instance variable.", 
    "Now in some languages like Java, you can make decisions about whether", 
    "instance variables are visible outside the class, or they're public, or", 
    "visible only inside the class, or they're private or protected.", 
    "There's no such distinction in Ruby.", 
    "They're only visible inside the class ever.", 
    "The only way you could make them visible for outside the class is to", 
    "define explicit accessors, or some languages like Java also call them", 
    "getter methods.", 
    "So what does the balance accessors do?", 
    "It just returns the value of the balance instance variable.", 
    "So @balance is an instance variable.", 
    "Balance is a method.", 
    "You don't have to give them the same name.", 
    "But hey, why violate people's expectations right?", 
    "So as I said, the instance variable itself, @balance, you can't even refer", 
    "to it outside of the savings account class.", 
    "Languages like Java also provide a way to set these.", 
    "They're called mutators or setters.", 
    "And remember that we can give method names in Ruby, names", 
    "that end with equals.", 
    "That means that this is a method that is intended to mutate something.", 
    "So we're going to define a method called balance equals.", 
    "And that's its name, right?", 
    "That's different from the balance method, which is totally separate.", 
    "This is the balance equals method.", 
    "And predictably, it's going to just set the balance to whatever you pass", 
    "as the new amount, so no surprises there.", 
    "We can deposit stuff by adding an amount.", 
    "We can also set class variable names.", 
    "This is what Java calls statics.", 
    "This is a variable that no matter which instance of the class examines", 
    "it, it'll have the same value, as opposed to balance, which will have", 
    "its own value for every instance of a bank account we create, as is proper.", 
    "And we can define a class method, a class accessor method, if you want, to", 
    "retrieve the value of this.", 
    "Just like instance variables, static or class variables are not visible at", 
    "all from outside the class.", 
    "So you have to define an accessor method in order to get at it.", 
    "If you haven't used Ruby before, you're probably saying: how is it a", 
    "language that prides itself on being concise and beautiful", 
    "requires you to do this?", 
    "And in just a moment, we're going to get to why you don't really have to do", 
    "this most of the time.", 
    "OK?", 
    "So that's your typical bank account class, very few surprises here.", 
    "If you're coming from a language like Java, it's almost", 
    "a one-to-one mapping.", 
    "Now putting this together with what we said before about a.b, and what that", 
    "means in Ruby, and how it doesn't mean what it means in Java, keeping all", 
    "those things in mind, which one or ones of these are correct?", 
    "I'll leave it to you to interpret what correct is.", 
    "Are all three of them correct?", 
    "Or is there only a subset of them that are correct?"
  ]
}