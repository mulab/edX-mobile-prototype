{
  "start": [
    820, 
    2710, 
    5920, 
    7590, 
    8870, 
    13430, 
    17070, 
    19260, 
    21880, 
    25970, 
    31080, 
    32619, 
    35310, 
    38650, 
    40100, 
    44980, 
    47430, 
    48260, 
    53420, 
    55760, 
    58800, 
    60800, 
    64330, 
    67100, 
    70210, 
    70670, 
    72380, 
    73650, 
    77810, 
    79930, 
    82480, 
    84010, 
    89190, 
    94680, 
    95690, 
    95920, 
    99200, 
    100720, 
    105000, 
    106040, 
    109560, 
    110650, 
    112960, 
    115410, 
    116470, 
    119350, 
    121960, 
    123550, 
    128470, 
    133170, 
    134760, 
    137940, 
    142100, 
    145030, 
    147620, 
    150260, 
    153890, 
    156710, 
    157630, 
    162640, 
    164210, 
    164890, 
    168910, 
    171980, 
    174730, 
    175260, 
    178690, 
    180100, 
    182090, 
    186340, 
    190320, 
    191560, 
    193590, 
    195100, 
    197740, 
    199930, 
    201330, 
    202850, 
    205730, 
    209320, 
    210280, 
    213780, 
    214010, 
    216930, 
    218470, 
    218950, 
    221090, 
    224860, 
    227790, 
    230080, 
    234550, 
    237480, 
    241390, 
    242420, 
    244060, 
    247060, 
    249980, 
    253390, 
    254900, 
    258279, 
    262240, 
    263670, 
    266740, 
    268540, 
    270400, 
    273950, 
    276320, 
    277115, 
    279330, 
    280670, 
    284560, 
    286680, 
    289210, 
    289980, 
    291790, 
    293160, 
    297030, 
    299750, 
    302670, 
    304850, 
    306810, 
    308390, 
    310890, 
    311980, 
    313600, 
    316100, 
    317560, 
    320900, 
    322380, 
    323650, 
    327160, 
    330190, 
    332600, 
    336440, 
    337880, 
    341140, 
    342100, 
    343240, 
    345520, 
    348900, 
    352950, 
    354760, 
    355460, 
    356180, 
    358670, 
    360490, 
    363390, 
    364450, 
    369540, 
    371290, 
    376120, 
    379830, 
    382560, 
    385490, 
    387130, 
    388500, 
    388880, 
    390740, 
    391470, 
    394370, 
    395750, 
    398110, 
    399170, 
    402280, 
    402910, 
    404440, 
    406460, 
    407510, 
    409970, 
    414630, 
    415680, 
    419370
  ], 
  "end": [
    2710, 
    5920, 
    7590, 
    8870, 
    13430, 
    17070, 
    19260, 
    21880, 
    25970, 
    31080, 
    32619, 
    35310, 
    38650, 
    40100, 
    44980, 
    47430, 
    48260, 
    53420, 
    55760, 
    58800, 
    60800, 
    64330, 
    67100, 
    70210, 
    70670, 
    72380, 
    73650, 
    77810, 
    79930, 
    82480, 
    84010, 
    89190, 
    94680, 
    95690, 
    95920, 
    99200, 
    100720, 
    105000, 
    106040, 
    109560, 
    110650, 
    112960, 
    115410, 
    116470, 
    119350, 
    121960, 
    123550, 
    128470, 
    133170, 
    134760, 
    137940, 
    142100, 
    145030, 
    147620, 
    150260, 
    153890, 
    156710, 
    157630, 
    159730, 
    164210, 
    164890, 
    168910, 
    171980, 
    174730, 
    175260, 
    178690, 
    180100, 
    182090, 
    186340, 
    190320, 
    191560, 
    193590, 
    195100, 
    197740, 
    199930, 
    201330, 
    202850, 
    205730, 
    209320, 
    210280, 
    213780, 
    214010, 
    216930, 
    218470, 
    218950, 
    221090, 
    224860, 
    227790, 
    230080, 
    234550, 
    237480, 
    241390, 
    242420, 
    244060, 
    247060, 
    249980, 
    253390, 
    254900, 
    258279, 
    262240, 
    263670, 
    266740, 
    268540, 
    270400, 
    273950, 
    276320, 
    277115, 
    279330, 
    280670, 
    284560, 
    286680, 
    289210, 
    289980, 
    291790, 
    293160, 
    297030, 
    299750, 
    302670, 
    304850, 
    306810, 
    308390, 
    310890, 
    311980, 
    313600, 
    316100, 
    317560, 
    320900, 
    322380, 
    323650, 
    327160, 
    330190, 
    332600, 
    336440, 
    337880, 
    341140, 
    342100, 
    343240, 
    345520, 
    348900, 
    352950, 
    354760, 
    355460, 
    356180, 
    358670, 
    360490, 
    363390, 
    364450, 
    366250, 
    371290, 
    376120, 
    379830, 
    382560, 
    385490, 
    387130, 
    388500, 
    388880, 
    390740, 
    391470, 
    394370, 
    395750, 
    398110, 
    399170, 
    402280, 
    402910, 
    404440, 
    406460, 
    407510, 
    409970, 
    414630, 
    415680, 
    419370, 
    420620
  ], 
  "text": [
    "ARMANDO FOX: One of the nice side effects that you get out of this is", 
    "what some people call expression orientation.", 
    "You can chain things together.", 
    "So, I have an array.", 
    "I can call sort on that array, I can also call a function uniq, which", 
    "returns a copy of the array with the duplicate elements removed, and then I", 
    "can call reverse on the result of that.", 
    "And remember, these are all non destructive.", 
    "So calling x.uniq.reverse doesn't change x itself.", 
    "Each method call creates a new copy of the object and, ultimately, returns", 
    "the result of applying them all.", 
    "So, you get used to seeing these chains of method calls separated by", 
    "dots, and you get used to reading them.", 
    "They're actually pretty easy to read.", 
    "Reverse has a dangerous version, x.reverse!, which actually does modify", 
    "the array in place.", 
    "There's map.", 
    "Again, if you remember scheme or even Python, I can take the collection x,", 
    "and for each element of the collection, I can perform some", 
    "operation on it and get back a new collection which is the result of", 
    "applying the operation on each element.", 
    "What's not so obvious from this example, is that--", 
    "and this is something we'll cover in the next lecture--", 
    "map is not actually a method in the array class.", 
    "No.", 
    "That would be not elegant.", 
    "Why is it not elegant?", 
    "Because the idea of taking a collection and mapping a function onto", 
    "it goes way beyond just an array.", 
    "I mean, you could do it for a range, you to do it for a binary tree, you", 
    "could do it for a hash table.", 
    "So, as we'll see, there's actually a mechanism that lets us define map in", 
    "such a way that says, hey, as long as my receiver implements each, then I'll", 
    "do my thing.", 
    "Right?", 
    "It's a small step from understanding this simple example to", 
    "saying, I can imagine--", 
    "if I knew that x had an each method on it, I could write map myself, right?", 
    "It's pretty simple.", 
    "All I would do is, I would say, x.each and I would just pass the same", 
    "function to that.", 
    "And, roughly speaking, that's what map does.", 
    "So that concept which we're going to do in detail next time is", 
    "called a mix in.", 
    "And it allows us to define functionality in a way that doesn't", 
    "care about what the type of its receiver is, it just cares if its", 
    "receiver can do certain things.", 
    "Or, in Ruby terms, respond to certain methods.", 
    "I can do collections, which means I can take all of the elements for which", 
    "this predicate is true.", 
    "Again, if you've seen scheme, this looks a lot like the scheme examples.", 
    "I can ask if this predicate is true of any element in the collection.", 
    "And if I wanted to do a real life example, what's nice about this", 
    "expression orientation is I can chain things together.", 
    "I can keep using dots to chain stuff.", 
    "Just for fun, I'll show you a real life example.", 
    "This is some code that I wrote whose primary goal was not to be elegant.", 
    "It was to get a job done.", 
    "So give me some slack.", 
    "Anybody have a clipper card?", 
    "Clipper card?", 
    "I have one, and I'm too lazy to go to their site and figure out my value so", 
    "I just wrote a script that mechanizes that job.", 
    "And I have a little QR code sticker that I made and I put it on the back", 
    "of my card.", 
    "So whenever I take a picture of my card my iPhone shows the value.", 
    "That's how lazy I am.", 
    "OK?", 
    "But, here's the code that actually does it, and it's based on a library", 
    "called mechanize that can retrieve pages from a remote server and parse", 
    "them and interact with them.", 
    "So here, what I'm saying is--", 
    "this is the URL of the clipper site.", 
    "You can do some simple reverse engineering to see how the site works.", 
    "I've blanked out my password.", 
    "So what is the amount?", 
    "I create a new mechanized object.", 
    "And by the way, notice that I can intersperse new lines in here as much", 
    "as I want, because the parser knows that a dot can't be the", 
    "legal end of a statement.", 
    "So it'll keep reading past the dot, skipping over my comments.", 
    "Right?", 
    "I can actually write-- this is all one long expression.", 
    "This whole thing.", 
    "OK?", 
    "So, I'm taking a new mechanized object.", 
    "I'm calling post on it to get the initial web page that returns that", 
    "page with saying, welcome to clipper.", 
    "Click here to see your balance.", 
    "And on that page, I'm calling a method that looks for a link that has an h", 
    "ref that matches this regular expression.", 
    "And when I find that link, I will click it, and then on the return--", 
    "what do I get when I click a link?", 
    "Well, I get another page back.", 
    "On that page I'm going to invoke parser, which creates a new parser", 
    "object, which understands how to parse XML.", 
    "And I'm going to look for a table row containing a table column containing", 
    "the words clipper cash.", 
    "And once I find it, I'm going to get the first element of that and traverse", 
    "its two children, get the content, and make sure that I capture the dollar", 
    "amount in a regular expression.", 
    "And then I just return that wrapped in a simple HTML wrapper.", 
    "This is ultimate expression orientation.", 
    "That's one statement, guys.", 
    "Now, again, you could say well, who can read a statement that long?", 
    "If you just read it line by line, it's not that bad to", 
    "figure out what it does.", 
    "You could probably figure out most of it even though you've never even seen", 
    "this library, right?", 
    "So this is kind of trying to inspire you with the possible.", 
    "And, yes, this code example is on Pastebin.", 
    "Feel free to use it for your own needs, royalty free.", 
    "So what's happening here?", 
    "I'm calling x.map.", 
    "I'm passing map this lambda--", 
    "pretend we put parentheses, virtual parentheses, around do and end.", 
    "The result of calling map is, I'm going to get back another collection", 
    "which is the result of applying the lambda to x.", 
    "That collection I'm now going to call sort on.", 
    "So, everything from do to end is really just like a", 
    "statement which is--", 
    "remember we said that anonymous lambda is just like an argument", 
    "being passed to map?", 
    "So this is really just a big function call.", 
    "And whatever that function call returns, I'm going to", 
    "call sort on that.", 
    "So the question is, what effect would that have compared to", 
    "what I've got here?", 
    "A, it would work, right?", 
    "But the reason it works is because even the dangerous methods all also", 
    "end up returning a copy of the receiver, just so that they'll work", 
    "the same way that the non destructive ones do.", 
    "But what's interesting to consider is when I call this x.uniq!", 
    "that will modify x.", 
    "It will also return a reference to x.", 
    "And then reverse!", 
    "will modify it again.", 
    "So the answer is, it will do what you expect.", 
    "It will destructively modify x by applying both transformations to it,", 
    "but it's useful to understand that the reason it works is uniq in reverse non", 
    "destructively return a copy.", 
    "Uniq!", 
    "and reverse!", 
    "return a reference to the receiver.", 
    "Which just got destructively modified by them.", 
    "So they're deliberately written to return the same kind of thing, so that", 
    "you can interchange them.", 
    "So the question is, suppose I say x.uniq.reverse!.", 
    "We could work out the answer.", 
    "But the fact that we have to ask the question is usually, to me, a smell,", 
    "it's an indicator, that we may be going too far and misusing a feature.", 
    "In other words, as a programmer, suppose you put that in your code and", 
    "I, as a programmer, look and say, x.uniq.reverse!.", 
    "Which thing is actually getting modified?", 
    "You've already blown it.", 
    "Right?", 
    "Because you've made me think about something that", 
    "should have been obvious.", 
    "So if you find yourself asking that kind of question, the right thing to", 
    "do is back up and say, wait a minute.", 
    "What's the effect I'm trying to achieve and how do I get the most", 
    "readable code to achieve it?", 
    "Because once your code starts working against you, don't even figure out", 
    "what the answer is.", 
    "Try something else.", 
    "Having said that, I'll think about it on bart.", 
    "This is the last thing.", 
    "After this your brains can relax for a while, OK?", 
    "I've got an array, I'm doing a map over it, and what am I", 
    "doing to each element?", 
    "I'm reversing it and this is just like the end.sort we saw before.", 
    "So parse, think."
  ]
}