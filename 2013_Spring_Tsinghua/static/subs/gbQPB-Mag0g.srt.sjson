{
  "start": [
    1170, 
    2900, 
    5180, 
    5990, 
    6830, 
    9320, 
    10320, 
    13980, 
    17000, 
    19990, 
    23230, 
    27280, 
    28650, 
    31170, 
    32450, 
    37580, 
    40280, 
    41230, 
    43850, 
    46690, 
    49500, 
    54000, 
    56550, 
    56860, 
    60530, 
    62230, 
    64610, 
    65840, 
    67730, 
    71230, 
    74170, 
    75350, 
    79870, 
    83650, 
    87390, 
    90740, 
    94840, 
    96200, 
    99370, 
    101760, 
    105700, 
    106620, 
    109810, 
    113110, 
    115030, 
    117680, 
    121310, 
    124970, 
    127820, 
    129639, 
    134210, 
    137640, 
    142160, 
    146040, 
    148030, 
    153790, 
    155390, 
    158570, 
    161540, 
    163340, 
    163970, 
    164600, 
    167300, 
    168730, 
    172540, 
    175450, 
    177080, 
    183280, 
    186710, 
    189010, 
    189730, 
    192760, 
    196080, 
    200210, 
    202680, 
    205780, 
    209500, 
    215270, 
    218380, 
    221280, 
    222240, 
    223910, 
    226850, 
    228550, 
    231512, 
    234570, 
    236870, 
    238530, 
    241000, 
    243940, 
    245330, 
    250050, 
    252040, 
    254970, 
    259730, 
    261769, 
    264390, 
    267600, 
    269910, 
    274750, 
    276130, 
    278240, 
    279260, 
    280760, 
    285600, 
    287040, 
    287970, 
    292300, 
    295170, 
    298580, 
    300280, 
    305570, 
    310360, 
    314560, 
    316880, 
    318920, 
    321980, 
    323730, 
    328340, 
    330170, 
    333180, 
    336880, 
    338580, 
    341730, 
    343380, 
    346130, 
    348280, 
    350420, 
    351720, 
    355550, 
    360500, 
    364530, 
    370160, 
    371660, 
    373180, 
    377110, 
    381800, 
    385500, 
    387590, 
    389160, 
    391990, 
    393480, 
    395590, 
    399980, 
    403500, 
    405230, 
    408050, 
    409770, 
    413030, 
    414190, 
    417440, 
    419930, 
    421490, 
    422800, 
    425900, 
    430140, 
    430900, 
    433590, 
    438450, 
    442970, 
    444470, 
    447150, 
    451680, 
    454840, 
    459650, 
    461310, 
    464890, 
    468230, 
    470020, 
    473090, 
    475320, 
    480100, 
    481520, 
    484120, 
    487630, 
    492790, 
    494240, 
    496550, 
    500230, 
    502300, 
    505390, 
    508700, 
    512929, 
    514090, 
    515659, 
    519230, 
    521570, 
    522909, 
    525890, 
    528530, 
    531730, 
    533140, 
    537500, 
    542020, 
    543890, 
    547390, 
    548770, 
    553860, 
    557440, 
    561980, 
    564100, 
    567380, 
    569310, 
    570540, 
    576130, 
    579820, 
    585620, 
    588840, 
    590695, 
    593370, 
    595290, 
    599580, 
    602330, 
    605950, 
    610780, 
    615020, 
    616630, 
    617540, 
    618960, 
    621130, 
    624540, 
    627400, 
    630120, 
    630920, 
    632990, 
    635820, 
    638880, 
    640420, 
    645730, 
    650180, 
    653050, 
    656410, 
    659510, 
    663380, 
    665430, 
    669050, 
    670840, 
    674010, 
    678290, 
    679710, 
    681780, 
    683720, 
    686010, 
    687200, 
    690820, 
    695090, 
    698760, 
    701030, 
    702890, 
    705940, 
    708580, 
    711410, 
    712100, 
    713650, 
    715810, 
    719480, 
    720230, 
    723940, 
    727660, 
    730610, 
    733440, 
    737220, 
    739030, 
    747540, 
    751300, 
    753760, 
    755760, 
    758360, 
    761690, 
    765380, 
    771700, 
    773560, 
    774850, 
    778280, 
    779630, 
    783230, 
    784710, 
    787750, 
    789290, 
    795980, 
    797710, 
    801240, 
    804620, 
    806140, 
    807480, 
    808890, 
    810910, 
    812600, 
    816800, 
    820730, 
    822550, 
    826110, 
    828230, 
    830830, 
    834220, 
    835410, 
    837420, 
    839560, 
    842670, 
    849700
  ], 
  "end": [
    2900, 
    5180, 
    5990, 
    6830, 
    9320, 
    10320, 
    13980, 
    17000, 
    19990, 
    23230, 
    27280, 
    28650, 
    31170, 
    32450, 
    37580, 
    40280, 
    41230, 
    43850, 
    46690, 
    49500, 
    54000, 
    56550, 
    56860, 
    60530, 
    62230, 
    64610, 
    65840, 
    67730, 
    71230, 
    74170, 
    75350, 
    79870, 
    83650, 
    87390, 
    90740, 
    94840, 
    96200, 
    99370, 
    101760, 
    105700, 
    106620, 
    109810, 
    113110, 
    115030, 
    117680, 
    121310, 
    124970, 
    127820, 
    129639, 
    134210, 
    137640, 
    142160, 
    146040, 
    148030, 
    153790, 
    155390, 
    158570, 
    161540, 
    163340, 
    163970, 
    164600, 
    167300, 
    168730, 
    172540, 
    175450, 
    177080, 
    183280, 
    186710, 
    189010, 
    189730, 
    192760, 
    196080, 
    200210, 
    202680, 
    205780, 
    209500, 
    215270, 
    218380, 
    221280, 
    222240, 
    223910, 
    226850, 
    228550, 
    231512, 
    234570, 
    236870, 
    238530, 
    241000, 
    243940, 
    245330, 
    250050, 
    252040, 
    254970, 
    259730, 
    261769, 
    264390, 
    267600, 
    269910, 
    274750, 
    276130, 
    278240, 
    279260, 
    280760, 
    285600, 
    287040, 
    287970, 
    292300, 
    295170, 
    298580, 
    300280, 
    305570, 
    310360, 
    314560, 
    316880, 
    318920, 
    321980, 
    323730, 
    328340, 
    330170, 
    333180, 
    336880, 
    338580, 
    341730, 
    343380, 
    346130, 
    348280, 
    350420, 
    351720, 
    355550, 
    360500, 
    364530, 
    370160, 
    371660, 
    373180, 
    377110, 
    381800, 
    385500, 
    387590, 
    389160, 
    391990, 
    393480, 
    395590, 
    399980, 
    403500, 
    405230, 
    408050, 
    409770, 
    413030, 
    414190, 
    417440, 
    419930, 
    421490, 
    422800, 
    425900, 
    430140, 
    430900, 
    433590, 
    438450, 
    442970, 
    444470, 
    447150, 
    451680, 
    454840, 
    459650, 
    461310, 
    464890, 
    468230, 
    470020, 
    473090, 
    475320, 
    480100, 
    481520, 
    484120, 
    487630, 
    492790, 
    494240, 
    496550, 
    500230, 
    502300, 
    505390, 
    508700, 
    512929, 
    514090, 
    515659, 
    519230, 
    521570, 
    522909, 
    525890, 
    528530, 
    531730, 
    533140, 
    537500, 
    542020, 
    543890, 
    547390, 
    548770, 
    553860, 
    557440, 
    561980, 
    564100, 
    567380, 
    569310, 
    570540, 
    576130, 
    579820, 
    585620, 
    588840, 
    590695, 
    593370, 
    595290, 
    599580, 
    602330, 
    605950, 
    610780, 
    615020, 
    616630, 
    617540, 
    618960, 
    621130, 
    624540, 
    627400, 
    630120, 
    630920, 
    632990, 
    635820, 
    638880, 
    640420, 
    645730, 
    650180, 
    653050, 
    656410, 
    659510, 
    663380, 
    665430, 
    669050, 
    670840, 
    674010, 
    678290, 
    679710, 
    681780, 
    683720, 
    686010, 
    687200, 
    690820, 
    695090, 
    698760, 
    701030, 
    702890, 
    705940, 
    708580, 
    711410, 
    712100, 
    713650, 
    715810, 
    719480, 
    720230, 
    723940, 
    727660, 
    730610, 
    733440, 
    737220, 
    739030, 
    747540, 
    751300, 
    753760, 
    755760, 
    758360, 
    761690, 
    765380, 
    771700, 
    773560, 
    774850, 
    778280, 
    779630, 
    783230, 
    784710, 
    787750, 
    789290, 
    793390, 
    797710, 
    801240, 
    804620, 
    806140, 
    807480, 
    808890, 
    810910, 
    812600, 
    816800, 
    820730, 
    822550, 
    826110, 
    828230, 
    830830, 
    834220, 
    835410, 
    837420, 
    839560, 
    842670, 
    849700, 
    852110
  ], 
  "text": [
    "ARMANDO FOX: Let's walk through the answers, shall we?", 
    "It provides a stand-in for a method that doesn't exist.", 
    "We just saw that.", 
    "True.", 
    "It overrides the real method even if it did exist.", 
    "Also true, right?", 
    "This is an example of taking control of a method so we can make it behave", 
    "in a special way, just for the purposes of testing.", 
    "Could be issued before or after the code that should make the call.", 
    "This is the one that is false, and for the reasons we outlined before.", 
    "It's because if the goal is to fake out the method, well, you can't call", 
    "the method and then fake it out, right?", 
    "You have to redefine the method before you try to call it.", 
    "Otherwise it won't work.", 
    "So this was the thing that was a little bit spoiled by somebody asking", 
    "the very perceptive question of why are the two calls in the", 
    "order that they are?", 
    "But this is the reason, right, the whole point is to monkey around with a", 
    "method so that we can control it to do our nefarious bidding.", 
    "We have to do that before we actually try to make the call.", 
    "Ruby is very powerful, but it cannot change the linear flow of time.", 
    "And lastly, it exploits Ruby's open classes.", 
    "Yes.", 
    "This is a classic example of a tasteful use, in my opinion, of", 
    "exploiting open classes.", 
    "It's a way to say: there's a good reason to", 
    "redefine a method at runtime.", 
    "It's because it makes testing easier.", 
    "Anything that makes testing easier to a first order is a good thing.", 
    "OK, we'll talk a little bit about some more specs and a little bit of", 
    "refactoring.", 
    "So going back to the big picture here, what we just did is we wrote", 
    "expectations that drove the development of the controller action.", 
    "In this case it was pretty simple, but we discovered that even in this simple", 
    "case, all we're doing is calling a method in the model.", 
    "That this collaboration means that we have to have some way of accounting", 
    "for that in the test.", 
    "And the way we did that is, again, from the outside in, we said OK, well,", 
    "we can stub that model method, we're going to write it later.", 
    "And this allows us to control how it behaves for our test cases.", 
    "So this is the key idea.", 
    "We're breaking dependencies between the thing that we're testing and what", 
    "we call its collaborators, other things that have to work with it, but", 
    "that are not the subject of this particular test.", 
    "And we don't want it to screw up this particular test.", 
    "And the way that we did this is, we took advantage of this concept of a", 
    "seam, which is generally any place that you can change the way your app", 
    "behaves without editing the source code of the app.", 
    "Now, notice I said the source code of the app.", 
    "Of course we had to put code into our test in order to create that seam, but", 
    "we didn't have to go in and edit the model file, for example.", 
    "We didn't have to go in and create a fake test harness method that fakes", 
    "out what find_in_tmdb should do, because the test code is able to do", 
    "that for us.", 
    "So, getting back to this idea of the code you wish you had, well, we", 
    "already accomplished our first goal, right?", 
    "We said, of the three things the controller action should do, the first", 
    "one is it should call a method, in the model, in this case,", 
    "that searches TMDb.", 
    "We're done.", 
    "We did that one.", 
    "Now, we haven't done the model method.", 
    "There's no actual functionality there.", 
    "But we can apply the same technique when we go develop the model method,", 
    "and the example in the book does that at some length.", 
    "What's the next thing we said it has to do?", 
    "Well, we said, If it finds a match in TMDb, it should select a new view, a", 
    "template called \"Search Results,\" so that it can display that match.", 
    "OK, well, let's move on to that one.", 
    "What would that mean?", 
    "It should select the Search Results view to display the match.", 
    "Well, this really says two different things, if you kind of deconstruct it.", 
    "One of them is, it should decide that the appropriate template to be", 
    "rendered is the Search Results template.", 
    "Now, in our case, because you're so astute and you're two steps ahead of", 
    "me, you're probably already saying: wait a minute, the controller action", 
    "is called search_tmdb, and you said that you were going to create a view", 
    "called searchtmdb.html.haml.", 
    "Doesn't convention over configuration say that that's going to be the one", 
    "that renders by default?", 
    "Why do you need to write a test for that?", 
    "Isn't that part of what's built into Rails?", 
    "If you'd said that--", 
    "raise your hand if you were going to say that.", 
    "Ah, I was going to say you're all brilliant.", 
    "And you really are, but you should've just taken credit for", 
    "that, believe me.", 
    "But you understand what I'm saying here, right?", 
    "We've been saying that the name of the view is supposed to just match the", 
    "name of the controller action.", 
    "So if that's true, if that's something that Rails gives us automatically, why", 
    "would we have to worry about writing a test for it?", 
    "And in this case, technically it's probably overkill.", 
    "But suppose that, as would be the case later, we also have to handle the case", 
    "where it doesn't find any matches.", 
    "That means they would probably render a different view instead of search", 
    "results, so then we would need the controller spec to test whether it's", 
    "doing the right thing depending on the answer.", 
    "So in this easy case, because we're only handling the happy path, yes, we", 
    "don't really need to write this test.", 
    "Because all we would be doing is testing if Rails itself", 
    "is implemented properly.", 
    "Not hugely useful.", 
    "But again, the goal here is to get you to think about how to", 
    "organize your tests.", 
    "This is two concerns.", 
    "It should decide to render that view, and it should make the list of matches", 
    "that it got from TMDb available to that view.", 
    "The second one smells like something we might be able to write a test for.", 
    "So what would that mean?", 
    "Well, for this, it will allow us to introduce another little piece of our", 
    "spec, an expectation construct called \"should,\" where we can take an object", 
    "and state that it should match some condition, or satisfy some condition.", 
    "Here are some examples.", 
    "A lot of them are straightforward.", 
    "We might have a variable count and in the test we want to assert that", 
    "count.should == five.", 
    "We want to assert that 5.should be less than 7, or that it should be an", 
    "odd number.", 
    "We can talk about results including an element.", 
    "So if result is some sort of a collection, we can say the collection", 
    "should include something or other.", 
    "If the result is something that we can match against a regular expression, we", 
    "can talk about that.", 
    "And all of these examples could also have used", 
    "should_not in place of should.", 
    "There's a whole catalogue of built-in matchers, and you can", 
    "also define your own.", 
    "So you could write player.should be in the end zone, and there's a way that", 
    "you can gracefully define what that means in your application.", 
    "But what happens is that the matcher will apply the test to the receiver.", 
    "So here the matcher is be_odd, and by the way, how does be_odd work?", 
    "It uses a trick we've already seen.", 
    "It uses method missing.", 
    "If you say something like, 5.should be something, then it will basically try", 
    "to call the method \"something?\" on 5 and see if it gets true as a result.", 
    "So again, another nice example of using meta-programming to make tests a", 
    "little bit easier to read.", 
    "So this is just an introduction to these.", 
    "We're going to go ahead and use one of them to continue the development of", 
    "our controller test.", 
    "And remember, what are we trying to do at this point?", 
    "We're trying to make sure that the right template is going to be rendered", 
    "and that it has access to the results that our model method is", 
    "going to get from TMDb.", 
    "Now, this should surely raise a red flag, because now you're saying, wait", 
    "a minute, we don't have the model method.", 
    "We already stubbed it out so we could test whether the controller", 
    "tries to call it.", 
    "Now you're going to go a step further in the fantasy and say, not only does", 
    "this method not exist, we're going to stub it out and we're going to pretend", 
    "it returns a value.", 
    "Perfectly legitimate, right?", 
    "Because again, what's the goal of this next spec that we're going to write?", 
    "It's not to verify that search_tmdb is being called correctly.", 
    "No.", 
    "It's given the assumption that it's being called correctly and that it", 
    "returns something reasonable, does the information returned properly get", 
    "passed to the view, so that the view can render it as a list of matches?", 
    "So how do we go about this?", 
    "Well, first of all, the easy part.", 
    "We can check whether a controller method would try to render a", 
    "particular template as the result of its rendering step.", 
    "This is an augmentation to RSpec that comes with the Rails RSpec", 
    "plugin, if you will.", 
    "Pure RSpec by itself is just for testing Ruby code, but if you're", 
    "testing a Rails application, there's a bunch of additional macros that are", 
    "really useful, and this is one of them.", 
    "There's a list of more of these in the book and in the RSpec online", 
    "documentation that the book points to.", 
    "So one thing we could say is, well, we could use render_template to make sure", 
    "that the right view is going to be rendered.", 
    "But what's the receiver of should in this case?", 
    "What kind of a thing should we say should render the template?", 
    "Well, remember that we're going to use this post action to simulate the", 
    "posting of a form.", 
    "And once we've done a post, our spec--", 
    "Rails gives us an additional method called \"response,\" which returns the", 
    "controller's response object.", 
    "In other words, when the controller is getting ready to render, and it", 
    "bundles up the view that's going to be rendered with all of the information", 
    "that that view has access to, all of its instance variables, that thing is", 
    "called a response object.", 
    "And we can have access to that.", 
    "So basically we can examine the response object, and we can ask", 
    "questions like: Which view is this?", 
    "Is it the correct view?", 
    "What instance variables is this view going to have to find?", 
    "This is like metaprogramming in the extreme.", 
    "So even though we haven't rendered the view, we can see what the controller", 
    "is setting us up to do.", 
    "And that's what this response object gives us.", 
    "So we can query the response object, and we can see what the controller", 
    "would have tried to render.", 
    "As I pointed out earlier, the view has to exist, because if it doesn't exist", 
    "at all, the controller will fail.", 
    "So I just created an empty file to be a placeholder for that view.", 
    "But this post search_tmdb that we've been doing, this actually triggers the", 
    "entire MVC cycle, including the step that tries to find a view to render.", 
    "So the view has to exist.", 
    "For this reason, some people think of controller specs as functional tests,", 
    "as opposed to strictly unit tests.", 
    "What's the difference?", 
    "In a unit test, you're really just testing one single method, or a couple", 
    "of methods maybe in one class, but that's the scope of the test.", 
    "But in our test, when we use the post macro, it actually exercises both the", 
    "controller and the logic that the controller would use to do rendering,", 
    "and the routing logic that gets you into the controller.", 
    "So it's really touching a bunch of different pieces of the app.", 
    "It's not really a unit test.", 
    "Even though the focus of our test is one single controller action, the way", 
    "we stimulate that action is from the outside in.", 
    "So some people when they talk about controller specs, they'll refer to", 
    "them as functional tests, as opposed to strictly speaking as unit tests.", 
    "So if we take a look at how we would express this, here's the spec we wrote", 
    "before in lines five through eight.", 
    "That one already works.", 
    "That one passes green.", 
    "And here's the one that we're working on now.", 
    "It should select the search results template for rendering.", 
    "So what's the first thing we have to do?", 
    "We have to stub find_in_tmdb.", 
    "This is something new.", 
    "We haven't seen stub yet.", 
    "Why do we have to stub find_in_tmdb?", 
    "Because when we do this post, it's going to call that", 
    "same controller action.", 
    "That controller action is going to try to call Movie.find_in_tmdb.", 
    "Because that method doesn't exist, we had darn well better provide some fake", 
    "object that will allow us to get past that line.", 
    "Because again, what's the point of this test we're working on now?", 
    "This test doesn't even care if we call find_tmdb.", 
    "This is the difference between stub, which we're using here, and", 
    "should_receive, which we did before.", 
    "Should_receive says, I'm going to set up a shadow method whose goal is to", 
    "make sure that it gets called.", 
    "That is the essence of what we're testing, is whether it got called.", 
    "Stub, on the contrary, says I'm going to set up a fake method so that there", 
    "is something there to call.", 
    "I'm not even going to keep track of whether it gets called.", 
    "I'm just providing it just in case.", 
    "In fact, it might even get called multiple times, and that", 
    "would be cool too.", 
    "But we can't not stub it, because the method doesn't exist.", 
    "And again, as with the previous test, even if the method did exist, because", 
    "what we want to check in this test is unrelated to the functioning of this", 
    "method, we would still want to stub it out.", 
    "So get used to this way of thinking.", 
    "You might think at this point, well, we have a controller method.", 
    "All we want to do is make sure that it renders the right view.", 
    "Then we've already written find_in_tmdb.", 
    "Let's just use it.", 
    "Why would you stub it out?", 
    "Again, it's because you don't want to interfere with this test.", 
    "You want to control every aspect of it that is not related to the one thing", 
    "you care about.", 
    "The one thing you care about in this case is this.", 
    "We did our post and now we're going to look at the response object and say", 
    "that it should be trying to render the search TMDb template.", 
    "This line is the one thing that this test cares about.", 
    "Everything else in this test code is there just to set things up, so that", 
    "we can check this result.", 
    "So just to be honest about it working, I'm going to grab it and put it into--", 
    "and hopefully that woke up Autotest--", 
    "and we'll see if we're having a good demo day or not.", 
    "This is a good demo day, boys and girls.", 
    "We now have two green tests.", 
    "We started with three that were yellow, we made the first one green in", 
    "the previous section of the lecture and we made the second one green now.", 
    "So what's left is, it should make sure that the search results from TMDb are", 
    "actually available to that view.", 
    "Notice how much we're taking for granted.", 
    "We still haven't written the damn method that calls find_tmdb.", 
    "We've just faked it out.", 
    "But that's fine, because the essence of testing is that we isolate all the", 
    "behaviors we don't care about.", 
    "Think of the Nautilus machines, or whichever brand has substituted for", 
    "Nautilus these days.", 
    "So, putting our big-picture hats back on.", 
    "What have we learned from this last thing?", 
    "Well, we can start expanding the list of things we know how to do in tests.", 
    "The list of ways that we can isolate behaviors and check stuff.", 
    "We already saw should_receive.", 
    "We did that before.", 
    "Now we've seen a new one.", 
    "We've seen the idea that you could talk about an", 
    "object matching a condition.", 
    "And that we saw some Rails-specific extensions that allow us to test", 
    "objects like the controller's response to an action, allow us to check", 
    "whether it would render a certain template--", 
    "and again, there's no simple way to memorize these.", 
    "There's a long list of things that RSpec gives you.", 
    "As you start to write more specs, you'll start looking at the", 
    "documentation and you'll see more calls that you can use to", 
    "test things like this.", 
    "But the goal here is to get you to understand how to", 
    "think about this process.", 
    "With that in mind, we can ask the following question.", 
    "Which of these, if any, is not a valid use of should or should_not?", 
    "Or perhaps it's the case that all three are valid."
  ]
}