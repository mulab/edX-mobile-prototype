{
  "start": [
    0, 
    4520, 
    7700, 
    10960, 
    14850, 
    19499, 
    20160, 
    22080, 
    24160, 
    27490, 
    30510, 
    31490, 
    35000, 
    36830, 
    40780, 
    43370, 
    45330, 
    46430, 
    50260, 
    53590, 
    54520, 
    57250, 
    58200, 
    60100, 
    61290, 
    67080, 
    70760, 
    72270, 
    74290, 
    76220, 
    78120, 
    80720, 
    86000, 
    88550, 
    91130, 
    92890, 
    96420, 
    99370, 
    100750, 
    103260, 
    104620, 
    105330, 
    108370, 
    109160, 
    112600, 
    117630, 
    120290, 
    122140, 
    123490, 
    126150, 
    127670, 
    130780, 
    133620, 
    135920, 
    137320, 
    141000, 
    144000, 
    146790, 
    148630, 
    151330, 
    153950, 
    156720, 
    160900, 
    162490, 
    166680, 
    171670, 
    173580, 
    175870, 
    177980, 
    179100, 
    180880, 
    185250, 
    187650, 
    189010, 
    191020, 
    193720, 
    196080, 
    198330, 
    202720, 
    204980, 
    208150, 
    210670, 
    214320, 
    218380, 
    220110, 
    223820, 
    225600, 
    230580, 
    235170, 
    235950, 
    239020, 
    241130, 
    242710, 
    246670, 
    247840, 
    248990, 
    250600, 
    254010, 
    254500, 
    255420, 
    260010, 
    261810, 
    263830, 
    265700, 
    268880, 
    270470, 
    274180, 
    276220, 
    278800, 
    281970, 
    287240, 
    289100, 
    291210, 
    292410, 
    294770, 
    298330, 
    301690, 
    304650, 
    306260, 
    308510, 
    310040, 
    311080, 
    312290, 
    317290, 
    319480, 
    321470, 
    324910, 
    327390, 
    328580, 
    330900, 
    332240, 
    335050, 
    336940, 
    338980, 
    343060, 
    346310, 
    348680, 
    352395, 
    356260, 
    359650, 
    361220, 
    363770, 
    366430, 
    373770, 
    377620, 
    378150, 
    379160, 
    384180, 
    388230, 
    391170, 
    396630, 
    400550, 
    407820, 
    410680, 
    412440, 
    415440, 
    416650, 
    419590, 
    425440, 
    427530, 
    431710, 
    432740, 
    436880, 
    437680, 
    439640, 
    441450, 
    444710, 
    446780, 
    447420, 
    449230, 
    450520, 
    452300, 
    454460, 
    459380, 
    465600, 
    466330, 
    471540, 
    473660, 
    475609, 
    476040, 
    477710, 
    481210, 
    483140, 
    484180, 
    485280, 
    489900, 
    494150, 
    495130, 
    497780, 
    500680, 
    503150, 
    504990, 
    506050, 
    508130, 
    510860, 
    513250, 
    513780, 
    517240, 
    518510, 
    521429, 
    523620, 
    525110, 
    527030, 
    528990, 
    532520, 
    535990, 
    538230, 
    540430, 
    542770, 
    543850, 
    545240, 
    548260, 
    549580, 
    552560, 
    554080, 
    557340, 
    560720, 
    562260, 
    564830
  ], 
  "end": [
    4520, 
    7700, 
    10960, 
    14850, 
    19499, 
    20160, 
    22080, 
    24160, 
    27490, 
    30510, 
    31490, 
    35000, 
    36830, 
    40780, 
    43370, 
    45330, 
    46430, 
    50260, 
    53590, 
    54520, 
    57250, 
    58200, 
    60100, 
    61290, 
    64040, 
    70760, 
    72270, 
    74290, 
    76220, 
    78120, 
    80720, 
    82780, 
    88550, 
    91130, 
    92890, 
    96420, 
    99370, 
    100750, 
    103260, 
    104620, 
    105330, 
    108370, 
    109160, 
    110410, 
    113850, 
    120290, 
    122140, 
    123490, 
    126150, 
    127670, 
    130780, 
    133620, 
    135920, 
    137320, 
    141000, 
    144000, 
    146790, 
    148630, 
    151330, 
    153950, 
    156720, 
    160900, 
    162490, 
    166680, 
    171670, 
    173580, 
    175870, 
    177980, 
    179100, 
    180880, 
    185250, 
    187650, 
    189010, 
    191020, 
    193720, 
    196080, 
    198330, 
    202720, 
    204980, 
    208150, 
    210670, 
    214320, 
    218380, 
    220110, 
    223820, 
    225600, 
    230580, 
    235170, 
    235950, 
    239020, 
    241130, 
    242710, 
    246670, 
    247840, 
    248990, 
    250600, 
    254010, 
    254500, 
    255420, 
    260010, 
    261810, 
    263830, 
    265700, 
    268880, 
    270470, 
    274180, 
    276220, 
    278800, 
    281970, 
    287240, 
    289100, 
    291210, 
    292410, 
    294770, 
    298330, 
    301690, 
    304650, 
    306260, 
    308510, 
    310040, 
    311080, 
    312290, 
    317290, 
    319480, 
    321470, 
    324910, 
    327390, 
    328580, 
    330900, 
    332240, 
    335050, 
    336940, 
    338980, 
    343060, 
    346310, 
    348680, 
    352395, 
    356260, 
    359650, 
    361220, 
    363770, 
    366430, 
    373770, 
    377620, 
    378150, 
    379160, 
    384180, 
    388230, 
    391170, 
    396630, 
    400550, 
    407820, 
    410680, 
    412440, 
    415440, 
    416650, 
    419590, 
    425440, 
    427530, 
    431710, 
    432740, 
    436880, 
    437680, 
    439640, 
    441450, 
    444710, 
    446780, 
    447420, 
    449230, 
    450520, 
    452300, 
    454460, 
    459380, 
    461514, 
    466330, 
    471540, 
    473660, 
    475609, 
    476040, 
    477710, 
    481210, 
    483140, 
    484180, 
    485280, 
    489900, 
    494150, 
    495130, 
    497780, 
    500680, 
    503150, 
    504990, 
    506050, 
    508130, 
    510860, 
    513250, 
    513780, 
    517240, 
    518510, 
    521430, 
    523620, 
    525110, 
    527030, 
    528990, 
    532520, 
    535990, 
    538230, 
    540430, 
    542770, 
    543850, 
    545240, 
    548260, 
    549580, 
    552560, 
    554080, 
    557340, 
    560720, 
    562260, 
    564830, 
    567130
  ], 
  "text": [
    "We're going to do our introduction to Ruby.", 
    "So, Ruby is a very simple language.", 
    "Those of you took the scheme course may feel comfortable.", 
    "It's a minimalist language with a really rich library.", 
    "So there's three pillars to Ruby, and we'll talk about two", 
    "of them this time.", 
    "First of all, everything is an object.", 
    "Absolutely everything is an object.", 
    "In Java, you've got some primitive types like integers", 
    "that must be boxed, behave like objects, but not in Ruby.", 
    "Everything's an object.", 
    "Second thing is every operation is a method call on", 
    "some object that returns a value.", 
    "In Java, you can do this operator overloading stuff to", 
    "get a different method, and it's even possible to get no", 
    "value, but not in Ruby.", 
    "Everything is an object.", 
    "And we'll show you, even operations like plus or a", 
    "method call, every operation is a method call on an object.", 
    "Even plus like that.", 
    "And all programming is metaprogramming.", 
    "Everything's dynamic.", 
    "Everything can change, and Armando will talk", 
    "about that next time.", 
    "So let's do the first one.", 
    "In Ruby, it's interpreted like Scheme.", 
    "There's no compile time, so there's no", 
    "compile time errors.", 
    "It's really object-oriented.", 
    "It's one of those pillars of the language.", 
    "Once you understand that everything is an object, your", 
    "questions about Ruby will be easier to understand.", 
    "Just think every time, you're doing a method call on some", 
    "object, no matter what it looks like.", 
    "It's dynamically typed.", 
    "\"Objects have types, variables don't.\" There will not be an", 
    "integer type declaration like in the Java and other", 
    "languages here.", 
    "The name will be there without the type.", 
    "It'll change over time.", 
    "You can't tell.", 
    "It's like Python and unlike Java.", 
    "And it's dynamic.", 
    "It's highly dynamic.", 
    "Everything happens at runtime.", 
    "You can ask questions about classes.", 
    "You can modify code at runtime.", 
    "Absolutely everything is at runtime.", 
    "So because it was this minimalist language, it had", 
    "all these interesting features.", 
    "That's what led to the person who invented Rails to build it", 
    "in Ruby, and that's why it's called Ruby On Rails.", 
    "But these lectures this time are just going to be about the", 
    "language itself.", 
    "And as we said in the notes, in addition to what's in the", 
    "book and what's in the slides, we put some pointers at a", 
    "bunch of online tutorials, depending where you are, to", 
    "help you understand the Ruby language.", 
    "But the good news it's relatively simple.", 
    "All languages have naming conventions.", 
    "They have cool names in Ruby for these things.", 
    "So, upper class names is called CamelCase.", 
    "CamelCase, like humps in a camel.", 
    "So the class names use UpperCamelCase.", 
    "The U, C, and C are the bumps in it.", 
    "Upper case because the first letter--", 
    "some languages, the first letter is not upper case.", 
    "It is in Ruby for class names.", 
    "These are just conventions.", 
    "You can really name it anything you want, but these", 
    "are the conventions everybody uses, and because you do a lot", 
    "of reading there, you want to follow the conventions to be a", 
    "good Ruby programmer.", 
    "Methods and names use snake_case.", 
    "Snake_case has the little underscore between the names.", 
    "Lowercase, little snake thing in between there.", 
    "So there's examples on the slides.", 
    "These are all snake_case examples right here, and", 
    "here's an example of an UpperCamelCase one.", 
    "Constants are capital, and they're scoped.", 
    "Just like other variables, the constants make sense within a", 
    "scope, and test mode is this example.", 
    "Now, globals have that dollar sign that are not scoped, and", 
    "it's in red there because you're not supposed to use it.", 
    "It's in the language, but do not have global constants.", 
    "Keep them scoped.", 
    "Now, one of the distinguishing features of Ruby that makes a", 
    "difference is in addition to strings, it has what are", 
    "called symbols.", 
    "These are immutable strings whose value is itself.", 
    "And the way you can tell it is a string is it", 
    "starts with a colon.", 
    "And the idea of a symbol is that this is a special thing.", 
    "There's a limited number of them.", 
    "There's a set that are OK.", 
    "As opposed to string, it can be anything.", 
    "And you'll see how we use symbols in the definition of", 
    "the language.", 
    "But that's one of the different", 
    "features of the language.", 
    "A symbol, I am not a string.", 
    "I'm a member of this limited set.", 
    "I can't be set to any arbitrary value.", 
    "And it starts with this colon.", 
    "Variables, hashes, and arrays.", 
    "Basically, arrays and hashes, there's no declarations, so", 
    "you just assign them and they appear.", 
    "And depending how you assign it, it acts as a regular", 
    "variable, or array, or a hash.", 
    "And instance and class variables do have a value of", 
    "nil until they're assigned.", 
    "But the other things, you don't know what they are.", 
    "So, what's OK?", 
    "You can have a variable x.", 
    "Assign it an integer object, and that's what the type is,", 
    "and immediately assign it to a string thereafter, no problem.", 
    "Can't do that in Java.", 
    "There's no declaration of a type.", 
    "It's the object that gives it the type.", 
    "How do you make an array?", 
    "That's how you make an array.", 
    "You assign it.", 
    "So, x is getting three elements.", 
    "This is the zero index.", 
    "One is for the second one, and two.", 
    "So, like all programming languages, I guess, zero is", 
    "the first element, one is the second, and two.", 
    "And you see it's three different things.", 
    "There's an integer, a string, and a symbol.", 
    "That's fine.", 
    "Arrays don't have to be the same type as they do in", 
    "languages like Java.", 
    "And then you can assign--", 
    "the bracket on the left, the second element, you assign two", 
    "to, and you can ask questions about arrays like its length.", 
    "And that's the answer.", 
    "So this Boolean would be true.", 
    "A hash is just done with these key value pairs.", 
    "And so, you can start off, it can be a string, as the first", 
    "one is a string here.", 
    "And then this here's a symbol with the colon.", 
    "And you can see that the first element is an integer, and the", 
    "second element is an array, so you can do things like", 
    "identify the hash with this symbol.", 
    "This one.", 
    "It's not the second element.", 
    "Hashes aren't ordered, so the b-th element is there.", 
    "And then you want the zero element because there's array,", 
    "and that would be two right here.", 
    "And you could ask what are the keys, setting the method keys", 
    "to that object, and here are the two keys are the string", 
    "\"a\" in the symbol \"b.\" And the hashes are quite similar to", 
    "what you'd see in Python and Perl, and I guess the array's", 
    "like Python and Perl, but unlike what", 
    "you expect in Java.", 
    "Methods.", 
    "Everything is a method.", 
    "So you can see that what we're returning from foo is assigned", 
    "two variables on the left.", 
    "That means we better return two values, and we do there,", 
    "so that's OK.", 
    "And Ruby has this ability that you don't have to supply all", 
    "the parameters.", 
    "If you don't supply both parameters,", 
    "you can specify default.", 
    "So you can say, well, if you don't give me anything, y is", 
    "going to have the value zero, and if you do, it will", 
    "override it.", 
    "And so, you can call it--", 
    "right here, you see--", 
    "with x, and then you'll get this default", 
    "value that you declared.", 
    "As long as you provide that optional initialization of", 
    "what to do, that's fine in Ruby.", 
    "Statements.", 
    "So, like some other modern languages, it's the new line", 
    "that separates statements.", 
    "You are allowed to do semicolons, but that's pretty", 
    "rare in Ruby.", 
    "Mostly it's going to be new lines.", 
    "And kind of the philosophy of the design of Ruby is if the", 
    "parser can figure it out, you don't have to put all the", 
    "syntax in there.", 
    "That's the philosophy here.", 
    "So this one is OK in the green on the left-- raise (\"Boom!\")", 
    "unless (ship_stable).", 
    "That's OK.", 
    "This one got shifted over a little bit.", 
    "The reason the parser's going to complain about this one is", 
    "raise (\"Boom!\") is a legal statement, and it'll be", 
    "surprised with this here afterwards by", 
    "keeping on the same line.", 
    "So there's a new line here, right?", 
    "So that could be a separate statement.", 
    "That is a legal statement, and then there's the rest of it", 
    "afterwards.", 
    "It'll complain about that, but there is no new line here, so", 
    "it was OK to have that afterwards.", 
    "But the way the Ruby parser works, it'll let you get away", 
    "with things if it can figure it out.", 
    "That's the philosophy here.", 
    "Here's the standard, basic comparison", 
    "operations as you go across.", 
    "Now, one thing that's different about Ruby from the", 
    "other scripting languages is false and", 
    "nil evaluate to false.", 
    "Everything else evaluates to true.", 
    "So in the languages, I think, like Perl, the", 
    "empty string is false.", 
    "Not in Ruby.", 
    "It's false and nil, everything else is true, so", 
    "keep that in mind.", 
    "There's the standard control flow statements you see in all", 
    "languages--", 
    "if statements, if/else, while statements.", 
    "Now, even though we have four loops here in the Ruby", 
    "context, you won't see them that much.", 
    "One of the powerful ideas of Ruby is", 
    "the iterator construct."
  ]
}