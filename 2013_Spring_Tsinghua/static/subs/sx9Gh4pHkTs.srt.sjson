{
  "start": [
    100, 
    2990, 
    5770, 
    8870, 
    9550, 
    10730, 
    11290, 
    11830, 
    15280, 
    16590, 
    18160, 
    20740, 
    24030, 
    24200, 
    28650, 
    29700, 
    31670, 
    32150, 
    34810, 
    38160, 
    39470, 
    40280, 
    43250, 
    45110, 
    45830, 
    47080, 
    50200, 
    51190, 
    52720, 
    54550, 
    58970, 
    61710, 
    63190, 
    66750, 
    69590, 
    70950, 
    71580, 
    73290, 
    75740, 
    78160, 
    79320, 
    81530, 
    85170, 
    88440, 
    91690, 
    92850, 
    94470, 
    95790, 
    97710, 
    98710, 
    100930, 
    101490, 
    104470, 
    107340, 
    109120, 
    110370, 
    111580, 
    113050, 
    116690, 
    119810, 
    122830, 
    124820, 
    126950, 
    128229, 
    131490, 
    132780, 
    135440, 
    138640, 
    141280, 
    142190, 
    145330, 
    146380, 
    149730, 
    153210, 
    156520, 
    160120, 
    162070, 
    164790, 
    167140, 
    168820, 
    170990, 
    174360, 
    175380, 
    178020, 
    178480, 
    181420, 
    183190, 
    185200, 
    188740, 
    190070, 
    193540, 
    195610, 
    198320, 
    200720, 
    202220, 
    206710, 
    209200, 
    210290, 
    214910, 
    216680, 
    221760, 
    223190, 
    225975, 
    228760, 
    229350
  ], 
  "end": [
    2990, 
    5770, 
    8870, 
    9550, 
    10730, 
    11290, 
    11830, 
    15280, 
    16590, 
    18160, 
    20740, 
    24030, 
    24200, 
    28650, 
    29700, 
    31670, 
    32150, 
    34810, 
    38160, 
    39470, 
    40280, 
    43250, 
    45110, 
    45830, 
    47080, 
    50200, 
    51190, 
    52720, 
    54550, 
    58970, 
    61710, 
    63190, 
    66750, 
    69590, 
    70950, 
    71580, 
    73290, 
    75740, 
    78160, 
    79320, 
    81530, 
    85170, 
    88440, 
    91690, 
    92850, 
    94470, 
    95790, 
    97710, 
    98710, 
    100930, 
    101490, 
    104470, 
    107340, 
    109120, 
    110370, 
    111580, 
    113050, 
    116690, 
    119810, 
    122830, 
    124820, 
    126950, 
    128229, 
    131490, 
    132780, 
    135440, 
    138640, 
    141280, 
    142190, 
    145330, 
    146380, 
    149730, 
    153210, 
    156520, 
    160120, 
    162070, 
    164790, 
    167140, 
    168820, 
    170990, 
    174360, 
    175380, 
    178020, 
    178480, 
    181420, 
    183190, 
    185200, 
    188740, 
    190070, 
    193540, 
    195610, 
    198320, 
    200720, 
    202220, 
    206710, 
    209200, 
    210290, 
    214910, 
    216680, 
    221760, 
    223190, 
    225975, 
    228760, 
    229350, 
    230920
  ], 
  "text": [
    "ARMANDO FOX: So, let's go through all the choices.", 
    "Choice number one, string.curvy.", 
    "What is the problem, or problems, with this choice?", 
    "That's what-- yes.", 
    "Wrong number of arguments, indeed.", 
    "One problem.", 
    "Very good.", 
    "The method was defined as not taking any arguments, and whatever this is,", 
    "we're passing an argument to it.", 
    "However, there's an even more basic reason.", 
    "The thing to the left of the dot is supposed to be the receiver, but we're", 
    "saying here that the receiver is string, which is the name of a class.", 
    "Right?", 
    "Now, in fact, if there was a class method in string called curvy, this", 
    "would be perfectly legal.", 
    "Well, assuming that it took an argument, it would be legal.", 
    "Right?", 
    "But we've defined the method as an instance method.", 
    "If it was a class method, we would have defined it as def self.curvy or", 
    "def string.curvy.", 
    "That would have been fine.", 
    "That would have created a class method, or in Java", 
    "terms, a static method.", 
    "But we didn't do that.", 
    "We created an instance method.", 
    "Therefore, this is wrong because we're calling it as if it", 
    "were a class method.", 
    "But no such class method exists.", 
    "Only an instance method exists.", 
    "Foo.curvy is good because foo is an instance of a class string, and we're", 
    "calling an instance method with foo as the receiver.", 
    "So this is a syntactically legal call.", 
    "It will do what we expect, assuming we didn't screw up our method.", 
    "What about this one, self.curvy?", 
    "This is a little more tricky.", 
    "It's wrong.", 
    "But why?", 
    "OK, we have one vote for self as the receiver.", 
    "But self may not be the thing that defines curvy.", 
    "That may be true.", 
    "Now, suppose I play devil's advocate and say, well, wait a minute.", 
    "Suppose that we happen to be in a context where the value of self is", 
    "exactly the object representing the string class.", 
    "Or sorry, the object representing a string like foo.", 
    "Then would it be legal?", 
    "Here's a hint.", 
    "Wrong number of arguments, right?", 
    "So this one is ruled out definitively because of the", 
    "wrong number of arguments.", 
    "If not for that, though, it might have been correct.", 
    "Right?", 
    "If it were called in a context where the value of self happened to be a", 
    "string, that aspect of it would be OK.", 
    "But wrong number of arguments kills it.", 
    "And the last one?", 
    "Same thing, right?", 
    "We don't know what the value of self is.", 
    "We know that these last two are actually equivalent to each other in", 
    "that, since we have no receiver specified, self is going to be the", 
    "receiver, whatever self happens to be at that point in the program.", 
    "But wrong number of arguments.", 
    "So we lose on that one.", 
    "OK?", 
    "So, here's what we've learned so far.", 
    "Ruby's object oriented.", 
    "It has inheritance but no multiple inheritance.", 
    "Everything is an object, even things that are simple, like integers.", 
    "And class and instance variables are invisible once you", 
    "get outside the class.", 
    "You have to define accessors and setters for them.", 
    "Everything is a method call.", 
    "The only thing you care about is does the receiver respond to that method?", 
    "As we'll see this is a very powerful concept because it's not a matter of,", 
    "is the receiver of the right class or of the right type?", 
    "It's only whether it defines a method that you can call with that name.", 
    "This is going to be extremely useful.", 
    "And things that look like operators are really just methods.", 
    "They're syntactic sugar, and we're going to use that for some really", 
    "useful things as well.", 
    "Objects have types, variables don't.", 
    "I could say x equals 3, and in the next breath x equals quote foo, and", 
    "that's fine.", 
    "So x, the symbol, doesn't have a type.", 
    "Right?", 
    "But at any given time the value of x is some object.", 
    "That object does have a type.", 
    "So we can't tell--", 
    "unlike Java where variables carry the types around, in Ruby the variables", 
    "themselves are typeless.", 
    "But when you use the value of the variable, that value does have a type,", 
    "and that sometimes does matter.", 
    "And, lastly, most methods are non destructive.", 
    "They create and return a new copy of the thing they operate on.", 
    "But there's a few exceptions.", 
    "Most notably, methods like \"double less than,\" \"slap on the end of.\"", 
    "Sometimes there's methods that have both a destructive and a non", 
    "destructive version.", 
    "For example, there's a method on hash that's called \"merge,\" that merges two", 
    "hashes and returns a new object.", 
    "But there's also \"merge!\" Or \"merge bang\" which destroys one of its", 
    "arguments by modifying it.", 
    "So, in general, when you see an argument with a method name with a", 
    "bang on the end of it, it usually means danger, danger.", 
    "Be careful.", 
    "Make sure this is what you really want it to do."
  ]
}