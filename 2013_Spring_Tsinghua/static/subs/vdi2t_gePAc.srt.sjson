{
  "start": [
    870, 
    3570, 
    4170, 
    6630, 
    10700, 
    13630, 
    15020, 
    15970, 
    21290, 
    24640, 
    28340, 
    31770, 
    34020, 
    36500, 
    40400, 
    42560, 
    44270, 
    45780, 
    48920, 
    50250, 
    53850, 
    56820, 
    57860, 
    61500, 
    63530, 
    64879, 
    68490, 
    70170, 
    73910, 
    75440, 
    76810, 
    80150, 
    83660, 
    86550, 
    90470, 
    93750, 
    96350, 
    100420, 
    103380, 
    106710, 
    109230, 
    112690, 
    117140, 
    118630, 
    122555, 
    125630, 
    128729, 
    132320, 
    134790, 
    135400, 
    138880, 
    140380, 
    143070, 
    146510, 
    150220, 
    154300, 
    158270, 
    161120, 
    162990, 
    165930, 
    168960, 
    172210, 
    175650, 
    176440, 
    182950, 
    185970, 
    192820, 
    196850, 
    198630, 
    202290, 
    210780, 
    213570, 
    216400, 
    217270, 
    218450, 
    220790, 
    222780, 
    225120, 
    227850, 
    229870, 
    233125, 
    234420, 
    237930, 
    239750, 
    243650, 
    246950, 
    250850, 
    254530, 
    258630, 
    259709, 
    263970, 
    266850, 
    270540, 
    273540, 
    276840, 
    281790, 
    286280, 
    288740, 
    293090, 
    296530, 
    301410, 
    304720, 
    306410, 
    311780, 
    312770, 
    316340, 
    319490, 
    322780, 
    324970, 
    330300, 
    331560, 
    335160, 
    338830, 
    341000, 
    343770, 
    347560, 
    351640, 
    355320, 
    359380, 
    361090, 
    366220, 
    367420, 
    370940, 
    375380, 
    378360, 
    381840, 
    387650, 
    390090, 
    393920, 
    397030, 
    401800, 
    406510, 
    409440, 
    413530, 
    415440, 
    419180, 
    422650, 
    425560, 
    428370, 
    430970, 
    433370, 
    437580, 
    441740, 
    446080, 
    449450, 
    452260, 
    456080, 
    458650, 
    460230, 
    463950, 
    467680, 
    470320, 
    471970, 
    475930, 
    479960, 
    481940, 
    483990, 
    486760, 
    488550, 
    491350, 
    494550, 
    497360, 
    499500, 
    500470, 
    504570, 
    505800, 
    507300, 
    510070, 
    511230, 
    513330, 
    518470, 
    520140, 
    523230, 
    526250, 
    530190, 
    534050, 
    536690, 
    540230, 
    543530, 
    544310, 
    546570, 
    549090, 
    551140, 
    552640, 
    555330, 
    559190, 
    563260, 
    566280, 
    569630, 
    573290, 
    575440, 
    578960, 
    581960, 
    585350, 
    586790, 
    589250, 
    591660, 
    592410, 
    593750, 
    597640, 
    602230, 
    607090, 
    608070, 
    609850, 
    612860, 
    617010, 
    621740, 
    623660, 
    627300, 
    630070, 
    630970, 
    634210, 
    637340, 
    638700, 
    641970, 
    644860, 
    649500, 
    654530, 
    657690, 
    659750, 
    663550, 
    665630, 
    668560, 
    672610, 
    673860, 
    675930, 
    679140, 
    683140, 
    687430, 
    689480, 
    692270, 
    693320, 
    697500, 
    700570, 
    702460, 
    705450, 
    708160, 
    710700, 
    712070, 
    715980, 
    720030, 
    724570, 
    728210, 
    729520, 
    732550, 
    737970, 
    740590, 
    742850, 
    744380, 
    746880, 
    748110, 
    748820, 
    751100, 
    755330, 
    758450, 
    762190, 
    764490, 
    768090, 
    771760, 
    773230, 
    775420, 
    780290, 
    783592, 
    786620, 
    789410, 
    790840, 
    792820, 
    794390, 
    798040, 
    799330, 
    802750, 
    806870, 
    810650, 
    816070, 
    817220, 
    821670, 
    823340, 
    827240, 
    830380, 
    833710, 
    836840, 
    841040, 
    842210, 
    844970, 
    848000, 
    852950, 
    854120, 
    856810, 
    859160, 
    860620, 
    864390, 
    865400, 
    869920, 
    873420, 
    877170, 
    879420, 
    882280, 
    885210, 
    888330, 
    890290, 
    894650, 
    896470, 
    899660, 
    903570, 
    906710, 
    910050, 
    914530, 
    916820, 
    919610, 
    922790, 
    926870, 
    928850, 
    931240, 
    932450, 
    934830, 
    936850, 
    940410, 
    942720, 
    945850, 
    948820, 
    953070, 
    957560, 
    959320, 
    962310, 
    964760, 
    968340, 
    970600, 
    972510, 
    975270, 
    976440, 
    980110, 
    982750, 
    987000, 
    987870, 
    991130, 
    993850, 
    995660, 
    998920, 
    1002830, 
    1005830, 
    1010410, 
    1015110, 
    1017370, 
    1019640, 
    1023130, 
    1025829, 
    1026960, 
    1028680, 
    1031960, 
    1035200, 
    1038970, 
    1040089, 
    1043480, 
    1045118, 
    1048410, 
    1050450, 
    1053650, 
    1057290, 
    1059050, 
    1060960, 
    1063960, 
    1067410, 
    1069040, 
    1071540, 
    1074840, 
    1077440, 
    1081930, 
    1082450, 
    1087000, 
    1090560, 
    1093680, 
    1097173, 
    1099500, 
    1102200, 
    1103360, 
    1105800, 
    1106740, 
    1108340, 
    1111810, 
    1116320, 
    1118230, 
    1121290, 
    1125000, 
    1127870, 
    1129230, 
    1130350, 
    1135090, 
    1137280, 
    1138390, 
    1140680, 
    1143770, 
    1147550, 
    1150430, 
    1153180, 
    1154640, 
    1155720, 
    1158060, 
    1161600, 
    1163470, 
    1165690, 
    1167680, 
    1168290, 
    1169870, 
    1172320, 
    1175450, 
    1178770, 
    1179220, 
    1181520, 
    1185060, 
    1188050, 
    1195550, 
    1198980, 
    1201970, 
    1206340, 
    1209460
  ], 
  "end": [
    3570, 
    4170, 
    6630, 
    10700, 
    13630, 
    15020, 
    15970, 
    21290, 
    24640, 
    28340, 
    31770, 
    34020, 
    36500, 
    40400, 
    42560, 
    44270, 
    45780, 
    48920, 
    50250, 
    53850, 
    56820, 
    57860, 
    61500, 
    63530, 
    64879, 
    68490, 
    70170, 
    73910, 
    75440, 
    76810, 
    80150, 
    83660, 
    86550, 
    90470, 
    93750, 
    96350, 
    100420, 
    103380, 
    106710, 
    109230, 
    112690, 
    117140, 
    118630, 
    122555, 
    125630, 
    128729, 
    132320, 
    134790, 
    135400, 
    138880, 
    140380, 
    143070, 
    146510, 
    150220, 
    154300, 
    158270, 
    161120, 
    162990, 
    165930, 
    168960, 
    172210, 
    175650, 
    176440, 
    182950, 
    185970, 
    192820, 
    196850, 
    198630, 
    202290, 
    210780, 
    213570, 
    216400, 
    217270, 
    218450, 
    220790, 
    222780, 
    225120, 
    227850, 
    229870, 
    233125, 
    234420, 
    237930, 
    239750, 
    243650, 
    246950, 
    250850, 
    254530, 
    258630, 
    259709, 
    263970, 
    266850, 
    270540, 
    273540, 
    276840, 
    281790, 
    286280, 
    288740, 
    293090, 
    296530, 
    301410, 
    304720, 
    306410, 
    311780, 
    312770, 
    316340, 
    319490, 
    322780, 
    324970, 
    330300, 
    331560, 
    335160, 
    338830, 
    341000, 
    343770, 
    347560, 
    351640, 
    355320, 
    359380, 
    361090, 
    366220, 
    367420, 
    370940, 
    375380, 
    378360, 
    381840, 
    387650, 
    390090, 
    393920, 
    397030, 
    401800, 
    406510, 
    409440, 
    413530, 
    415440, 
    419180, 
    422650, 
    425560, 
    428370, 
    430970, 
    433370, 
    437580, 
    441740, 
    446080, 
    449450, 
    452260, 
    456080, 
    458650, 
    460230, 
    463950, 
    467680, 
    470320, 
    471970, 
    475930, 
    479960, 
    481940, 
    483990, 
    486760, 
    488550, 
    491350, 
    494550, 
    497360, 
    499500, 
    500470, 
    504570, 
    505800, 
    507300, 
    510070, 
    511230, 
    513330, 
    518470, 
    520140, 
    523230, 
    526250, 
    530190, 
    534050, 
    536690, 
    540230, 
    543530, 
    544310, 
    546570, 
    549090, 
    551140, 
    552640, 
    555330, 
    559190, 
    563260, 
    566280, 
    569630, 
    573290, 
    575440, 
    578960, 
    581960, 
    585350, 
    586790, 
    589250, 
    591660, 
    592410, 
    593750, 
    597640, 
    602230, 
    607090, 
    608070, 
    609850, 
    612860, 
    617010, 
    621740, 
    623660, 
    627300, 
    630070, 
    630970, 
    634210, 
    637340, 
    638700, 
    641970, 
    644860, 
    649500, 
    654530, 
    657690, 
    659750, 
    663550, 
    665630, 
    668560, 
    672610, 
    673860, 
    675930, 
    679140, 
    683140, 
    687430, 
    689480, 
    692270, 
    693320, 
    697500, 
    700570, 
    702460, 
    705450, 
    708160, 
    710700, 
    712070, 
    715980, 
    720030, 
    724570, 
    728210, 
    729520, 
    732550, 
    737970, 
    740590, 
    742850, 
    744380, 
    746880, 
    748110, 
    748820, 
    751100, 
    755330, 
    758450, 
    762190, 
    764490, 
    768090, 
    771760, 
    773230, 
    775420, 
    780290, 
    783592, 
    786620, 
    789410, 
    790840, 
    792820, 
    794390, 
    798040, 
    799330, 
    802750, 
    806870, 
    810650, 
    816070, 
    817220, 
    821670, 
    823340, 
    827240, 
    830380, 
    833710, 
    836840, 
    841040, 
    842210, 
    844970, 
    848000, 
    852950, 
    854120, 
    856810, 
    859160, 
    860620, 
    864390, 
    865400, 
    869920, 
    873420, 
    877170, 
    879420, 
    882280, 
    885210, 
    888330, 
    890290, 
    894650, 
    896470, 
    899660, 
    903570, 
    906710, 
    910050, 
    914530, 
    916820, 
    919610, 
    922790, 
    926870, 
    928850, 
    931240, 
    932450, 
    934830, 
    936850, 
    940410, 
    942720, 
    945850, 
    948820, 
    953070, 
    957560, 
    959320, 
    962310, 
    964760, 
    968340, 
    970600, 
    972510, 
    975270, 
    976440, 
    980110, 
    982750, 
    987000, 
    987870, 
    991130, 
    993850, 
    995660, 
    998920, 
    1002830, 
    1005830, 
    1010410, 
    1015110, 
    1017370, 
    1019640, 
    1023130, 
    1025829, 
    1026960, 
    1028680, 
    1031960, 
    1035200, 
    1038970, 
    1040089, 
    1043480, 
    1045119, 
    1048410, 
    1050450, 
    1053650, 
    1057290, 
    1059050, 
    1060960, 
    1063960, 
    1067410, 
    1069040, 
    1071540, 
    1074840, 
    1077440, 
    1081930, 
    1082450, 
    1087000, 
    1090560, 
    1093680, 
    1097173, 
    1099500, 
    1102200, 
    1103360, 
    1105800, 
    1106740, 
    1108340, 
    1111810, 
    1116320, 
    1118230, 
    1121290, 
    1125000, 
    1127870, 
    1129230, 
    1130350, 
    1135090, 
    1137280, 
    1138390, 
    1140680, 
    1143770, 
    1147550, 
    1150430, 
    1153180, 
    1154640, 
    1155720, 
    1158060, 
    1161600, 
    1163470, 
    1165690, 
    1167680, 
    1168290, 
    1169870, 
    1172320, 
    1175450, 
    1178770, 
    1179220, 
    1181520, 
    1185060, 
    1188050, 
    1195550, 
    1198980, 
    1201970, 
    1206340, 
    1209460, 
    1210710
  ], 
  "text": [
    "ARMANDO FOX: Certainly they're often, but not always, derived from explicit", 
    "requirements.", 
    "We seem to have universal agreement.", 
    "Just to make sure that we understand why green and red are not correct,", 
    "implicit requirements apply only to unit and functional,", 
    "not integration tests--", 
    "not necessarily.", 
    "For example, an integration test might talk about being able to do a", 
    "particular action at the level of the browser, but if doing that action", 
    "requires you to, for example, first be logged in as a valid user, that's", 
    "essentially an implicit requirement that comes from the explicit one, and", 
    "it's expressed at the level of an integration test.", 
    "It's a full stack level activity.", 
    "So the idea of explicit versus implicit could be applied at any level", 
    "of abstraction of testing.", 
    "Testing them is lower priority--", 
    "well, no, certainly not.", 
    "Because in our case, the idea that we're interacting with TMDB--", 
    "that's an integral part of the app.", 
    "We have to test what happens if anything goes wrong as part of that", 
    "interaction, because the effects of that will filter all the way back into", 
    "our model code.", 
    "So just because they don't come directly from the customer doesn't", 
    "make them any less important to test.", 
    "They're still requirements.", 
    "They just weren't spoken directly by the customer during the meeting.", 
    "Let's continue.", 
    "We've had a whirlwind overview here of unit level and some", 
    "functional level testing.", 
    "And remember the distinction--", 
    "in our case, unit-level tests pretty much stay within a class.", 
    "They may touch one or a few methods within that class.", 
    "Functional tests will often touch methods in different classes.", 
    "So for example, when we did some specs for the controller in the last", 
    "lecture, those were more like functional tests, because they", 
    "exercised the routing system, they exercised the controller, and they", 
    "exercised the rendering part of rails that decides how to set up a view.", 
    "So even though the focus was on testing the controller action,", 
    "technically, the way that the testing framework is set up, those were more", 
    "like functional tests, because they touch multiple classes.", 
    "They have a code path that goes through multiple classes.", 
    "And when you talked about Cucumber the previous week, those really are a form", 
    "of integration tests.", 
    "Now the way that we're using Cucumber, it's both an acceptance test, because", 
    "it's an executable specification of what the customer said they want.", 
    "It's also an integration test in the sense that it's full stack, right?", 
    "It starts all the way out from the browser, essentially, goes all the way", 
    "into the app, all the way to the database, and comes all the way back", 
    "to the browser.", 
    "And you're setting up preconditions and checking post-conditions from a", 
    "black box point of view, right?", 
    "From the point of view of an entire request all the way through.", 
    "So with this in mind, we can talk about a couple of other concepts.", 
    "Now that we have seen a variety of testing types, we can talk about", 
    "coverage, and we can also sort of take a step back and ask how this idea of", 
    "doing test-driven development compares with the way that I and probably many", 
    "of you used to write code.", 
    "So how much testing is enough?", 
    "The old answer was, well, we know when the shipping deadline is, so when that", 
    "deadline comes, we're done testing.", 
    "Arguably not the best way to write tests.", 
    "Now people have come up with various ways to measure enough, or", 
    "enough-ness.", 
    "The most primitive metric you could think of is a ratio between how many", 
    "lines of code in your app and how many lines of test in your app.", 
    "And the rules of thumb for this are really all over the place, but", 
    "something you could justify to me, and probably to a lot of software houses--", 
    "somewhere between one and two.", 
    "Now you might be thinking, did I accidentally reverse the ratio here?", 
    "Because in this case, the code-to-test ratio is only 1.2 to 1.5.", 
    "Having more test than code is not unusual.", 
    "Having more test than code is actually pretty much the norm in", 
    "most software houses.", 
    "Because if you think about it--", 
    "a method that is only five or six lines long--", 
    "there's a lot of paths through that method.", 
    "There's a lot of different ways that it could fail.", 
    "Depending on how many arguments it takes, there's many different ways", 
    "that combinations of arguments could affect it.", 
    "So there's only a small piece of code, but you need to test it and simulate", 
    "it in a lot of different ways.", 
    "But a better question, instead of just sort of comparing lines of code, is", 
    "you could ask questions about thoroughness.", 
    "Of all the possible ways that your code could run, how many of those ways", 
    "are exercised by your test suite?", 
    "Later in the semester, we'll talk a little bit about formal methods that", 
    "you could use to prove certain things about code paths that could or could", 
    "not be followed, and what it would mean to explore an entire space of", 
    "executions.", 
    "But for the moment, and for most of this class, we'll focus on the", 
    "not-formal method of coverage measurement.", 
    "I should point out that although until pretty recently, it wasn't terribly", 
    "common to see people in software engineering practice use a lot of", 
    "formal methods for proving things about code, but as the methods are", 
    "getting better, computers are getting faster, hybrid techniques that combine", 
    "symbolic or simulated execution with analysis of the code--", 
    "little by little, these methods are gaining more traction.", 
    "So toward the end, I'm hoping to have a guest speaker to talk about that.", 
    "For the moment, though, we're going to focus on measuring coverage.", 
    "And you'd think measuring how much of my code is covered by a particular set", 
    "of tests seems like it would be a pretty straightforward thing, but", 
    "there's actually a number of different ways to do it.", 
    "So one type of coverage, method coverage, is sort of the easiest thing", 
    "I can imagine.", 
    "When I ran my entire suite of tests, did every method in my app get called", 
    "at least once from some test?", 
    "I could talk about, did every method get called from every place from which", 
    "it could be called?", 
    "So in this example, I have the bar method, and I'm calling bar here and", 
    "I'm calling bar here.", 
    "So in order to get a 100 percent coverage at the S1 level, I have to", 
    "make sure that both this call and this call were executed at least once", 
    "during my test run.", 
    "C0 coverage is basically every statement.", 
    "So did every statement in the app get executed at least once?", 
    "And that's usually considering conditionals as a single statement.", 
    "So this entire if is a single statement for the purpose of C0", 
    "coverage, which means the next level up is C1 coverage-- does every branch", 
    "get taken in both directions?", 
    "So to get C1 coverage, in my simple example code here, I've got two", 
    "different branches.", 
    "I've got an if x branch, and I've got an if y and z branch.", 
    "And in fact, there is an additional variation on this called decision", 
    "coverage, which means, not only do I have to make sure that this if", 
    "statement gets taken in both directions, but I have to make sure", 
    "that this condition, y and z, is evaluated once when y causes it to", 
    "fail, once when z causes it to fail.", 
    "So every subexpression that contributes to the decision has to be", 
    "executed as both true and false.", 
    "So that's often called C1 with decision coverage added on.", 
    "And then C2, which is extremely difficult to get in practice, means", 
    "that every possible path through the code has been executed.", 
    "So again, in this case, I have an if with a nested if-- so I've got two", 
    "possible ways that it could go here.", 
    "Internally, I've got two additional ways that it could go.", 
    "And there's actually a fair amount of disagreement on--", 
    "it's hard to write a complete test that gives you a 100 percent C2", 
    "coverage, and not everybody agrees on how valuable that is.", 
    "And I'm going to leave it at that, because whatever I say, since not", 
    "everybody agrees on it, I'm going to annoy somebody.", 
    "But in practice, C0 and C1 coverage are pretty widely used.", 
    "And when we use the SimpleCov tool, which we're using in the next couple", 
    "of assignments, that's what we're measuring, is C0 coverage.", 
    "So what kinds of tests are appropriate?", 
    "The kinds of tests that we've seen so far, like we've said, at one extreme,", 
    "we've had unit tests, which is one method, one class.", 
    "And model specs would be an example of that, and our spec", 
    "test tests the model.", 
    "Functional or module tests, depending on the terminology you'll hear.", 
    "Like we've said, a controller action test is an example of this, because", 
    "even though the focus is a particular piece of code, it touches a couple of", 
    "others that it collaborates with--", 
    "in this case the routing subsystem and the rendering subsystem.", 
    "And then integration or system level test, which in the way we run the", 
    "course is like Cucumber scenario.", 
    "So how are these characterized?", 
    "Well, first of all, the unit tests tend to run a lot faster.", 
    "They don't take paths all the way through the code.", 
    "They're focused on one or a couple of methods.", 
    "In contrast, a Cucumber integration test is a complete path through the", 
    "app, including the browser, the application server,", 
    "and everything else.", 
    "Resolution.", 
    "When the test fails, how precisely does the failure pinpoint where the", 
    "problem is?", 
    "In a good unit test--", 
    "because a good unit really only tests one behavior--", 
    "it should be pretty obvious.", 
    "There's just not that many ways it can fail.", 
    "If the same unit test can fail in multiple different ways, it probably", 
    "either should be more than one test--", 
    "you're trying to test too many things within a single spec--", 
    "or maybe there's something you've forgotten to stub out.", 
    "Maybe your unit test tries to call some other method in another class,", 
    "and it can fail because its own logic is bad, or it can fail because it", 
    "tries to call a method that ends up having a bug in it.", 
    "Remember, the reason to use mocks and stubs is to avoid that situation, so", 
    "that when a unit test fails, it's pretty unambiguous why", 
    "the unit test failed.", 
    "There was only one way that it could go wrong.", 
    "Whereas if a Cucumber scenario fails--", 
    "and you may have already had this experience--", 
    "who knows what went wrong, right?", 
    "It's when I click some button or other-- well, when you click the", 
    "button, a route has to get resolved, a controller action has to get called,", 
    "it has to call the model, the view has to get rendered, and only at that", 
    "point can you talk about the Venn steps in Cucumber.", 
    "So there's a lot of places where something could go wrong in that flow,", 
    "and if the test fails, it probably will take you longer to narrow down", 
    "where in that flow things went wrong.", 
    "As a collection, you can get very high coverage from unit-level tests,", 
    "because you can sort of surgically measure your coverage and keep", 
    "enhancing your test suite until you've gotten to whatever level of, let's", 
    "say, C0 coverage you care about.", 
    "You get to 95 percent C0 coverage.", 
    "Getting to high coverage with integration tests is", 
    "really hard, right?", 
    "Because it's like a sledgehammer.", 
    "You're exercising your system from the outside, and at the level of a browser", 
    "page, it's really hard to simulate all the code paths internally.", 
    "The idea, by the way, is related to the fact that in unit", 
    "tests, what do we do?", 
    "We mock out everything we can, right?", 
    "Everything that's not related to the one functionality that we want to", 
    "test, we want to isolate from ways that other things could go wrong.", 
    "So it's very common to have a lot of mocks and stubs so we can have very", 
    "fine-grained tests.", 
    "In contrast, when we're doing these full-stack or integration tests, we", 
    "should minimize the number of mocks, because this is where we want to be", 
    "most realistic, right?", 
    "We're exercising the entire framework.", 
    "And of course the other side of that coin is that, well, if you", 
    "have a lot of mocks--", 
    "if I'm mocking out the cost of all the classes I collaborate with--", 
    "I'm basically not testing those interfaces, right?", 
    "I may have what I believe to be the API between the movie model and the", 
    "movie-goer model, but if all of my unit tests for movies mock out what", 
    "the review model or the movie-goer model does, then I'm basically", 
    "omitting coverage for those tests.", 
    "So I had better have either some functional tests or some integration", 
    "tests that do exercise those APIs.", 
    "Otherwise there's going to be a gaping hole in my tests.", 
    "Other terms that you may hear that are different from the ones we use, and", 
    "other techniques for testing.", 
    "Mutation testing is a really cool technique.", 
    "Basically it says, I'm going to introduce a random error into the", 
    "program that doesn't cause a syntax error, but is a logic bug.", 
    "So an example might be an expression that is supposed to evaluate to if", 
    "true, I'm going to change to if false.", 
    "Or I'm going to change a less than sign to a greater than sign in a", 
    "numerical expression.", 
    "So I'm going to introduce a logic bug that is syntactically correct, and if", 
    "doing that doesn't cause some test to fail, then there's a", 
    "hole in my test coverage.", 
    "I introduced a bug, and nothing bad happened.", 
    "And by the way, this is the way that one of the auto-graders works.", 
    "When we're going to ask you guys to write tests, that's the way we're", 
    "going to test your tests.", 
    "We have a version of the app that we can introduce bugs into, and make sure", 
    "that when we introduce certain bugs, certain of your tests will fail.", 
    "Fuzz testing, which is very widely used in industry, is basically the", 
    "monkeys with typewriters approach to testing, especially for", 
    "software as a service.", 
    "Suppose you throw a random input at your application.", 
    "You fill out fields randomly, you send random network traffic to the HTTP", 
    "port, you have URLs that are a megabyte long.", 
    "What happens when you exercise the app in ways that it", 
    "wasn't meant to be used?", 
    "Because we notice, as testers, when we write our own tests--", 
    "and I'm guilty of this, right?", 
    "We're all going to be guilty.", 
    "Even when you're doing test-first development, and you're absolutely", 
    "trying to do it by the book, you know your code, so you're inclined to write", 
    "tests that check the ways you think things could go wrong.", 
    "In other words, if the app is used in a normal manner, what are typical", 
    "errors that could happen, and did you handle them properly?", 
    "But one big difference between software as a service and shrinkwrap", 
    "software is, in software as a service, your app is a target, right?", 
    "It's deployed publicly.", 
    "Who knows what input people are going to supply?", 
    "So a large number of bugs at Microsoft are found this way.", 
    "A study from about three years ago found that you could crash about 25", 
    "percent of the standard Unix utilities by just giving them", 
    "enough random input.", 
    "Define use coverage.", 
    "We're not going to use it in this class, but you might", 
    "hear the term DU coverage.", 
    "Basically it means, any time that I have some variable being defined--", 
    "it's assigned a value--", 
    "and then somewhere downstream of that point, the value is being consumed in", 
    "another expression, does my test coverage hit every possible pair?", 
    "So if I've got two places where x could be set up, and two different", 
    "code paths that follow that x's value gets used, those are four pairs of", 
    "define and use.", 
    "And for DU completeness, I would have to have tests that cover every one of", 
    "those code paths.", 
    "It's a weaker condition than C2, which is all paths coverage, but a stronger", 
    "condition by far than C1.", 
    "You might also hear the terms black box testing and white box testing.", 
    "Or sometimes you'll hear glass box testing.", 
    "Roughly speaking, the most common use of these terms is in how you approach", 
    "your unit tests.", 
    "If the unit test is written in a way that doesn't know anything about the", 
    "implementation, roughly speaking, that's a black box test.", 
    "So for example, if I'm trying to test a hash table that I've created, a", 
    "black box test would be--", 
    "I'm going to create a bunch of keys, and I'm going to make sure that when I", 
    "store them with a certain value, and I read them all back, I", 
    "get the right values.", 
    "Whereas the white box or glass box test knows something about the", 
    "implementation.", 
    "So for example, if I'm doing a glass box test of that same hash table, if I", 
    "know how the hash function works and I can predict which values would cause a", 
    "hash collision, I can create a test that deliberately causes collisions to", 
    "make sure that that's handled properly.", 
    "So it's a test that relies on my knowledge of how the implementation", 
    "works, not just how the interface works.", 
    "Again, we won't use these terms that much, but if you hear them, now you", 
    "know what they are.", 
    "Philosophically we can talk about good and bad ways to use testing and test", 
    "coverage metrics.", 
    "The way a lot of people used to write tests, maybe even some of you,", 
    "including me, is you add some features, you code up some stuff, you", 
    "deploy it, you fire a couple of URLs at it, and it works.", 
    "So therefore, all other inputs must also work.", 
    "This is the way, distressingly, a lot of testing is done.", 
    "When people say, we're in startup mode, we don't have time to write", 
    "thorough tests, this is what they mean.", 
    "The other extreme is, you can get compulsive about it and say, well,", 
    "until we get 100 percent C0 coverage with all-green tests in our spec,", 
    "we're not allowed to ship the product.", 
    "And the truth is that this doesn't tell you anything about the", 
    "quality of the tests.", 
    "It just means that you've exercised all the lines of code.", 
    "But maybe you haven't exercised them in interesting ways.", 
    "Maybe your input values, your test cases, are trivial.", 
    "So the truth lies somewhere in between, right?", 
    "Coverage is a tool, like any other tool, and you should use it to", 
    "identify parts of your app that are clearly undertested.", 
    "If there's parts of your app where you've got 50 percent test coverage,", 
    "those parts probably would benefit from a little love, but either extreme", 
    "is unhealthy.", 
    "Similarly, some people will say, well, unit tests are more thorough.", 
    "They run fast, and you can pinpoint the source of bugs.", 
    "So focus your energy on having better test coverage at that level.", 
    "Others might say, well, yeah, but unit tests aren't realistic.", 
    "They don't test interfaces between things.", 
    "They don't test the interactions among different layers or different", 
    "components in your app.", 
    "So you should run a lot of integration tests to make sure that you get those.", 
    "And again, obviously both are important.", 
    "You don't have time to necessarily do all of both, but each will find bugs", 
    "that the other misses.", 
    "So again, you can use things like test coverage to guide your efforts, right?", 
    "What are the parts of my app that clearly would benefit from more", 
    "coverage, and what are the parts of my app that are", 
    "probably OK at this point?", 
    "I think we can close out our introduction to testing with--", 
    "I sat down at one point to compare, since I used to do what I'll call", 
    "conventional debugging, which is the unpleasant kind, right?", 
    "And how does this compare to, now that I've started using TDD pretty", 
    "religiously, I would say?", 
    "In the old way, how would I code?", 
    "Well, I would write a few methods, a few tens of lines of code.", 
    "I would run the program, being sure that it was going to work, but of", 
    "course it wouldn't.", 
    "So then a bug would happen.", 
    "Depending on the bug, it might crash, it might drop into a debugger, it", 
    "might just give the wrong answer.", 
    "So instead, with TDD, instead of writing a bunch of lines,", 
    "I write a few lines.", 
    "I write a test first, and because I've only written a few lines of code,", 
    "there's not that much that could go wrong.", 
    "If it doesn't break, I won't have far to look until I can figure out what", 
    "the problem was.", 
    "How do I debug in the old, bad way?", 
    "I start putting print f's everywhere to print out the values of variables", 
    "every-- oh, that the problem is not there.", 
    "Let me put in another printf and do it again.", 
    "And by the time you're done, you've got like 20 lines of stuff that's", 
    "printf with 25 asterisks, and you can see it, and then you forget to take", 
    "them out, and it's embarrassing.", 
    "Or you could write expectations, right?", 
    "We saw how to write expectations with should and should_not.", 
    "You get an immediate message that does the same thing that your print", 
    "statement would have done, but you get it associated with just one test", 
    "that's failing.", 
    "And by the way, as a bonus, it's printed in red, so you can see it.", 
    "If that's not enough, I say, OK, printf is not telling me the problem.", 
    "I'm going to put in a debug break point, I'm going to drop into the", 
    "debugger, and once I'm in there, I'm going to set some variables up, I'm", 
    "going to null out that variable, I'm going to change the value of this--", 
    "I'm going to set up the world so that I hit that one little place that I", 
    "want to test.", 
    "I hit that one place-- ah, I see what the problem is.", 
    "I fix it.", 
    "Now I'm sure it's going to run.", 
    "But of course it doesn't, because I didn't fix all the bad cases.", 
    "Or, in our new and improved technique, I could just use mocks and stubs in my", 
    "test to control the code path.", 
    "Instead of dropping into the debugger and manually setting up the world so", 
    "that one line gets executed, I set up the world in advance by mocking and", 
    "stubbing the things that I want to isolate the test from.", 
    "And now I can do it repeatedly, right?", 
    "I can automate it.", 
    "So the last step is, even though I was sure that this long, tedious excursion", 
    "has fixed the bug, of course I didn't, and now I have to", 
    "do all of that again.", 
    "I have to go back into the debugger, have to remember the three different", 
    "variables that I tweaked, and hopefully this time I'll get it right.", 
    "Or if I have a properly constructed test, and auto test is running, I just", 
    "sit back and watch the results.", 
    "So at the end of the day, what I concluded is, I'm using", 
    "all the same skills.", 
    "How do you use a debugger?", 
    "How do you specifically check the condition you want?", 
    "But I'm doing it more productively, because I'm frontloading the process", 
    "instead of backloading the process.", 
    "And that's really the second observation, and the one that gives", 
    "people pause when they start doing this.", 
    "Oh, TDD.", 
    "This takes a long time.", 
    "Well, it does, but debugging takes a long time, too.", 
    "The only difference is, here, you spend the time up front, and in my", 
    "experience, you actually end up spending less time overall if you do", 
    "it this way.", 
    "So hopefully, you all will try to do this.", 
    "And you'll trust us and have a little faith, and you'll make the same", 
    "discoveries that we've made.", 
    "So given this, which of these would be poor advice for TDD?", 
    "In your unit tests, you should mock and stub early and often.", 
    "You should aim for high coverage in unit tests.", 
    "Sometimes it's OK to use stubs and mocks in integration tests.", 
    "And unit tests give you higher confidence of system correctness than", 
    "integration tests."
  ]
}