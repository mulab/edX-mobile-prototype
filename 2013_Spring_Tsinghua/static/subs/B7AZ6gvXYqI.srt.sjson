{
  "start": [
    0, 
    4860, 
    9950, 
    12830, 
    16059, 
    18320, 
    21580, 
    24120, 
    25150, 
    29870, 
    32119, 
    34980, 
    37100, 
    39080, 
    42540, 
    45890, 
    47400, 
    51660, 
    53190, 
    54970, 
    58380, 
    59480, 
    61910, 
    63540, 
    69500, 
    70670, 
    73000, 
    74280, 
    77230, 
    80520, 
    82400, 
    83170, 
    86800, 
    91390, 
    92420, 
    97500, 
    99700, 
    101220, 
    103310, 
    104400, 
    113020, 
    115630, 
    118220, 
    122860, 
    123740, 
    125060, 
    126880, 
    128650, 
    135900, 
    140090, 
    142690, 
    144480, 
    147140, 
    149160, 
    159200, 
    160650, 
    161860, 
    164910, 
    166870, 
    171330, 
    174370, 
    177540, 
    179090, 
    181160, 
    182420, 
    184310, 
    185870, 
    188660, 
    192220, 
    195060, 
    195910, 
    199610, 
    204020, 
    207900, 
    209010, 
    212360, 
    213750, 
    214310, 
    216500, 
    217730, 
    221320, 
    225250, 
    228300, 
    231460, 
    233550, 
    235530, 
    238000, 
    242770, 
    244940, 
    249335, 
    252380, 
    253820, 
    257180, 
    262860, 
    266590, 
    268320, 
    270850, 
    273230, 
    275540, 
    280370, 
    283120, 
    285820, 
    289250, 
    292850, 
    295510, 
    298700, 
    302210, 
    308000, 
    315170, 
    317370, 
    319640, 
    321960, 
    329400, 
    331370, 
    333890, 
    336910, 
    340220, 
    347115, 
    349500, 
    351320, 
    355250, 
    358070, 
    358980, 
    360560, 
    363620, 
    366710, 
    367680, 
    371280, 
    374210, 
    378900, 
    393340, 
    398710, 
    402250, 
    410980, 
    411210, 
    413980, 
    415660, 
    416460, 
    418350, 
    419040, 
    422630, 
    424670, 
    427850, 
    430890, 
    432730, 
    434500, 
    436090, 
    437460, 
    440640, 
    444560, 
    445270, 
    448300, 
    450700, 
    452150, 
    454940, 
    458690, 
    461910, 
    464010, 
    466950, 
    470700, 
    471670, 
    475880, 
    477720, 
    479760, 
    485150, 
    488760, 
    490220, 
    491860, 
    494670, 
    496360, 
    499440, 
    503280, 
    506230, 
    509080, 
    512530, 
    516140, 
    519580, 
    521950, 
    525720, 
    529260, 
    531570, 
    533820, 
    535180, 
    539370, 
    540440, 
    543620, 
    545730, 
    548290, 
    549200, 
    552880, 
    554540, 
    558600, 
    561245, 
    562410, 
    566050, 
    567390, 
    571440, 
    572210, 
    577390, 
    580720, 
    581700, 
    583780, 
    587100, 
    590520
  ], 
  "end": [
    4860, 
    9950, 
    12830, 
    16059, 
    18320, 
    21580, 
    24120, 
    25150, 
    29870, 
    32119, 
    34980, 
    37100, 
    39080, 
    42540, 
    45890, 
    47400, 
    51660, 
    53190, 
    54970, 
    58380, 
    59480, 
    61910, 
    63540, 
    69500, 
    70670, 
    73000, 
    74280, 
    77230, 
    80520, 
    82400, 
    83170, 
    86800, 
    91390, 
    92420, 
    97500, 
    99700, 
    101220, 
    103310, 
    104400, 
    108210, 
    115630, 
    118220, 
    119900, 
    123740, 
    125060, 
    126880, 
    128650, 
    132260, 
    140090, 
    142690, 
    144480, 
    147140, 
    149160, 
    155910, 
    160650, 
    161860, 
    164910, 
    166870, 
    168680, 
    174370, 
    177540, 
    179090, 
    181160, 
    182420, 
    184310, 
    185870, 
    188660, 
    192220, 
    195060, 
    195910, 
    199610, 
    204020, 
    207900, 
    209010, 
    212360, 
    213750, 
    214310, 
    216500, 
    217730, 
    221320, 
    225250, 
    228300, 
    231460, 
    233550, 
    235530, 
    238000, 
    242770, 
    244940, 
    249335, 
    252380, 
    253820, 
    257180, 
    262860, 
    266590, 
    268320, 
    270850, 
    273230, 
    275540, 
    280370, 
    283120, 
    285820, 
    289250, 
    292850, 
    295510, 
    298700, 
    302210, 
    303460, 
    315170, 
    317370, 
    319640, 
    321960, 
    329400, 
    331370, 
    333890, 
    336910, 
    340220, 
    347115, 
    349500, 
    351320, 
    355250, 
    358070, 
    358980, 
    360560, 
    363620, 
    366710, 
    367680, 
    371280, 
    374210, 
    376115, 
    382520, 
    394590, 
    399960, 
    404180, 
    411210, 
    413980, 
    415660, 
    416460, 
    418350, 
    419040, 
    422630, 
    424670, 
    427850, 
    430890, 
    432730, 
    434500, 
    436090, 
    437460, 
    440640, 
    444560, 
    445270, 
    448300, 
    450700, 
    452150, 
    454940, 
    458690, 
    461910, 
    464010, 
    466950, 
    470700, 
    471670, 
    475880, 
    477720, 
    479760, 
    485150, 
    488760, 
    490220, 
    491860, 
    494670, 
    496360, 
    499440, 
    503280, 
    506230, 
    509080, 
    512530, 
    516140, 
    519580, 
    521950, 
    525720, 
    529260, 
    531570, 
    533820, 
    535180, 
    539370, 
    540440, 
    543620, 
    545730, 
    548290, 
    549200, 
    552880, 
    554540, 
    558600, 
    561245, 
    562410, 
    566050, 
    567390, 
    571440, 
    572210, 
    577390, 
    580720, 
    581700, 
    583780, 
    587100, 
    590520, 
    591770
  ], 
  "text": [
    "ARMANDO FOX: OK, so I briefly alluded in the last segment to say, the idea", 
    "that you can create new code on the fly after the program is running, is", 
    "called metaprogramming, and that we're going to see a lot more of it.", 
    "So I'll give you a start on that right now.", 
    "And we're going to define an international bank account.", 
    "This is similar to what's going on in the homework.", 
    "By international, I mean that we want to be able to deposit other", 
    "currencies.", 
    "So, a naive, unbeautiful way to do this is, we could say, well, normally", 
    "deposit expects the amount to be in dollars.", 
    "But if we define some helper functions, like euros to dollars, then", 
    "we could deposit euros instead of dollars.", 
    "But that is far from being beautiful and readable.", 
    "That doesn't make you weep, the way we did in that first segment, when we saw", 
    "code that was so transparent, it didn't even need to be commented.", 
    "So what can we do instead?", 
    "Well, if that's not beautiful, what we would really like, is to say", 
    "something like this.", 
    "Deposit 20 euros.", 
    "Again, if you can read it and it says what it does, you're on the right", 
    "track, right.", 
    "This is what you aim for as a programmer.", 
    "So, how can we do this?", 
    "Well, at first glance it might seem problematic because, we have an object", 
    "and we're calling a method on it.", 
    "But 20 is just a plain old number, that means it's", 
    "an instance of numeric.", 
    "That's a built-in class, it's not one that we've created ourselves.", 
    "Yet we're purporting to call this method that we do", 
    "want to create ourselves.", 
    "Not a problem.", 
    "Ruby has open classes, enough rope to hang yourself, kids.", 
    "We'll just reopen the class numeric, and we'll define our method.", 
    "Here it is.", 
    "When you pass a number to euros, that number will be multiplied by whatever", 
    "the exchange rate was when I made these slides.", 
    "Things the way being the way they are now, it's", 
    "probably not as good anymore.", 
    "And that's it.", 
    "So in fact, we can use pastebin to prove this really works.", 
    "There we go.", 
    "I will copy the code.", 
    "I will paste it into my Ruby terminal windows.", 
    "OK.", 
    "So far, so good.", 
    "No magic here, this is like basic Ruby.", 
    "Y'all will be doing this by tomorrow.", 
    "So, let's level up the game a bit.", 
    "What about that?", 
    "I mean, it's fine when we're doing euros, because that was the name of", 
    "the method we defined.", 
    "1.euros would just seem wrong, wouldn't it?", 
    "We also want to call 1.euro.", 
    "We could define a euro method that just delegates to euros, but no.", 
    "That's not beautiful enough.", 
    "Here's a more beautiful way to do it.", 
    "It's not going to look beautiful at first, but work with me here and I'll", 
    "show you why it is.", 
    "I'll even make the text a little bigger so you can read it.", 
    "One of the neat things of metaprogramming is that Ruby gives you", 
    "a hook, to rescue yourself from a situation where you've called a method", 
    "that doesn't really exist.", 
    "And they would say well, why would you want to rescue from a", 
    "situation like that.", 
    "Clearly the programmer was doing the wrong thing.", 
    "Well no, not necessarily, right?", 
    "In this case, the method euro doesn't exist.", 
    "But the method euros exists, and it's perfectly reasonable to have euro do", 
    "the same thing that euros does, but just be more readable for the", 
    "programmer.", 
    "So here's a way to do it that's non-naive.", 
    "So when method missing is called, it will be passed the name of the method", 
    "that doesn't exist, and we can check whether the string name of that method", 
    "is the word euro.", 
    "And if so, we'll just call it the euros method instead.", 
    "What if it's not?", 
    "No problem.", 
    "We'll just call super, that means we're going to punt up", 
    "to the super class.", 
    "Remember that Ruby has an inheritance, the same as Java does.", 
    "So, method missing is going to be called on numeric as a last resort,", 
    "just to ask numeric hey, you've got one last chance to handle this call.", 
    "But if you punt, I'm going to just pass it up to whoever your ancestor", 
    "class is and see if they can deal with it, right.", 
    "So, suppose we actually try to use this.", 
    "We're going to make singulars work.", 
    "And we'll copy and paste.", 
    "Ooh, that worked.", 
    "Now, I can imagine some of you already saying, it would've been shorter to", 
    "just write the euro method separately, right.", 
    "And it would have in this case.", 
    "But if we now want to start adding other currencies, you can see that", 
    "this is a pretty general template for other ways to extend our bank account.", 
    "Because now, if we want to add other currencies, what will be a", 
    "dry way to do this?", 
    "Meaning that we can reuse some of the work we've already done, without", 
    "repeating ourselves.", 
    "Well, here's one way to do it.", 
    "Let's just define a class variable, whose value is the conversion rates.", 
    "There we go, for the different currencies we want to convert.", 
    "And we'll just generalize method missing a little bit.", 
    "If our currencies array has a key corresponding to whatever the method", 
    "call was, then we'll singularize it, and call that.", 
    "Otherwise, once again, we'll punt up to the super class.", 
    "So now, when we want to add new currencies, all we've got to do is add", 
    "more key value pairs to this array, and we're good to go.", 
    "So let's do that.", 
    "Now I know this isn't grammatically correct, but it does prove my point.", 
    "Normally I care a lot about grammatical correctness, but when it", 
    "comes to code, I care more about proving my point.", 
    "So why did we do this?", 
    "Well, suppose we wanted to add another currency, we could", 
    "add the peso currency.", 
    "I just came from a vacation in Mexico, so I've kind of got", 
    "pesos on the brain.", 
    "And we know what its exchange rate is.", 
    "Well, we could go back and modify our original class variable, right, where", 
    "we had the names of all the currencies and hash.", 
    "But that's not terribly extensible.", 
    "That means that we actually have to go back and change the source code, just", 
    "to add an extension to a new currency.", 
    "Eww, right.", 
    "That should immediately strike you as bad.", 
    "If you have to change the source code to do something as basic as adding a", 
    "new currency, something's clearly broken there.", 
    "But that's cool.", 
    "We'll just define another method, and in this case it's going to be a class", 
    "method, because we're going to add a currency to the class.", 
    "We're just going to add a new entry to that hash.", 
    "Here, let's copy this and use it in real life.", 
    "Pretty neat.", 
    "Anybody have a favorite currency?", 
    "OK, and what's this number?", 
    "Right.", 
    "And notice that it works in both singular and plural.", 
    "This is pretty cool.", 
    "Let's take a step back here.", 
    "We wrote five lines of code.", 
    "What have we done?", 
    "We've given the ability to easily add another currency during runtime,", 
    "without going back and changing the source.", 
    "And we've added it so that it automatically singularizes or", 
    "pluralizes whichever version of the two you call.", 
    "That's a good use of metaprogramming.", 
    "There are many bad uses of metaprogramming.", 
    "It's a dual use technology.", 
    "But I'm trying to show you the good uses.", 
    "That you get used to the fact that if as a programmer you think, it would be", 
    "much easier to maintain this code if I could just do this, surprisingly often", 
    "you can do it, right.", 
    "And we're trying to give you the arsenal of tools that", 
    "helps you to do it.", 
    "And by the way, you have the slides.", 
    "You can go back to pastebin and look at all this stuff.", 
    "So, what's introspection, what's metaprogramming?", 
    "Introspection is asking objects questions about themselves.", 
    "Do you respond to this method call?", 
    "You can use this information to generate new code at runtime, and as", 
    "we've just seen, you can reopen a class at runtime and you can add stuff", 
    "do it, right.", 
    "So to put my statement in perspective, when I said all programming is", 
    "metaprogramming, what do I mean by that?", 
    "Here's what I mean.", 
    "When we say, when Ruby loads a file and it sees something that starts with", 
    "a declaration like class numeric, in a compiled language like Java that's a", 
    "declaration, right.", 
    "It is a statement of intent.", 
    "This is a class, and here's what all is going to go down.", 
    "But in Ruby, that's not what it is.", 
    "In Ruby, class is actually a method, right.", 
    "Class is a method that says ah, you're going to give me a constant.", 
    "The new constant named numeric, and I'm going to create an object", 
    "representing the class numeric.", 
    "Now, within that object, I can define some class methods, right.", 
    "This is why self.add_currency is a class method, because inside the", 
    "context of class numeric, self refers to the object", 
    "representing the class itself.", 
    "This is a weird concept if you haven't seen this language before, right.", 
    "The numeric class, what we think of as a class, oh it's a collection of", 
    "methods, maybe there's instance variable.", 
    "In Ruby, that thing is an object, because everything", 
    "is an object, right.", 
    "Numeric, as a class is an object, and it's created when the program says", 
    "class numeric.", 
    "Or if it's already existing, then it's oh, you're going to reopen class", 
    "numeric and add some stuff to it, right.", 
    "So, when I say all programming is metaprogramming, that's what this", 
    "really means.", 
    "When you say class numeric, you are causing new code to be executed which", 
    "is adding stuff to that class.", 
    "When you say class, my new class that nobody's ever seen, you are at runtime", 
    "creating a new object to represent this new class that's going to have", 
    "some methods in it.", 
    "Again, as you start doing more Ruby programming and metaprogramming, this", 
    "is going to become very familiar.", 
    "But if you haven't seen this before, do not let it freak you out.", 
    "OK.", 
    "So, with that in mind, here's a metaprogramming question for you.", 
    "We want to go even further, and be able to actually do command line", 
    "conversions like this one.", 
    "Five euros in rupees.", 
    "So, if we're going to do this by changing the numeric class, like we", 
    "did in the previous example, what type of change is the most", 
    "appropriate to make?"
  ]
}