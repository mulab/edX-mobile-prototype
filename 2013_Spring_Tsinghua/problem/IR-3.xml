<problem display_name="RottenPotatoes Enhancement #3: Remember the Settings"><startouttext/><p>
Now that you have implemented parts 1 and 2, the user can click on the "Movie Title" or "Release Date" headings and see movies
sorted by those columns, and can additionally use the checkboxes to restrict the listing to
movies with certain ratings only. Moreover, we have preserved RESTfulness, because the URI itself
always contains the parameters that will control sorting and filtering.
</p><p>
The last step is to remember these settings. That is, if 

  <ul><li>the user has selected any combination of column sorting and restrict-by-rating constraints, </li><li>and then the user clicks to see the details of one of the movies (for example), </li></ul>
then when she clicks "Back to movie list" on the detail page, the
movie listing should "remember" the user's sorting and filtering settings from before.
</p><p>(<i>Clicking away from the list to see the details of a movie is only one example; the settings
should be remembered regardless of what actions the user takes, so that any time she visits the
index page, the settings are correctly reinstated.</i>)</p><p>
The best way to do the "remembering" will be to use the <code>session[]</code> hash. The session is like
the <code>flash[]</code>, except that once you set something in the <code>session[]</code> it is remembered "forever"
until you nuke the session with <code>session.clear</code> or selectively delete things from it with
<code>session.delete(:some_key)</code>. That way, in the index method, you can selectively apply
the settings from the <code>session[]</code> even if the incoming URI doesn't have the appropriate
<code>params[]</code> set.
</p><p>
To be RESTful, we want to preserve the property that a URI that results in a sorted/filtered view always contains the corresponding sorting/filtering parameters. Therefore,
if you find that the incoming URI is lacking the right <code>params[]</code> and you're forced to
fill them in from the <code>session[]</code>, the RESTful thing to do is to <code>redirect_to</code> the new
URI containing the appropriate parameters. There is an important corner case to keep
in mind here, though: if the previous action had placed a message in the <code>flash[]</code>
to display after a redirect to the movies page, your additional redirect will delete that
message and it will never appear, since the <code>flash[]</code> only survives across a single
redirect. To fix this, use <code>flash.keep</code> right before your additional redirect.</p><b><i>Specific Requirements</i></b>:
  <ul><li>If the user explicitly includes new sorting/filtering settings in <code>params[]</code>, the values stored in the 
<code>session</code>
should not override them. On the contrary, the new settings should be remembered in
the session.
    </li><li>
If a user unchecks all checkboxes, use the settings stored in the <code>session[]</code> hash (it
doesn't make sense for a user to uncheck all the boxes).
    </li></ul><p>
You will submit a text file, containing a single line with the url of your heroku deployment. The url will look like this:
<code>http://your-app-name.herokuapp.com</code><br/></p><endouttext/><coderesponse queuename="BerkeleyX-cs169x-p2"><filesubmission points="100"/><codeparam><grader_payload>assign-2-part-3</grader_payload></codeparam></coderesponse></problem>
