{
  "start": [
    2000, 
    5370, 
    6870, 
    9490, 
    9780, 
    13600, 
    16510, 
    19020, 
    22040, 
    23200, 
    26800, 
    27700, 
    32119, 
    33670, 
    36070, 
    36350, 
    38500, 
    39020, 
    40770, 
    43780, 
    43850, 
    45190, 
    45340, 
    48530, 
    51080, 
    51600, 
    53130, 
    57260, 
    59450, 
    61660, 
    64390, 
    68050, 
    70430, 
    72110, 
    75620, 
    78690, 
    83890, 
    85620, 
    88280, 
    90010, 
    92050, 
    93430, 
    95800, 
    97210, 
    101020, 
    102050, 
    103190, 
    106660, 
    108790, 
    112260, 
    115830, 
    118380, 
    121180, 
    122330, 
    124790, 
    125870, 
    126580, 
    127370, 
    130520, 
    132790, 
    133150, 
    138490, 
    141300, 
    145720, 
    150020, 
    153760, 
    158870, 
    163210, 
    165940, 
    169280, 
    170080, 
    172650, 
    174270, 
    176420, 
    177980, 
    180230, 
    180500, 
    183730, 
    184590, 
    188140, 
    190310, 
    193740, 
    195640, 
    199740, 
    201940, 
    204250, 
    208070, 
    209270, 
    213900, 
    214800, 
    217220, 
    218850, 
    220960, 
    225950, 
    230700, 
    231610, 
    234090, 
    236090, 
    242590, 
    246480, 
    249800, 
    252070, 
    253590, 
    254870, 
    257709, 
    260529, 
    264290, 
    265330, 
    268260, 
    271790, 
    273570, 
    275950, 
    278550, 
    281550, 
    284630, 
    285750, 
    288020, 
    292240, 
    295850, 
    300150, 
    301670, 
    303820, 
    307410, 
    310540, 
    311570, 
    314120, 
    317990, 
    320740, 
    326140, 
    329750, 
    331710, 
    333790, 
    338570, 
    341310, 
    343480, 
    344040, 
    347760, 
    349710, 
    351140, 
    352760, 
    357000, 
    358310, 
    362970, 
    367000, 
    369570, 
    373630, 
    376770, 
    378970, 
    381620, 
    388260, 
    388512, 
    390790, 
    394240, 
    395320, 
    399830, 
    402000, 
    406450, 
    409210, 
    412890, 
    416470, 
    420880, 
    424200, 
    427190, 
    428620, 
    430030, 
    433580, 
    435840, 
    439500, 
    441490, 
    445540, 
    448550, 
    452500, 
    455040, 
    458430, 
    462230, 
    464050, 
    467730, 
    471550, 
    473110, 
    476750, 
    478370, 
    481360, 
    483850, 
    489080, 
    494800, 
    499690, 
    502250, 
    503810, 
    507130, 
    508250, 
    510300, 
    515010, 
    519919, 
    522650, 
    526000, 
    529090, 
    532770, 
    533860, 
    537220, 
    540460, 
    544990, 
    547780, 
    551600, 
    554430, 
    557240, 
    558350, 
    558720, 
    562570, 
    563730, 
    566160, 
    567270, 
    569290, 
    573750, 
    576970, 
    578420, 
    580440, 
    582690, 
    586850, 
    589860, 
    593110, 
    594940, 
    599090, 
    603600, 
    606840, 
    608400, 
    612220, 
    615140, 
    620720, 
    625380, 
    629060, 
    632640, 
    634660, 
    635860, 
    639590, 
    641100, 
    643880, 
    644600, 
    644790, 
    646680, 
    649730, 
    653180, 
    654640, 
    659020, 
    662470, 
    664540, 
    665840, 
    667550, 
    670730, 
    673260, 
    677880, 
    679550, 
    682250, 
    685160, 
    689470, 
    693040, 
    694420, 
    697450, 
    701300, 
    703410, 
    706530, 
    711020, 
    714360, 
    716240, 
    719610, 
    723300, 
    724720, 
    727670, 
    728790, 
    731835, 
    732710, 
    736750, 
    740260, 
    744430, 
    745880, 
    748600, 
    751770, 
    754860, 
    756320, 
    761960, 
    765590, 
    769690, 
    772420, 
    773820, 
    775720, 
    776400, 
    780160, 
    782440, 
    786150, 
    789510, 
    795320, 
    797280, 
    801580, 
    805030, 
    806180
  ], 
  "end": [
    5370, 
    6870, 
    9490, 
    9780, 
    13600, 
    16510, 
    19020, 
    22040, 
    23200, 
    26800, 
    27700, 
    32119, 
    33670, 
    36070, 
    36350, 
    38500, 
    39020, 
    40770, 
    43780, 
    43850, 
    45190, 
    45340, 
    48530, 
    51080, 
    51600, 
    53130, 
    57260, 
    59450, 
    61660, 
    64390, 
    68050, 
    70430, 
    72110, 
    75620, 
    78690, 
    83890, 
    85620, 
    88280, 
    90010, 
    92050, 
    93430, 
    95800, 
    97210, 
    101020, 
    102050, 
    103190, 
    106660, 
    108790, 
    112260, 
    115830, 
    118380, 
    121180, 
    122330, 
    124790, 
    125870, 
    126580, 
    127370, 
    130520, 
    132790, 
    133150, 
    138490, 
    141300, 
    145720, 
    150020, 
    153760, 
    158870, 
    163210, 
    165940, 
    169280, 
    170080, 
    172650, 
    174270, 
    176420, 
    177980, 
    180230, 
    180500, 
    183730, 
    184590, 
    188140, 
    190310, 
    193740, 
    195640, 
    199740, 
    201940, 
    204250, 
    208070, 
    209270, 
    213900, 
    214800, 
    217220, 
    218850, 
    220960, 
    225950, 
    230700, 
    231610, 
    234090, 
    236090, 
    242590, 
    246480, 
    249800, 
    252070, 
    253590, 
    254870, 
    257709, 
    260529, 
    264290, 
    265330, 
    268260, 
    271790, 
    273570, 
    275950, 
    278550, 
    281550, 
    284630, 
    285750, 
    288020, 
    292240, 
    295850, 
    300150, 
    301670, 
    303820, 
    307410, 
    310540, 
    311570, 
    314120, 
    317990, 
    320740, 
    326140, 
    329750, 
    331710, 
    333790, 
    338570, 
    341310, 
    343480, 
    344040, 
    347760, 
    349710, 
    351140, 
    352760, 
    357000, 
    358310, 
    362970, 
    367000, 
    369570, 
    373630, 
    376770, 
    378970, 
    381620, 
    383920, 
    388512, 
    390790, 
    394240, 
    395320, 
    399830, 
    402000, 
    406450, 
    409210, 
    412890, 
    416470, 
    420880, 
    424200, 
    427190, 
    428620, 
    430030, 
    433580, 
    435840, 
    439500, 
    441490, 
    445540, 
    448550, 
    452500, 
    455040, 
    458430, 
    462230, 
    464050, 
    467730, 
    471550, 
    473110, 
    476750, 
    478370, 
    481360, 
    483850, 
    489080, 
    494800, 
    499690, 
    502250, 
    503810, 
    507130, 
    508250, 
    510300, 
    515010, 
    519919, 
    522650, 
    526000, 
    529090, 
    532770, 
    533860, 
    537220, 
    540460, 
    544990, 
    547780, 
    551600, 
    554430, 
    557240, 
    558350, 
    558720, 
    562570, 
    563730, 
    566160, 
    567270, 
    569290, 
    573750, 
    576970, 
    578420, 
    580440, 
    582690, 
    586850, 
    589860, 
    593110, 
    594940, 
    599090, 
    603600, 
    606840, 
    608400, 
    612220, 
    615140, 
    620720, 
    625380, 
    629060, 
    632640, 
    634660, 
    635860, 
    639590, 
    641100, 
    643880, 
    644600, 
    644790, 
    646680, 
    649730, 
    653180, 
    654640, 
    659020, 
    662470, 
    664540, 
    665840, 
    667550, 
    670730, 
    673260, 
    677880, 
    679550, 
    682250, 
    685160, 
    689470, 
    693040, 
    694420, 
    697450, 
    701300, 
    703410, 
    706530, 
    711020, 
    714360, 
    716240, 
    719610, 
    723300, 
    724720, 
    727670, 
    728790, 
    731835, 
    732710, 
    736750, 
    740260, 
    744430, 
    745880, 
    748600, 
    751770, 
    754860, 
    756320, 
    761960, 
    765590, 
    769690, 
    772420, 
    773820, 
    775720, 
    776400, 
    780160, 
    782440, 
    786150, 
    789510, 
    795320, 
    797280, 
    801580, 
    805030, 
    806180, 
    807430
  ], 
  "text": [
    "ARMANDO: Let's go from the bottom up for no particular reason.", 
    "No, really.", 
    "I randomized the order of the answers.", 
    "OK.", 
    "Faculty has-many appointments through students.", 
    "What's not quite right about this?", 
    "Faculty has-many students through appointments would work, right?", 
    "Because the appointment is the intermediate thing that ties the two", 
    "outer models together.", 
    "The concept of meeting at a particular time and place is what joins a faculty", 
    "to a student.", 
    "So this one, if it were reversed, would be OK, if faculty has many", 
    "students through appointments.", 
    "What about faculty belongs-to appointments, student belongs-to", 
    "appointment?", 
    "Why will this not work?", 
    "OK.", 
    "What's wrong with faculty belongs to appointment?", 
    "What's the implication of belongs to?", 
    "Right.", 
    "Belongs to is not many to many.", 
    "Right?", 
    "If I say faculty belongs to appointment, there's some sense that", 
    "there's a single appointment that the faculty belongs to but that's not what", 
    "we're modeling.", 
    "There is going to be many appointments.", 
    "And in fact, the relationship from faculty to appointments is going to be", 
    "one to many, not the other way around.", 
    "So this is the inverted sense of belongs to.", 
    "It would make sense to say that an appointment belongs-to faculty and", 
    "belongs-to student because any given appointment can belong to only one of", 
    "each of those things.", 
    "The red one is also backwards.", 
    "How about faculty has and belongs to many students and conversely.", 
    "This is almost right but there's no mention of appointments.", 
    "Therefore, the reason this doesn't quite work is because it's not just", 
    "the relationship between the faculty and the student.", 
    "There's additional information attached to it like what time it would", 
    "be at or what place it would be at.", 
    "In other words, there's enough information that appointment needs to", 
    "be its own model.", 
    "You can't annotate the relationship unless you have a model", 
    "for it to go through.", 
    "So that leaves, by elimination, faculty has-many appointments, student", 
    "has-many appointments.", 
    "Those are both correct.", 
    "And if you wanted, you could also declare that faculty has-many students", 
    "through appointments but you don't have to.", 
    "If you want to conveniently be able to ask the question, show me all the", 
    "students with whom this faculty has an appointment or vice versa, then", 
    "additionally declaring the through relationship would be helpful.", 
    "But remember, you don't have to declare the through relationship.", 
    "It's an opportunity.", 
    "If you have to if, you need to ask that question in your code,", 
    "it's there for you.", 
    "OK.", 
    "Clear?", 
    "You'll get used to this really fast because any nontrivial lap is going to", 
    "have many-to-many relationships.", 
    "OK.", 
    "So we've talked about how associations how they appear in the model and how", 
    "active record handles, how the database represent to them.", 
    "What we haven't talked about yet is the RESTful creation, editing and so", 
    "forth of objects that have an association attached to them.", 
    "And this is important because remember in the simple case we've seen so far,", 
    "where we're doing RESTful CRUD actions on a single type of model, all of the", 
    "fields that are necessary to create or edit that type of object, we have all", 
    "these nice view helpers that provide those things for us.", 
    "And we have route helpers that automatically route to the correct", 
    "controller method.", 
    "They make the ID of the object in question appear as part", 
    "of the params hash.", 
    "But now it gets more complicated because, for example,", 
    "imagine editing a review.", 
    "A review has two foreign keys associated with it.", 
    "Right?", 
    "Besides its own ID, it has to have a movie ID and it has to have", 
    "a movie goer ID.", 
    "So we need some way that the views and the routes can represent that", 
    "information.", 
    "So the easy way to do this is to take advantage of yet", 
    "more routing goodness.", 
    "Before, you just had resources :movies which says please give me the RESTful", 
    "routes for this kind of a resource.", 
    "So Create, Read, Update, Delete movies.", 
    "If we now give a do block to resources movies, we can nest other things", 
    "inside the route.", 
    "So in particular, this notation says that reviews are a nested resource", 
    "with respect to movies.", 
    "What that means is, I'm going to access reviews by", 
    "going through a movie.", 
    "Now you don't have to do it this way.", 
    "The kind of route that you pick, and we said moviegoers are also going to", 
    "own reviews, we could have chosen to do reviews as a nested resource inside", 
    "moviegoers.", 
    "So the choice you make depends on which way your app is going to be", 
    "accessing these things.", 
    "To use this as a concrete example, if I access a review through a movie,", 
    "what that means is at the point where I'm about to do my RESTful operation", 
    "on the review, whatever movie it's nested in is going to give me the", 
    "movie ID that that review corresponds to.", 
    "Well what about the moviegoer ID?", 
    "Where am I going to get that?", 
    "There's many ways to get it, but a reasonable choice for this kind of app", 
    "would be that the person who's the moviegoer has logged in.", 
    "And because they're logged in, their ID is already stored someplace else,", 
    "such as in the session.", 
    "Like we mentioned last time, when somebody logs in, you make a note of", 
    "that fact in the session and you sort of carry their login ID around with", 
    "you to all the different actions that you do.", 
    "So that would be a reasonable choice for this application.", 
    "But the only thing you really have to make sure is by the time you get to a", 
    "place where you're going to edit or operate on one of these resources like", 
    "a review, you have some way to get the information about", 
    "all the foreign keys.", 
    "So I'm going to show you one way to do it.", 
    "Remember that we already saw there are some basic routes that you get when", 
    "you do resources movies.", 
    "When you do nested routes, you now get additional helpers and you can see", 
    "that the nesting is pretty explicit here.", 
    "Right?", 
    "Now we have, for example, to list all of the reviews, we're going to get", 
    "movies slash some movie ID slash reviews.", 
    "Why is this necessary?", 
    "Because you can't talk about listing all reviews--", 
    "well, it doesn't make a lot of sense to talk about listing all reviews", 
    "unless you know which movie you're referring to.", 
    "And again, if we had chosen instead to nest the reviews resource inside a", 
    "moviegoers resource, then we'd have a route that gives us, for this", 
    "moviegoer what are all the reviews that share that", 
    "moviegoers foreign key?", 
    "And just as in the case of a simple resource, we get some things filled in", 
    "for us in the params array, likewise here.", 
    "The difference is that now params is going to give us two pieces of", 
    "information.", 
    "One of them is the ID of the actual resource that we're talking about.", 
    "So this is about reviews at the end of the day.", 
    "This is getting reviews.", 
    "This is editing a review.", 
    "So params ID is still going to refer to the primary key of the resource in", 
    "question, the review.", 
    "But we're also going to get params movie ID filled in with whatever the", 
    "primary key is of the movie inside which this resource is nested.", 
    "So the movie that owns this review, so to speak.", 
    "So the mechanism is exactly the same, but the route now actually encodes", 
    "additional information and that information is made available to us in", 
    "params just like it was before.", 
    "So how would we use this in a controller method?", 
    "Well, what might the Create method look like for a review?", 
    "When we are creating a review, we have to fill in ...", 
    "Let's for the moment, not worry too much about the moviegoer.", 
    "Let's just worry about the idea that reviews are owned by", 
    "a particular movie.", 
    "So in our Create method we have to find, somehow, to get the movie ID", 
    "that is going to be the foreign key for that review.", 
    "And if we're using the nested RESTful route, params movie ID will already", 
    "have been filled in for us and we can just grab it from there.", 
    "So we can find the movie that this review is going to be about.", 
    "And when we start building our review object, remember we said that build", 
    "will automatically populate the review with the correct foreign key of the", 
    "receiver object movie.", 
    "And the same code path we've seen before, if we save the review", 
    "successful then great.", 
    "We'd redirect to where?", 
    "Well, I've chosen to redirect to the list of all reviews for this movie.", 
    "You could have chosen to take the user someplace else.", 
    "But again, I'm making use of the shortcut provided by the nested", 
    "RESTful route.", 
    "Or if the save fails for some reason because maybe the review failed", 
    "validation, then we'll render the new action.", 
    "Now, this is a pattern that you saw before, but we're going to add a new", 
    "twist to it.", 
    "Remember that when we did this for just a simple resource like movies,", 
    "the reason that render action new did the right thing-- and if you remember", 
    "because you all watched the screen cast--", 
    "the right thing is if I filled in some stuff for a movie but it did validate,", 
    "then what I'll get is I'll get back to that same page but all the stuff I", 
    "typed will still be filled in.", 
    "I just have to fix the fields that I had left blank or didn't validate for", 
    "whatever reason.", 
    "What's going to happen in the new action in this case?", 
    "What would the new action expect to see?", 
    "Well, a typical implementation of the new action would be, if I'm going to", 
    "create a new review, because I'm going to call the new action with the nested", 
    "route helper that I got, I can once again use movie ID to pick up what", 
    "movie the review's going to belong to but I'm going to", 
    "assign review like this.", 
    "Why am I using this idiom of double or equals?", 
    "What is this idiom do, by the way?", 
    "What is the effect of this statement?", 
    "What would be a long hand way to write out what's going on in this line.", 
    "This is the same as saying if review is nil, then don't do anything.", 
    "Sorry, if review is not nil, don't do anything.", 
    "But if review is nil, then assign it this value.", 
    "If I didn't care about the fact that I might be coming into new from a", 
    "redirect, I could just put review equals and I could ditch the double", 
    "bar operator here.", 
    "But this is a nice shortcut because if the way that I get to new is because", 
    "the creation failed, then review will remain untouched.", 
    "Because I'm entering this action with review being non-nil, this assignment", 
    "will be short-circuited and what will end up happening is review will", 
    "contain all the stuff I typed and when the new template, when the view is", 
    "rendered, all of the stuff that I typed previously will still be filled", 
    "in, which is pretty nice if you actually typed a long review and then", 
    "it didn't save.", 
    "Yes.", 
    "So another way to say this would be that this could be another", 
    "way to write it.", 
    "And in fact, this is exactly what the double bar equal", 
    "operator expands out to.", 
    "So this is sort of the literal expansion.", 
    "And now it's obvious that if review is already non-nil, then you're just", 
    "assigning it its own value, but if review was nil to begin with, then", 
    "you'll get this value.", 
    "So this is an idiom that you'll see a lot.", 
    "And one of the most common uses is exactly this.", 
    "We're coming from the controller action but if the create fails, we", 
    "want the new action to not lose any information that's already been", 
    "populated in the review, and that's what let's us do it.", 
    "So what about the views?", 
    "Well, remember we saw we had simple resources, again, there's these nice", 
    "form tag helpers that will generate the right submission URL for the form", 
    "based on the RESTful route that you want, whether it's Create, Read,", 
    "Update, or Delete.", 
    "We still have those helpers, but since we're using a nested route, the", 
    "helpers now take multiple arguments.", 
    "So it's not just when I am creating, for example, a new review or when I'm", 
    "editing a review, it's not just the review that's a parameter to the form", 
    "tag, I also need the movie as a parameter because this is how the", 
    "review is going to end up getting populated with the correct movie ID.", 
    "And the internal fields of the form are going to be the same", 
    "as they were before.", 
    "Now one question is, is this creating form fields for a", 
    "movie or for a review?", 
    "Just as a sanity check to make sure everybody's following along here.", 
    "It's for our review.", 
    "Right?", 
    "It's movie review path.", 
    "We're following the English language convention of adjectives go first.", 
    "So movie review path, moviegoer review path if we had used the", 
    "other type of route.", 
    "But the important reason to use this form of the nested route helper which", 
    "takes two arguments, is it will arrange for it to be the case, that", 
    "params movie ID gets filled in accordingly.", 
    "This is where that connection happens.", 
    "There's no magic going on here.", 
    "We need to know all this information at the time that we display the view.", 
    "What the helpers are doing is making sure that the params array is going to", 
    "be properly populated when that form submission arrives in the controller.", 
    "And one last thing to remember.", 
    "All of these helpers are for convenience.", 
    "At the end of the day, the important thing is, when you're creating a", 
    "review it has to have a movie ID to associate that review with a movie.", 
    "How you get that movie ID and how you stuff it into the review object is", 
    "your own business.", 
    "Because this is such a common pattern of having these one to many", 
    "relationships, these helpers are provided to give you common cases", 
    "where you don't have to write the code yourself.", 
    "But if you come up with some weird association or if you want to be able", 
    "to edit a nested object and it's outside the context of--", 
    "you're not in the context of a view that belongs to the owning object.", 
    "However you get this information is fine.", 
    "The only important thing is, once you call the database function Save or", 
    "Update, whatever you're calling, at that moment the foreign key fields", 
    "need to be properly filled in.", 
    "But how you get the values for this field and how you fill them in is", 
    "totally up to you.", 
    "Just like we saw last time, the through associations are", 
    "a convenient way.", 
    "When you use methods like build, that's a convenient way to start off", 
    "with an object that has its foreign key field pre-populated but we also", 
    "showed that you could manually assign a value to the movie_ID field and that", 
    "works just as well.", 
    "Because the database representation doesn't change.", 
    "All this is doing is providing different ways for you to, in some", 
    "common cases, create the right representation without you doing a lot", 
    "of extra work.", 
    "So with that in mind, let's consider our alternate reality.", 
    "If we also have the relationship moviegoer has_many reviews, in", 
    "addition to movie having many reviews, could we use a route helper like", 
    "moviegoer_review_path ?", 
    "Analogously to what we just did.", 
    "So here are some possible answers.", 
    "Yes.", 
    "This will work, because we're using the correct names in terms of Rails", 
    "convention over configuration rules.", 
    "Another possibility is yes, but we have to declare reviews as a nested", 
    "resource in routes.rb.", 
    "No, because given any resource, there can only be one RESTful route that", 
    "performs an operation on that resource.", 
    "Or no, because having more than one through association like moviegoer to", 
    "reviews or movies to reviews, will cause some ambiguity and then things", 
    "will just break.", 
    "So think about that for a moment."
  ]
}