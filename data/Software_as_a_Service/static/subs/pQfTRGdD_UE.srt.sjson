{
  "start": [
    500, 
    4160, 
    9710, 
    12160, 
    16010, 
    18760, 
    22200, 
    24760, 
    28650, 
    29930, 
    33660, 
    35340, 
    36290, 
    40300, 
    45140, 
    47530, 
    51690, 
    55060, 
    57970, 
    61300, 
    63180, 
    66600, 
    67700, 
    71050, 
    74190, 
    76400, 
    77610, 
    85160, 
    87610, 
    91105, 
    92200, 
    94750, 
    97550, 
    99810, 
    105400, 
    108910, 
    109420, 
    112480, 
    116120, 
    121000, 
    123620, 
    127280, 
    129710, 
    131430, 
    135340, 
    137270, 
    139320, 
    139900, 
    143350, 
    147380, 
    148590, 
    151810, 
    154380, 
    158220, 
    160110, 
    163200, 
    166430, 
    170040, 
    173970, 
    177940, 
    180980, 
    183270, 
    188510, 
    192720, 
    194820, 
    197150, 
    201370, 
    205000, 
    206690, 
    209240, 
    210710, 
    213690, 
    216970, 
    219070, 
    222320, 
    223700, 
    226270, 
    229510, 
    231500, 
    234750, 
    239040, 
    241130, 
    248300, 
    251380, 
    256579, 
    259760, 
    264300, 
    266800, 
    271710, 
    276800, 
    279390, 
    285220, 
    290050, 
    291840, 
    297500, 
    300640, 
    301410, 
    303340, 
    307740, 
    312670, 
    314780, 
    317070, 
    318970, 
    322570, 
    324510, 
    325200, 
    327280, 
    330590, 
    331890, 
    336770, 
    338970, 
    340800, 
    347000, 
    351510, 
    355120, 
    358690, 
    361780, 
    365250, 
    366380, 
    369830, 
    373120, 
    376360, 
    379660, 
    382090, 
    384640, 
    385730, 
    390480, 
    393700, 
    398810, 
    400770, 
    404010
  ], 
  "end": [
    4160, 
    9710, 
    12160, 
    16010, 
    18760, 
    22200, 
    24760, 
    28650, 
    29930, 
    33660, 
    35340, 
    36290, 
    40300, 
    45140, 
    47530, 
    51690, 
    55060, 
    57970, 
    61300, 
    63180, 
    66600, 
    67700, 
    71050, 
    74190, 
    76400, 
    77610, 
    85160, 
    87610, 
    91105, 
    92200, 
    94750, 
    97550, 
    99810, 
    105400, 
    108910, 
    109420, 
    112480, 
    116120, 
    121000, 
    123620, 
    127280, 
    129710, 
    131430, 
    135340, 
    137270, 
    139320, 
    139900, 
    143350, 
    147380, 
    148590, 
    151810, 
    154380, 
    158220, 
    160110, 
    163200, 
    166430, 
    170040, 
    173970, 
    177940, 
    180980, 
    183270, 
    188510, 
    192720, 
    194820, 
    197150, 
    201370, 
    205000, 
    206690, 
    209240, 
    210710, 
    213690, 
    216970, 
    219070, 
    222320, 
    223700, 
    226270, 
    229510, 
    231500, 
    234750, 
    239040, 
    241130, 
    248300, 
    251380, 
    256579, 
    259760, 
    264300, 
    266800, 
    268050, 
    276800, 
    279390, 
    285220, 
    290050, 
    291840, 
    297500, 
    300640, 
    301410, 
    303340, 
    307740, 
    312670, 
    314780, 
    317070, 
    318970, 
    320220, 
    324510, 
    325200, 
    327280, 
    330590, 
    331890, 
    336770, 
    338970, 
    340800, 
    347000, 
    351510, 
    355120, 
    358690, 
    361780, 
    365250, 
    366380, 
    369830, 
    373120, 
    376360, 
    379660, 
    382090, 
    384640, 
    385730, 
    390480, 
    393700, 
    398810, 
    400770, 
    404010, 
    405260
  ], 
  "text": [
    "Armando Fox: OK, so, let's start with the People's Choice.", 
    "Most design patterns are specific to a particular programming language.", 
    "There's a small number of design patterns that are, just like there's a", 
    "small number of refactorings, but design patterns are actually widely", 
    "applicable and the only difference between one programming language and", 
    "another in some cases is how difficult it is, or how elegant it is, or how", 
    "much code it requires to implement the design pattern.", 
    "So in fact, the whole idea of design patterns is that they're not specific", 
    "to a programming language.", 
    "They're statements about how modules should be composed, and those", 
    "statements are more or less independent of", 
    "any programming language.", 
    "Now, I would say design patterns certainly apply much more clearly to", 
    "programming languages that are object oriented, but today, the vast majority", 
    "of modern programming languages support object orientation.", 
    "So, with that caveat, I would say it is not the case that they're specific", 
    "to a subset of programming languages.", 
    "There are a couple of specific patterns that we'll see don't really", 
    "apply to duck-typed languages that do apply in statically-typed languages,", 
    "but they're by no means the majority.", 
    "Software that uses more design patterns isn't necessarily better is a", 
    "true statement.", 
    "In fact, the authors of the design pattern books go as far as to say,", 
    "don't fall into the trap of counting design patterns and saying, this piece", 
    "of code is better than that one because it has more design patterns", 
    "per line of code.", 
    "Remember that design patterns are common solutions to a group of similar", 
    "problems to which a solution has already been proven.", 
    "That's not to say that your software is always going to match one of the", 
    "end design patterns.", 
    "And in fact, if you look at the history of design patterns, new", 
    "patterns have actually been added since the original gang of four", 
    "patterns came out in the late 1970s.", 
    "So, software that uses a design pattern versus software that ought to", 
    "use the same pattern, and as a result, is harder to change, that's one kind", 
    "of statement.", 
    "That would be a true statement, but just because one piece of software", 
    "uses more design patterns than another doesn't necessarily make it better.", 
    "And in fact, it's often just as bad to apply design patterns too early", 
    "because then you end up with needless generality that you may or may not", 
    "need as applying them too late.", 
    "And the green statement is actually just a reflection of where", 
    "antipatterns come from.", 
    "A lot of code that has antipatterns starts out as code that was perfectly", 
    "appropriate at the time it was written, but outgrew its", 
    "responsibilities.", 
    "OK.", 
    "How much UML is just enough UML?", 
    "In my world, it's remarkably little.", 
    "So what's UML?", 
    "Even though it stands for Unified Modeling Language, confusingly, it's", 
    "not really a language, at least not in the way that I think of one.", 
    "It's a notation, and it's a notation that involves a lot of boxes and", 
    "arrows along with some words.", 
    "But it's not a language like a programming language would be.", 
    "It's a notation for describing a variety of things in object oriented", 
    "systems, not just the classes and the way they talk to each other.", 
    "Although, one of the most commonly used kinds of UML diagrams is the", 
    "class diagram, and we are going to be using it quite a bit, and its job is", 
    "to show the relationships among classes and principle methods.", 
    "So, what are some things you can express?", 
    "An open arrow implies inheritance, so car is a subclass of vehicle.", 
    "A filled in arrow implies ownership of a component.", 
    "So a car is made up of various components.", 
    "One of them is an engine.", 
    "You can imagine that, in a programming language implementation there might be", 
    "an instance variable of car that is a reference to the engine object that", 
    "makes up part of the car.", 
    "Sometimes classes are annotated with a subset of their", 
    "most interesting methods.", 
    "Depending on the variant of class diagram you see, some of them will", 
    "also include private methods and they'll use different typography to", 
    "indicate private versus public.", 
    "In our usage, I'll generally just include the methods we care about.", 
    "And I'm not going to make an attempt.", 
    "To distinguished public versus private methods, just because in most of the", 
    "examples where we're going to use these class diagrams, that isn't", 
    "germane to what I'm trying to illustrate.", 
    "So, the two different types of arrows.", 
    "You can also express relationships of the kind that we've already seen when", 
    "we talked about associations in active record.", 
    "So you can label either side of an arc with what's called a multiplicity.", 
    "So it's how many of each type of entity participate in each side of it.", 
    "So for example, here's an arc that says that for every one account code,", 
    "there are zero or more voucher types.", 
    "The difference between the open diamond and the solid diamond is one", 
    "of composition versus aggregation.", 
    "So what does that mean?", 
    "An aggregation, which is the solid diamond, implies that not only is", 
    "there-- it sort of belongs to a relationship here, right?", 
    "So a show, one show has one or more, one to asterisk show dates associated", 
    "with it, but the aggregation implies that when I destroy the show, the show", 
    "dates also die.", 
    "So in contrast, let's see, here's a contrasting example.", 
    "When I destroy an account code, the items that go along with it don't", 
    "necessarily die.", 
    "That's a composition.", 
    "So we won't use every type of notation in every diagram, but we're using just", 
    "enough UML to allow us to illustrate some of the design patterns without", 
    "having to show a code example in each one.", 
    "Having said that, I'm probably going to show a lot of code examples,", 
    "because I find that things are easier to understand when", 
    "you see source code.", 
    "OK, so--", 
    "Whoops, sorry.", 
    "I think I must have reversed the names.", 
    "Aggregation is the open diamond, and composition is a closed diamond.", 
    "Sorry about that.", 
    "The UML class diagram is just one of all these different types of diagrams,", 
    "which we are not going to draw or look at.", 
    "It is not to deprecate their importance.", 
    "I just find that usually, the informal diagrams that we use, user stories,", 
    "test cases that are well documented, and so forth, serve a useful enough", 
    "role that I don't need to draw UML diagrams around my own project.", 
    "You find that UML diagrams actually do get used in much larger projects,", 
    "especially when the work is split across teams that are geographically", 
    "distributed, because you can more precisely delineate who's working on", 
    "which pieces.", 
    "And also, because it's a graphical notation that has a well defined", 
    "elements, it's a good notation to use when there might be a language issue,", 
    "when not everybody speaks the same human language.", 
    "So for outsourcing projects, it's not uncommon to see part of the project", 
    "specification done using UML diagrams.", 
    "For the most part, in our small Agile projects, we won't really have to", 
    "worry about them.", 
    "So here is a diagram with a handful of [INAUDIBLE].", 
    "This is basically the same diagram that was two slides ago.", 
    "But the question is, which active record relationship doesn't follow or", 
    "cannot be inferred from this diagram.", 
    "So take a moment to read over the choices, and then we'll vote and talk", 
    "about them."
  ]
}