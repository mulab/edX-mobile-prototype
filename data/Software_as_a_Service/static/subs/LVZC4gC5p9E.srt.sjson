{
  "start": [
    570, 
    2810, 
    4520, 
    8290, 
    12600, 
    14800, 
    19930, 
    23700, 
    27540, 
    29650, 
    31520, 
    33710, 
    34750, 
    37540, 
    41520, 
    44620, 
    47020, 
    49400, 
    53640, 
    54610, 
    57180, 
    60550, 
    62890, 
    64580, 
    67450, 
    69410, 
    72620, 
    73310, 
    76160, 
    79550, 
    80820, 
    85510, 
    86200, 
    89130, 
    90810, 
    91850, 
    95100, 
    98440, 
    99730, 
    102340, 
    103510, 
    109150, 
    112880, 
    115950, 
    118640, 
    123410, 
    126960, 
    132020, 
    135050, 
    137920, 
    138840, 
    141760, 
    142840, 
    147140, 
    150700, 
    154110, 
    155680, 
    159010, 
    162240, 
    164820, 
    168130, 
    170750, 
    172660, 
    174120, 
    178080, 
    179720, 
    183890, 
    186000, 
    189170, 
    190170, 
    193790, 
    196960, 
    200230, 
    204100, 
    207380, 
    209100, 
    210890, 
    215640, 
    218080, 
    223390, 
    224740, 
    228390, 
    229650, 
    231350, 
    233210, 
    235540, 
    238800, 
    241670, 
    243510, 
    245020, 
    248520, 
    251280, 
    253730, 
    255410, 
    259980, 
    263600, 
    266370, 
    270490, 
    271860, 
    274740, 
    276470, 
    280540, 
    283100, 
    285580, 
    289380, 
    290070, 
    293210, 
    296470, 
    298790, 
    301140, 
    302870, 
    306360, 
    309040, 
    313020, 
    314670, 
    318550, 
    319840, 
    323250, 
    326350, 
    328500, 
    329650, 
    330640, 
    332600, 
    333570, 
    337140, 
    338710, 
    342060, 
    345800, 
    348950, 
    350310, 
    352700, 
    353570, 
    354880, 
    359560, 
    362260, 
    363840, 
    367370, 
    370090, 
    373610, 
    376540, 
    379440, 
    382530, 
    383860, 
    386230, 
    389170, 
    391660, 
    394760, 
    398410, 
    400140, 
    404350, 
    407280, 
    410110, 
    413420, 
    415830, 
    418820, 
    421860, 
    423090, 
    425890, 
    429370, 
    431740, 
    435480, 
    437540, 
    438840, 
    441930, 
    444990, 
    448000, 
    450740, 
    452830, 
    455820, 
    458510, 
    462830, 
    463700, 
    466790, 
    470110, 
    473610, 
    476320, 
    480010, 
    481790, 
    485170, 
    489300, 
    490940, 
    493240, 
    497240, 
    498890, 
    501740, 
    503920, 
    505810, 
    509930, 
    513130, 
    513730, 
    515179, 
    517150, 
    520590, 
    524540, 
    528170, 
    531920, 
    533550, 
    536830, 
    539180, 
    541940, 
    544070, 
    549080, 
    552080, 
    556150, 
    558100, 
    559820, 
    562570, 
    565265, 
    568316, 
    569910, 
    573460, 
    575780, 
    576310, 
    579930, 
    581130, 
    584720, 
    585560, 
    588570, 
    590350, 
    593800, 
    595450, 
    599220, 
    601150, 
    605290, 
    606560, 
    609700, 
    614376, 
    616170, 
    618180, 
    623100, 
    626270, 
    630370, 
    633460, 
    638790, 
    641800, 
    644990, 
    646170, 
    650010, 
    653080, 
    654700, 
    657370, 
    661440, 
    664950, 
    668180, 
    670070, 
    673250, 
    674600, 
    677170, 
    680270, 
    682050, 
    687780, 
    690340, 
    694200, 
    695950, 
    700240, 
    701810, 
    705110, 
    708490, 
    710990, 
    712180, 
    715080, 
    717460, 
    720930, 
    724290, 
    726400, 
    731200, 
    735060, 
    739170, 
    744730
  ], 
  "end": [
    2810, 
    4520, 
    8290, 
    12600, 
    14800, 
    19930, 
    23700, 
    27540, 
    29650, 
    31520, 
    33710, 
    34750, 
    37540, 
    41520, 
    44620, 
    47020, 
    49400, 
    53640, 
    54610, 
    57180, 
    60550, 
    62890, 
    64580, 
    67450, 
    69410, 
    72620, 
    73310, 
    76160, 
    79550, 
    80820, 
    85510, 
    86200, 
    89130, 
    90810, 
    91850, 
    95100, 
    98440, 
    99730, 
    102340, 
    103510, 
    109150, 
    112880, 
    115950, 
    118640, 
    123410, 
    126960, 
    132020, 
    135050, 
    137920, 
    138840, 
    141760, 
    142840, 
    147140, 
    150700, 
    154110, 
    155680, 
    159010, 
    162240, 
    164820, 
    168130, 
    170750, 
    172660, 
    174120, 
    178080, 
    179720, 
    183890, 
    186000, 
    189170, 
    190170, 
    193790, 
    196960, 
    200230, 
    204100, 
    207380, 
    209100, 
    210890, 
    215640, 
    218080, 
    223390, 
    224740, 
    228390, 
    229650, 
    231350, 
    233210, 
    235540, 
    238800, 
    241670, 
    243510, 
    245020, 
    248520, 
    251280, 
    253730, 
    255410, 
    259980, 
    263600, 
    266370, 
    270490, 
    271860, 
    274740, 
    276470, 
    280540, 
    283100, 
    285580, 
    289380, 
    290070, 
    293210, 
    296470, 
    298790, 
    301140, 
    302870, 
    306360, 
    309040, 
    313020, 
    314670, 
    318550, 
    319840, 
    323250, 
    326350, 
    328500, 
    329650, 
    330640, 
    332600, 
    333570, 
    337140, 
    338710, 
    342060, 
    345800, 
    348950, 
    350310, 
    352700, 
    353570, 
    354880, 
    359560, 
    362260, 
    363840, 
    367370, 
    370090, 
    373610, 
    376540, 
    379440, 
    382530, 
    383860, 
    386230, 
    389170, 
    391660, 
    394760, 
    398410, 
    400140, 
    404350, 
    407280, 
    410110, 
    413420, 
    415830, 
    418820, 
    421860, 
    423090, 
    425890, 
    429370, 
    431740, 
    435480, 
    437540, 
    438840, 
    441930, 
    444990, 
    448000, 
    450740, 
    452830, 
    455820, 
    458510, 
    462830, 
    463700, 
    466790, 
    470110, 
    473610, 
    476320, 
    480010, 
    481790, 
    485170, 
    489300, 
    490940, 
    493240, 
    497240, 
    498890, 
    501740, 
    503920, 
    505810, 
    509930, 
    513130, 
    513730, 
    515179, 
    517150, 
    520590, 
    524540, 
    528170, 
    531920, 
    533550, 
    536830, 
    539180, 
    541940, 
    544070, 
    549080, 
    552080, 
    556150, 
    558100, 
    559820, 
    562570, 
    565265, 
    568316, 
    569910, 
    573460, 
    575780, 
    576310, 
    579930, 
    581130, 
    584720, 
    585560, 
    588570, 
    590350, 
    593800, 
    595450, 
    599220, 
    601150, 
    605290, 
    606560, 
    609700, 
    614376, 
    616170, 
    618180, 
    623100, 
    626270, 
    630370, 
    633460, 
    638790, 
    641800, 
    644990, 
    646170, 
    650010, 
    653080, 
    654700, 
    657370, 
    661440, 
    664950, 
    668180, 
    670070, 
    673250, 
    674600, 
    677170, 
    680270, 
    682050, 
    687780, 
    690340, 
    694200, 
    695950, 
    700240, 
    701810, 
    705110, 
    708490, 
    710990, 
    712180, 
    715080, 
    717460, 
    720930, 
    724290, 
    726400, 
    731200, 
    735060, 
    739170, 
    744730, 
    746620
  ], 
  "text": [
    "ARMANDO FOX: You can't have a software engineering class without talking", 
    "about design patterns.", 
    "This is some kind of conservation law that we figured out.", 
    "So the question is, what's the best way to talk about design patterns in a", 
    "class that's focused like this one is?", 
    "And just as when we talked about refactoring and code smells a week or", 
    "two ago, rather than giving you a laundry list of factorings--", 
    "of which you can look those up in many of the fine books on factoring--", 
    "we tried to give some examples that motivate.", 
    "Why you want to do it in the first place.", 
    "So the way we're going to approach talking about design", 
    "patterns is very similar.", 
    "Rather than giving you a catalogue of design patterns and sort of going", 
    "through all of them, we'll try to show some scenarios that hopefully will", 
    "make it clear why some of these design patterns exist.", 
    "How do you detect places in your code?", 
    "Just like we talked about with code smells and code metrics, are there", 
    "places where the code is clearly crying out for a design pattern and", 
    "you haven't used one?", 
    "So we're going to follow a very similar approach in talking about", 
    "patterns as we did in talking about code smells and refactoring.", 
    "And just like we had the very clever acronym SOFA--", 
    "for which I take 100% of the credit--", 
    "when we talk about refactoring, there's an acronym SOLID--", 
    "for which I do not take credit.", 
    "And it's actually a much better acronym because it gives you", 
    "confidence, right?", 
    "We're going to build solid software, as opposed to we're going to build", 
    "sofa software, like loungey software or something.", 
    "But SOLID is a real thing.", 
    "And as you'll see, it's a list of five characteristics that are desirable to", 
    "have in your code.", 
    "We'll look at ways that you can detect when you might be off track in not", 
    "having them.", 
    "So what are design patterns?", 
    "The original idea actually came out of architecture, not a field that", 
    "software engineers are usually familiar with.", 
    "And I don't mean software architecture.", 
    "I mean the kind where they build buildings and plan cities and towns", 
    "and stuff like that.", 
    "In the early '70s, Chris Alexander noticed that there were various", 
    "problems that arose in urban architecture that had been solved over", 
    "and over again, in pretty similar ways, in a lot of different settings.", 
    "So he came up with the idea of a pattern language as a way of", 
    "collecting solutions to a family of problems that are similar to each", 
    "other, and to which a good, proven solution had emerged.", 
    "So he identified 253 patterns at scales all the way from the creation", 
    "of entire cities-- like how do you lay out zones of the city--", 
    "to particular problems in buildings-- like how do you design a", 
    "certain type of roof?", 
    "Or what's the best spacing for windows relative to offices,", 
    "and things like that.", 
    "So it's an organized way of tackling originally an architectural problem,", 
    "but this idea has now proliferated to other fields, including our own.", 
    "So in software, the ideas become so popular, there's actually multiple", 
    "different kinds of patterns.", 
    "One kind of pattern we've already seen some example of--", 
    "and we could call those software architectural patterns to distinguish", 
    "them from architecture architectural patterns--", 
    "but things like model-view-controller that tell you about the macroscopic", 
    "structure of a piece of software.", 
    "If you've used Unix, the idea of hooking together", 
    "programs using pipe's.", 
    "The pipe and filter architecture is another example of an", 
    "architectural pattern.", 
    "Event-based programming is an example of an architectural pattern.", 
    "This is where the structure of your application is to basically sit", 
    "around, wait for something interesting to happen, and then react to that", 
    "interesting thing.", 
    "So a lot of interactive games, for example, fit this pattern.", 
    "Because what the game spends most of its time doing in the loop is waiting", 
    "for the user to take some action, possibly doing some game computation.", 
    "But what happens in the game is driven a lot by the user actions.", 
    "So those examples we've seen a little bit of.", 
    "There's also patterns of computation.", 
    "We won't talk about them too much in this class.", 
    "But one of the founding observations of the parallel computing lab-- which", 
    "I work in and which Dave Patterson works in--", 
    "is that there's a handful, order of a dozen, computation families that occur", 
    "in all different problem domains.", 
    "You see them in computer graphics, you see them in biological modeling, and", 
    "physical modeling.", 
    "So here's three or four examples of them.", 
    "You may be familiar with the Fast Fourier transform, a", 
    "signal processing technique.", 
    "Great algorithms, which is when you essentially impose a grid over the", 
    "world so that you can discretize it for the purposes of simulation or", 
    "doing some other computation.", 
    "Dense and sparse linear algebra--", 
    "if you took 61C and you worked on optimizing parallel matrix multiply,", 
    "there's a good reason that people work on matrix multiply.", 
    "It's used in hundreds of different applications and dozens", 
    "of different domains.", 
    "So this is another area where, if you can focus on what's the best solution", 
    "let's say, for a given type of computer to do dense linear algebra,", 
    "that solution would benefit a wide number of problems.", 
    "That kind of patterns that we're mostly going to talk about are broken", 
    "down into a few different categories.", 
    "But they're collectively known as the Gang of Four patterns, or the GOF", 
    "patterns if you will.", 
    "And this is because of the people who wrote what's consider the canonical", 
    "book in software design patterns.", 
    "So this is Gamma, Helm, Johnson, and Vlissides.", 
    "So they identified 23 design patterns that will-- collectively we'll call", 
    "them structural.", 
    "They refer to the way that classes in an application interact with one", 
    "another and how they collaborate.", 
    "Each pattern tries to capture a common solution to some", 
    "category of related problems.", 
    "But the pattern is not fixed.", 
    "The pattern is not actually something that is expressed in terms of code.", 
    "It's usually expressed in a more general, kind of a structural form,", 
    "because you have to adapt it somewhat to each individual situation.", 
    "So what is it not?", 
    "You won't find, for example, a specific library that implements the", 
    "XYZ pattern.", 
    "In a few specific cases you'll find particular instances of a pattern that", 
    "are well supported by a library or a module or something like that.", 
    "But the pattern isn't the end of the design. it's the", 
    "beginning of the design.", 
    "So think of it as a template.", 
    "It's a way of thinking about the structure of the", 
    "problem and saying, aha.", 
    "I already know, in structural terms, how the classes that solve this", 
    "problem should really be collaborating.", 
    "And it's because the problem is similar to this family of problems", 
    "where this technique has been used successfully in the past.", 
    "So I promise that we won't walk through a laundry list.", 
    "But I have to show it.", 
    "I'm sort of required by law to make sure that you see a", 
    "list of all the patterns.", 
    "So here they all are.", 
    "But again, as with the refactorings, there's books you can buy that do a", 
    "much better job than we're going to do of covering every pattern in depth,", 
    "giving you multiple examples.", 
    "What we're going to do is give an example of a subset of these.", 
    "Most of the ones that are in bold italic, we're going to try to give at", 
    "least a motivation of why you want to use them and show a problem that they", 
    "solve in Ruby or in Rails.", 
    "And you can go off and read about the rest of them yourselves.", 
    "As practicing software engineers, in the fullness of time you're going to", 
    "be familiar with all of these.", 
    "But rather than going through a laundry list, we thought it would be", 
    "better to motivate a few of them with specific examples.", 
    "So that's what we're going to do.", 
    "As we talk about design patterns, there's a few things you might want to", 
    "keep in mind, which are the principles behind the patterns themselves.", 
    "So I call them meta-patterns.", 
    "They're the patterns that underlie how you think about design patterns.", 
    "The biggest one is pretty obvious.", 
    "The idea of a design pattern is to capture commonality.", 
    "So that means in terms of your code, you want to make it easy to separate", 
    "things that change from things that stay the same.", 
    "And as we go through a handful of these design patterns and show how", 
    "they relate to the SOLID guidelines, we'll keep coming back to", 
    "this again and again.", 
    "At the end of the day, what we're trying to do is minimize the cost of", 
    "change by keeping the things that change separate so that we don't have", 
    "to modify stuff that stays the same all the time.", 
    "And two specific instances of this thinking--", 
    "that again, as we go through the design patterns, we'll", 
    "see how they apply.", 
    "One of them is programming to an interface, not to an implementation.", 
    "This sounds like motherhood and apple pie, that of course we should do this.", 
    "But you would be amazed at how often we fail to do it.", 
    "The times that we fail to do it are actually pretty subtle, and we have", 
    "some good examples that we're going to show.", 
    "The second principle is a little bit more subtle.", 
    "And this one really requires examples to show.", 
    "The idea behind software engineering was, how much can we do in terms of", 
    "code reuse?", 
    "How can we minimize the effort of building new things by being able to", 
    "reuse existing pieces of code that other people have written?", 
    "And for a long time, and I think maybe still for a lot of people, the way", 
    "they think about reuse today is they think about inheritance.", 
    "If I inherit from another class, I get all the things that it does, plus I", 
    "can add my own new things.", 
    "What we'll see is that a lot of times, reuse is enabled much more", 
    "effectively, not by using inheritance, but by using some combination of", 
    "composition and delegation.", 
    "This is an enormously powerful idea.", 
    "And for now, just think of it like a mantra.", 
    "As we do the examples it will become more clear.", 
    "But delegation is about interface sharing.", 
    "Inheritance is about implementation sharing.", 
    "So these two reflect each other.", 
    "If what we want to do is program to an interface, then what we want to use is", 
    "mechanisms that allow us to capture and reuse interfaces, not", 
    "implementations.", 
    "Because patterns aren't the solution.", 
    "They're the beginning of thinking about the solution.", 
    "The last term that I'll use from time to time is antipattern.", 
    "Basically an antipattern is code that once you take a good look at it, it", 
    "becomes obvious that it should use some design pattern, but it doesn't.", 
    "And a lot of times, the way the code gets this way is not because the", 
    "person who wrote it is an idiot.", 
    "It's because it started out being a perfectly adequate solution to the", 
    "problem that that piece of code originally solved.", 
    "But as the code's responsibilities grew and evolved over time, it", 
    "essentially outgrew its original design.", 
    "So antipatterns occur at least as often in code that started out with", 
    "the best of intentions, but just got a little bit too big.", 
    "And some symptoms of this in your own code is, sometimes you'll find that", 
    "you know what the right thing is to do--", 
    "you know what will be the right way to make a change--", 
    "but it's actually much easier to do it in a hacky way.", 
    "Some people call that viscosity.", 
    "You know that there's places in your code where there's repetition, and you", 
    "know that you really ought to dry it out.", 
    "But it's difficult to pull out the parts that you want to dry out,", 
    "isolate them somewhere, and reuse them, because the parts that are", 
    "repetitive--", 
    "are wired into the code surrounding them in such a way that you can't yank", 
    "them out cleanly.", 
    "The corollary is then you end up with needless repetition and needless", 
    "complexity.", 
    "So you're designing something and you think sometime in the future somebody", 
    "might want to use it in a slightly different way.", 
    "So you try to design a facility that would allow it to be reused.", 
    "Most of the time that's superfluous.", 
    "And there's some design patterns that you can use from the get go that will", 
    "avoid having to do that.", 
    "So with those definitions out of the way, here are a preview of the", 
    "principles that we're going to go through.", 
    "They're the SOLID principles for object oriented programming.", 
    "And probably the most well known exposition of these is Uncle Bob", 
    "Martin's exposition.", 
    "He's one of the co-authors of the Agile Manifesto.", 
    "And he's got a great website/blog called butunclebob.com.", 
    "So the single responsibility principle, the open/closed principle,", 
    "Liskov substitution, injection of dependencies, and Demeter--", 
    "and I want to call your attention to the fact that, if you look up the", 
    "SOLID principles online, usually the \"I\" stands for interface segregation.", 
    "And the \"D\" is used to stand for dependency injection.", 
    "Dependency injection is important, and we're going to talk about it.", 
    "Interface segregation--", 
    "not to say that it's unimportant, but it becomes less important in Ruby and", 
    "dynamically typed or in duck type languages, than it would be in", 
    "statically typed languages.", 
    "The book has a pretty good collaboration of why that's the case.", 
    "But in view of that fact, I have taken some artistic license.", 
    "And I'm going to use \"I\" to mean injection of dependencies, and \"D\" for", 
    "the Demeter principle, which is kind of a want-to-be SOLID principle, but", 
    "isn't officially a part of the SOLID family.", 
    "But it's important enough and arises all the time in Ruby code, so I", 
    "thought it was important to cover.", 
    "So this is our slightly modified version of SOLID.", 
    "I mentioned that our approach to addressing these is going to be really", 
    "similar to the way we did refactoring.", 
    "So just as with refactoring, there's code smells at the level of a class", 
    "that tell us that something might need our attention.", 
    "There's also design smells that tell us when our relationships among", 
    "classes might need to be restructured.", 
    "In both cases there's definitive catalogs that contain many more smells", 
    "than we're going to talk about.", 
    "Just as we saw that some refactorings aren't necessary in Ruby, because they", 
    "exist to work around issues that arise in statically typed languages.", 
    "We're going to find some design patterns are superfluous in Ruby for", 
    "the same reason.", 
    "We're going to look at some quantitative metrics that are tip offs", 
    "that our code might be headed in a bad direction.", 
    "Whereas before, we refactored largely within a class.", 
    "Refactoring in this world is now about moving code between classes,", 
    "extracting one class from another.", 
    "And the very memorable SOFA acronym has its counterpart in the at least as", 
    "memorable SOLID acronym, but with our modification that \"I\" is for injection", 
    "of dependencies and \"D\" is for the principle Demeter.", 
    "So, here are some statements about design patterns.", 
    "One of them is false."
  ]
}