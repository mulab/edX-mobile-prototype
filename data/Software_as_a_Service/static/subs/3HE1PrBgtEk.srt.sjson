{
  "start": [
    650, 
    5440, 
    6270, 
    9870, 
    13330, 
    14330, 
    19510, 
    23740, 
    25520, 
    27740, 
    29040, 
    30950, 
    33610, 
    34790, 
    39100, 
    43510, 
    45530, 
    49680, 
    50430, 
    55590, 
    58070, 
    59620, 
    62480, 
    63630, 
    67010, 
    68570, 
    70450, 
    74610, 
    77250, 
    79060, 
    83510, 
    86460, 
    88500, 
    92630, 
    96540, 
    99780, 
    101510, 
    106260, 
    108240
  ], 
  "end": [
    5440, 
    6270, 
    9870, 
    13330, 
    14330, 
    19510, 
    23740, 
    25520, 
    27740, 
    29040, 
    30950, 
    33610, 
    34790, 
    39100, 
    43510, 
    45530, 
    49680, 
    50430, 
    55590, 
    58070, 
    59620, 
    62480, 
    63630, 
    67010, 
    68570, 
    70450, 
    74610, 
    77250, 
    79060, 
    83510, 
    86460, 
    88500, 
    92630, 
    96540, 
    99780, 
    101510, 
    106260, 
    108240, 
    109490
  ], 
  "text": [
    "ARMANDO FOX: OK, so as a subsystem, does this subsystem follow the", 
    "open/closed principle?", 
    "Is it possible to add new types of functionality, like new database", 
    "adapters, without modifying the existing source code.", 
    "Yes it is.", 
    "You add a new specific adapter for the type of database and you make sure", 
    "that you obey the conventions for how you reference it in config,", 
    "database.yml.", 
    "So open/closed principle, check.", 
    "It is a good example of that.", 
    "How about dependency injection?", 
    "Well, we showed that this is exactly one of the use cases", 
    "for dependency injection.", 
    "The abstract adapter defines a set of methods that any specific database", 
    "adapter has to conform to, and that's the dependency that both ActiveRecord", 
    "and each database, they both depend on it, right?", 
    "The database has to implement to that abstraction and ActiveRecord can rely", 
    "on that abstraction.", 
    "So this is an example of using dependency injection to separate the", 
    "implementation from the interface.", 
    "The Demeter principle.", 
    "There's really no obvious place for doing this here, so red is the answer", 
    "that we were after, right?", 
    "There's nothing about this that talks about somebody reaching through a", 
    "class to another collaborator.", 
    "There's no example of that visible here.", 
    "I mean, yes, ActiveRecord's AbstractAdapter has to reach through", 
    "the interface to use the actual database, but that's OK because the", 
    "interface is just an abstract class, right?", 
    "It's not a separate kind of thing like we had in the example with paper boys,", 
    "and wallets, and cash, and credit cards.", 
    "And then Liskov substitution.", 
    "Yes, it is the case that any method that ActiveRecord tries to call in the", 
    "AbstractAdapter would be safe to call on a subclass of AbstractAdapter.", 
    "In fact, their whole purpose in being is to override those methods and do", 
    "the right thing for each database.", 
    "So, open/close, dependency injection, and good Liskov substitution are all", 
    "illustrated by this example, and I think that was a", 
    "pretty darn fine question."
  ]
}