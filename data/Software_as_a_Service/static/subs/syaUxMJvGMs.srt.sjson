{
  "start": [
    520, 
    3770, 
    6880, 
    10480, 
    13360, 
    14430, 
    14660, 
    18140, 
    21350, 
    23350, 
    23670, 
    27160, 
    29350, 
    32740, 
    36200, 
    36980, 
    37450, 
    40800, 
    43580, 
    45440, 
    46830, 
    49680, 
    51790, 
    56050, 
    59150, 
    64440, 
    65700, 
    66800, 
    69920, 
    71900, 
    73230, 
    76610, 
    77880, 
    81270, 
    84050, 
    85070, 
    88230, 
    90320, 
    91000, 
    93040, 
    96630, 
    97760, 
    101490, 
    105090, 
    107630, 
    109030, 
    110650, 
    113920, 
    117860, 
    118870, 
    120420, 
    122570, 
    125700, 
    126640, 
    130310, 
    132740, 
    134380, 
    137950, 
    139060, 
    141450, 
    145020, 
    146580, 
    150790, 
    155500, 
    158460, 
    162090, 
    164760, 
    167530, 
    169110, 
    171170, 
    174200, 
    175000, 
    178010, 
    180060, 
    182780, 
    184880, 
    186800, 
    189800, 
    192510, 
    196550, 
    197750, 
    201280, 
    204560, 
    208940, 
    216400, 
    220400, 
    223620, 
    227360, 
    230770, 
    234160, 
    239440, 
    243000, 
    246250, 
    247650, 
    251210, 
    253060, 
    254270, 
    255690, 
    259839, 
    262490, 
    264980, 
    269810, 
    275010, 
    277780, 
    279460, 
    282110, 
    288730, 
    291180, 
    294480, 
    296040, 
    301025, 
    303770, 
    307430, 
    308320, 
    310650, 
    315140, 
    318780, 
    320800, 
    324530, 
    327370, 
    330590, 
    335000, 
    337810, 
    341640, 
    342690, 
    347030, 
    350510, 
    351960, 
    355940, 
    358530, 
    361520, 
    363590, 
    369150, 
    372710, 
    376060, 
    378870, 
    382720, 
    384030, 
    388120, 
    391640, 
    396770, 
    400830, 
    403660, 
    407320, 
    411570, 
    413560, 
    418800, 
    421690, 
    425690, 
    428050, 
    432270, 
    434140, 
    437790, 
    440620, 
    442750, 
    444370, 
    451970, 
    455010, 
    459510, 
    466320, 
    469030, 
    473080, 
    476140, 
    479550, 
    481450, 
    483750, 
    486350, 
    488650, 
    492080, 
    493570, 
    498730, 
    502330, 
    504610, 
    511660, 
    514190, 
    517770, 
    521659, 
    525950, 
    528870, 
    530270, 
    531930, 
    535790, 
    538930, 
    540880, 
    543810, 
    546870, 
    551130, 
    554110, 
    555020, 
    556860, 
    558000, 
    561970, 
    563680, 
    567630, 
    568770, 
    573810, 
    576930, 
    579570, 
    582990, 
    585360, 
    588860, 
    593340, 
    597040, 
    599140, 
    599720, 
    601080, 
    602110, 
    604520, 
    604800, 
    606280, 
    609570, 
    613400, 
    617880, 
    621680, 
    625220, 
    630220, 
    631560, 
    635070, 
    637120, 
    640460, 
    641470, 
    647210, 
    647440, 
    649810, 
    650610, 
    653360, 
    656670, 
    663740, 
    665820, 
    669470, 
    670650, 
    674140, 
    678040, 
    679460, 
    681900, 
    685600, 
    687770, 
    690710, 
    694620, 
    697780, 
    699100, 
    701940, 
    703490, 
    706930, 
    712630, 
    714250, 
    717270, 
    720010, 
    722100, 
    725100, 
    727850, 
    730730, 
    735480, 
    736940, 
    741180, 
    743480, 
    745020, 
    748360, 
    755200, 
    759320, 
    761610, 
    762360, 
    764650, 
    769190, 
    770240, 
    774750, 
    778710, 
    780470, 
    782770, 
    785910, 
    789060, 
    791190, 
    795130, 
    797350, 
    800040, 
    800980, 
    805380, 
    807750, 
    810440, 
    818990, 
    823100, 
    824330, 
    828210, 
    830430, 
    834040, 
    837460, 
    840670, 
    841990, 
    846170, 
    849660, 
    853390, 
    855230, 
    859110, 
    862280, 
    864970, 
    868170, 
    869590, 
    873630, 
    878320, 
    881770, 
    885560, 
    889190, 
    892280, 
    895550, 
    896680, 
    900720, 
    902860, 
    904580, 
    905260, 
    908410, 
    910660, 
    911700, 
    915580, 
    918510, 
    921980, 
    923700, 
    927150, 
    931030, 
    934470, 
    936010, 
    940820, 
    943650, 
    949870, 
    951120, 
    954390, 
    957540, 
    959790, 
    962620, 
    964170, 
    967400, 
    967640, 
    972560, 
    974300, 
    979050, 
    983300, 
    984910, 
    989450, 
    991510, 
    995100, 
    998800, 
    1002360, 
    1003330, 
    1006830, 
    1009300, 
    1012130, 
    1017400, 
    1018520, 
    1022890, 
    1024618, 
    1027410, 
    1029650, 
    1033560, 
    1036042, 
    1038240, 
    1041230, 
    1044118, 
    1047500, 
    1049210, 
    1051690, 
    1053910, 
    1057480, 
    1060750, 
    1064150, 
    1065490, 
    1066780, 
    1067990, 
    1072220, 
    1075990, 
    1079560, 
    1080760, 
    1083870, 
    1088200, 
    1093430, 
    1095835, 
    1101530, 
    1102180, 
    1107880, 
    1109520, 
    1113060, 
    1116340, 
    1119010, 
    1120760, 
    1121190, 
    1124220, 
    1125620, 
    1128760, 
    1130770, 
    1135070, 
    1137540, 
    1140460, 
    1142840, 
    1145010, 
    1149710, 
    1153040, 
    1155680, 
    1159760, 
    1162000, 
    1163380, 
    1163600, 
    1164410, 
    1166390, 
    1169050, 
    1172150, 
    1173340, 
    1174610, 
    1178540, 
    1179960, 
    1183880, 
    1188270, 
    1189380, 
    1192470, 
    1193560, 
    1195740, 
    1198700, 
    1200860, 
    1204280, 
    1205460, 
    1207050, 
    1209800, 
    1213260, 
    1216040, 
    1219250, 
    1221280, 
    1225140, 
    1228650, 
    1230080, 
    1232420, 
    1234490, 
    1240210, 
    1242630, 
    1246970, 
    1250830, 
    1253140, 
    1256200, 
    1260410, 
    1263290, 
    1265790, 
    1268760, 
    1272120, 
    1273620, 
    1276580, 
    1280840, 
    1282780, 
    1283880, 
    1286450, 
    1290410, 
    1293760, 
    1295580, 
    1298900, 
    1300232, 
    1304090, 
    1307000, 
    1309440, 
    1311170, 
    1311810, 
    1313780, 
    1317990, 
    1318830, 
    1321080, 
    1321710, 
    1326290, 
    1329370, 
    1333030, 
    1335250, 
    1338190, 
    1340170, 
    1342240, 
    1347000, 
    1350740, 
    1353710, 
    1354940, 
    1358040, 
    1362310, 
    1364420, 
    1367930, 
    1368730, 
    1370290, 
    1372170, 
    1377240, 
    1378330, 
    1379590, 
    1382940, 
    1386550, 
    1390090, 
    1393500, 
    1395240, 
    1395940, 
    1400210, 
    1402520, 
    1403330, 
    1405020, 
    1407940, 
    1412210, 
    1416020, 
    1416930, 
    1420640, 
    1423220, 
    1425670, 
    1425970, 
    1430640, 
    1435910, 
    1436960, 
    1441260, 
    1442490, 
    1449550, 
    1452440, 
    1456180, 
    1466850, 
    1473970, 
    1476370, 
    1478740, 
    1481640, 
    1484220, 
    1484940, 
    1488810, 
    1491920, 
    1492500, 
    1496860, 
    1499580, 
    1501190, 
    1505540, 
    1507300, 
    1508790, 
    1514600, 
    1516410, 
    1518050, 
    1519890, 
    1521050, 
    1522840, 
    1525350, 
    1528180, 
    1529660, 
    1533830, 
    1537880, 
    1542612, 
    1544070, 
    1544630, 
    1545960, 
    1547650, 
    1554460, 
    1558500, 
    1562080, 
    1566510, 
    1569570, 
    1573480, 
    1577280, 
    1580340, 
    1581890, 
    1584170, 
    1585430, 
    1587900, 
    1595140, 
    1596340, 
    1599100, 
    1602820, 
    1605970, 
    1608420, 
    1612030, 
    1615270, 
    1617780, 
    1618160, 
    1620260, 
    1623190, 
    1624520, 
    1626570, 
    1629200, 
    1637320, 
    1638180, 
    1642480, 
    1644860, 
    1648230, 
    1650020, 
    1655690, 
    1658470, 
    1661360, 
    1664960, 
    1666120, 
    1667820, 
    1670970, 
    1672680, 
    1674430, 
    1680070, 
    1686520, 
    1688842, 
    1690150, 
    1690940, 
    1693300, 
    1694010, 
    1699270, 
    1700020, 
    1702530, 
    1708120, 
    1710210, 
    1715190, 
    1716900, 
    1721690, 
    1723140, 
    1727090, 
    1731200, 
    1733970, 
    1736670
  ], 
  "end": [
    3770, 
    6880, 
    10480, 
    13360, 
    14430, 
    14660, 
    18140, 
    21350, 
    23350, 
    23670, 
    27160, 
    29350, 
    32740, 
    36200, 
    36980, 
    37450, 
    40800, 
    43580, 
    45440, 
    46830, 
    49680, 
    51790, 
    56050, 
    59150, 
    64440, 
    65700, 
    66800, 
    69920, 
    71900, 
    73230, 
    76610, 
    77880, 
    81270, 
    84050, 
    85070, 
    88230, 
    90320, 
    91000, 
    93040, 
    96630, 
    97760, 
    101490, 
    105090, 
    107630, 
    109030, 
    110650, 
    113920, 
    117860, 
    118870, 
    120420, 
    122570, 
    125700, 
    126640, 
    130310, 
    132740, 
    134380, 
    137950, 
    139060, 
    141450, 
    145020, 
    146580, 
    150790, 
    155500, 
    158460, 
    162090, 
    164760, 
    167530, 
    169110, 
    171170, 
    174200, 
    175000, 
    178010, 
    180060, 
    182780, 
    184880, 
    186800, 
    189800, 
    192510, 
    196550, 
    197750, 
    201280, 
    204560, 
    208940, 
    216400, 
    220400, 
    223620, 
    227360, 
    230770, 
    234160, 
    239440, 
    243000, 
    246250, 
    247650, 
    251210, 
    253060, 
    254270, 
    255690, 
    259839, 
    262490, 
    264980, 
    269810, 
    275010, 
    277780, 
    279460, 
    282110, 
    288730, 
    291180, 
    294480, 
    296040, 
    301025, 
    303770, 
    307430, 
    308320, 
    310650, 
    315140, 
    318780, 
    320800, 
    324530, 
    327370, 
    330590, 
    335000, 
    337810, 
    341640, 
    342690, 
    347030, 
    350510, 
    351960, 
    355940, 
    358530, 
    361520, 
    363590, 
    369150, 
    372710, 
    376060, 
    378870, 
    382720, 
    384030, 
    388120, 
    391640, 
    396770, 
    400830, 
    403660, 
    407320, 
    411570, 
    413560, 
    418800, 
    421690, 
    425690, 
    428050, 
    432270, 
    434140, 
    437790, 
    440620, 
    442750, 
    444370, 
    451970, 
    455010, 
    459510, 
    466320, 
    469030, 
    473080, 
    476140, 
    479550, 
    481450, 
    483750, 
    486350, 
    488650, 
    492080, 
    493570, 
    498730, 
    502330, 
    504610, 
    511660, 
    514190, 
    517770, 
    521659, 
    525950, 
    528870, 
    530270, 
    531930, 
    535790, 
    538930, 
    540880, 
    543810, 
    546870, 
    551130, 
    554110, 
    555020, 
    556860, 
    558000, 
    561970, 
    563680, 
    567630, 
    568770, 
    573810, 
    576930, 
    579570, 
    582990, 
    585360, 
    588860, 
    593340, 
    597040, 
    599140, 
    599720, 
    601080, 
    602110, 
    604520, 
    604800, 
    606280, 
    609570, 
    613400, 
    617880, 
    621680, 
    625220, 
    630220, 
    631560, 
    635070, 
    637120, 
    640460, 
    641470, 
    647210, 
    647440, 
    649810, 
    650610, 
    653360, 
    656670, 
    663740, 
    665820, 
    669470, 
    670650, 
    674140, 
    678040, 
    679460, 
    681900, 
    685600, 
    687770, 
    690710, 
    694620, 
    697780, 
    699100, 
    701940, 
    703490, 
    706930, 
    712630, 
    714250, 
    717270, 
    720010, 
    722100, 
    725100, 
    727850, 
    730730, 
    735480, 
    736940, 
    741180, 
    743480, 
    745020, 
    748360, 
    751595, 
    759320, 
    761610, 
    762360, 
    764650, 
    769190, 
    770240, 
    774750, 
    778710, 
    780470, 
    782770, 
    785910, 
    789060, 
    791190, 
    795130, 
    797350, 
    800040, 
    800980, 
    805380, 
    807750, 
    810440, 
    818990, 
    823100, 
    824330, 
    828210, 
    830430, 
    834040, 
    837460, 
    840670, 
    841990, 
    846170, 
    849660, 
    853390, 
    855230, 
    859110, 
    862280, 
    864970, 
    868170, 
    869590, 
    873630, 
    878320, 
    881770, 
    885560, 
    889190, 
    892280, 
    895550, 
    896680, 
    900720, 
    902860, 
    904580, 
    905260, 
    908410, 
    910660, 
    911700, 
    915580, 
    918510, 
    921980, 
    923700, 
    927150, 
    931030, 
    934470, 
    936010, 
    940820, 
    943650, 
    946250, 
    951120, 
    954390, 
    957540, 
    959790, 
    962620, 
    964170, 
    967400, 
    967640, 
    972560, 
    974300, 
    979050, 
    983300, 
    984910, 
    989450, 
    991510, 
    995100, 
    998800, 
    1002360, 
    1003330, 
    1006830, 
    1009300, 
    1012130, 
    1017400, 
    1018520, 
    1022890, 
    1024619, 
    1027410, 
    1029650, 
    1033560, 
    1036043, 
    1038240, 
    1041230, 
    1044119, 
    1047500, 
    1049210, 
    1051690, 
    1053910, 
    1057480, 
    1060750, 
    1064150, 
    1065490, 
    1066780, 
    1067990, 
    1072220, 
    1075990, 
    1079560, 
    1080760, 
    1083870, 
    1088200, 
    1093430, 
    1095835, 
    1097085, 
    1102180, 
    1107880, 
    1109520, 
    1113060, 
    1116340, 
    1119010, 
    1120760, 
    1121190, 
    1124220, 
    1125620, 
    1128760, 
    1130770, 
    1135070, 
    1137540, 
    1140460, 
    1142840, 
    1145010, 
    1147100, 
    1153040, 
    1155680, 
    1159760, 
    1162000, 
    1163380, 
    1163600, 
    1164410, 
    1166390, 
    1169050, 
    1172150, 
    1173340, 
    1174610, 
    1178540, 
    1179960, 
    1183880, 
    1188270, 
    1189380, 
    1192470, 
    1193560, 
    1195740, 
    1198700, 
    1200860, 
    1204280, 
    1205460, 
    1207050, 
    1209800, 
    1213260, 
    1216040, 
    1219250, 
    1221280, 
    1225140, 
    1228650, 
    1230080, 
    1232420, 
    1234490, 
    1240210, 
    1242630, 
    1246970, 
    1250830, 
    1253140, 
    1256200, 
    1260410, 
    1263290, 
    1265790, 
    1268760, 
    1272120, 
    1273620, 
    1276580, 
    1280840, 
    1282780, 
    1283880, 
    1286450, 
    1290410, 
    1293760, 
    1295580, 
    1298900, 
    1300232, 
    1301482, 
    1307000, 
    1309440, 
    1311170, 
    1311810, 
    1313780, 
    1317990, 
    1318830, 
    1321080, 
    1321710, 
    1326290, 
    1329370, 
    1333030, 
    1335250, 
    1338190, 
    1340170, 
    1342240, 
    1347000, 
    1350740, 
    1353710, 
    1354940, 
    1358040, 
    1362310, 
    1364420, 
    1367930, 
    1368730, 
    1370290, 
    1372170, 
    1374200, 
    1378330, 
    1379590, 
    1382940, 
    1386550, 
    1390090, 
    1393500, 
    1395240, 
    1395940, 
    1400210, 
    1402520, 
    1403330, 
    1405020, 
    1407940, 
    1412210, 
    1416020, 
    1416930, 
    1420640, 
    1423220, 
    1425670, 
    1425970, 
    1430640, 
    1435910, 
    1436960, 
    1441260, 
    1442490, 
    1449550, 
    1452440, 
    1456180, 
    1466850, 
    1473970, 
    1476370, 
    1478740, 
    1481640, 
    1484220, 
    1484940, 
    1488810, 
    1491920, 
    1492500, 
    1496860, 
    1499580, 
    1501190, 
    1505540, 
    1507300, 
    1508790, 
    1514600, 
    1516410, 
    1518050, 
    1519890, 
    1521050, 
    1522840, 
    1525350, 
    1528180, 
    1529660, 
    1533830, 
    1537880, 
    1539130, 
    1544070, 
    1544630, 
    1545960, 
    1547650, 
    1554460, 
    1558500, 
    1562080, 
    1566510, 
    1569570, 
    1573480, 
    1577280, 
    1580340, 
    1581890, 
    1584170, 
    1585430, 
    1587900, 
    1590300, 
    1596340, 
    1599100, 
    1602820, 
    1605970, 
    1608420, 
    1612030, 
    1615270, 
    1617780, 
    1618160, 
    1620260, 
    1623190, 
    1624520, 
    1626570, 
    1629200, 
    1632770, 
    1638180, 
    1639430, 
    1644860, 
    1648230, 
    1650020, 
    1652455, 
    1658470, 
    1661360, 
    1664960, 
    1666120, 
    1667820, 
    1670970, 
    1672680, 
    1674430, 
    1676425, 
    1686520, 
    1688842, 
    1690150, 
    1690940, 
    1693300, 
    1694010, 
    1699270, 
    1700020, 
    1702530, 
    1708120, 
    1710210, 
    1715190, 
    1716900, 
    1721690, 
    1723140, 
    1727090, 
    1731200, 
    1733970, 
    1736670, 
    1737940
  ], 
  "text": [
    "ARMANDO FOX: Once completed, the requester, RottenPotatoes, can do", 
    "anything that you yourself could do on the provider.", 
    "Not true, because as we've mentioned, and if you've ever actually used this", 
    "in practice, as you've seen, authorization and", 
    "authentication are different.", 
    "Right?", 
    "Even once you've authenticated, the app has to ask permission to do very", 
    "specific things, and you can decide at a pretty granular basis which ones are", 
    "going to be allowed.", 
    "Second.", 
    "If your credentials on the requester, RottenPotatoes, are compromised, then", 
    "you should worry about your credentials on the provider.", 
    "That's false, because the entire premise of third party authentication", 
    "is that you never reveal your authentication credentials outside of", 
    "that one service.", 
    "Right?", 
    "So remember, in that three-way interaction, the only interaction", 
    "where my password is revealed is in interaction that takes place between", 
    "me and Twitter, between me and the off provider.", 
    "No one else ever sees it.", 
    "So the green statement is false.", 
    "If the provider revokes access--", 
    "so, if Twitter says, it is no longer OK to do things on Armando's behalf--", 
    "then RottenPotatoes no longer has any of my info.", 
    "Sadly, that is false, because if it ever had any of my info, there are", 
    "disks, right?", 
    "It has it now.", 
    "So, however much information, however much information I choose to reveal", 
    "about myself-- so you could write the ultimate evil app, right?", 
    "What's the ultimate evil app?", 
    "It asks for permission to log you in as Facebook using", 
    "your Facebook identity.", 
    "It asks for a bunch of things that it might be allowed to do as you, via", 
    "Facebook, and it hopes that you don't notice that it's asking for a lot of", 
    "privileges.", 
    "And then the application immediately saves all that information.", 
    "And it doesn't matter if you revoke access, because now", 
    "it's out there, right?", 
    "It's like undeleting a picture from the internet.", 
    "So be aware that, yeah, it can no longer take actions on your behalf.", 
    "That is certainly true.", 
    "Once the provider revokes access, for example, it can't post things to your", 
    "timeline anymore, but it absolutely knows whatever it used to know.", 
    "Information wants to be free.", 
    "Which leaves the fourth one--", 
    "access can be time-limited.", 
    "And I haven't noticed that most services actually do this.", 
    "They just assume that access is unlimited until you decide to go back", 
    "and revoke it.", 
    "I would feel better if it was time-limited.", 
    "But technologically, it certainly can be.", 
    "You can certainly issue a token, and one of the things in the token can be", 
    "an expiration date.", 
    "And if you try to submit it after that date, it could just get ignored.", 
    "So, kind of the message here is that third-period", 
    "authentication is not a panacea.", 
    "It certainly relieves you of having to reveal your password to", 
    "more than one site.", 
    "But the idea that you're sharing information about yourself--", 
    "once it's shared, your privacy is gone forever, so get over it.", 
    "Let's talk about some really fun stuff.", 
    "This is where some of the power of ActiveRecord starts to actually pay", 
    "back, because so far, especially if you've come from other software as a", 
    "service frameworks where people are used to writing their own queries", 
    "directly against the database, it may seem that some of what's introduced by", 
    "ActiveRecord is a layer of indirection that you don't really need.", 
    "In the next couple of sections of material, I hope to", 
    "convince you otherwise.", 
    "So we'll talk about associations and foreign keys.", 
    "If you've done some database-oriented programming, some of these concepts", 
    "will be familiar to you.", 
    "If not, don't worry, because my assumption is that, for the most part,", 
    "you haven't.", 
    "So our motivating example is, we want to augment RottenPotatoes with the", 
    "ability to create reviews about a movie.", 
    "We're going to have a really simple model for now.", 
    "The only thing a review contains is how many potatoes out of a possible", 
    "five you're going to give a movie.", 
    "So the goal is, we want to easily represent the concept that a movie has", 
    "many reviews.", 
    "So if we didn't care about databases, just from a programming model", 
    "standpoint, what would we want this code to look like?", 
    "We might want something that looks kind of like this, where we can find a", 
    "movie, we can find a couple of moviegoers, and we can create reviews", 
    "by those moviegoers for those particular movies.", 
    "Given a movie, we could also ask what reviews it has, we could assign some", 
    "reviews to it, we could add a new review to a movie--", 
    "we could even do operations on the collection of reviews, just like it", 
    "was any other kind of innumerable list.", 
    "So, the question is, remember when we first talked about the reason", 
    "ActiveRecord exists at all, it's that there's a gap between what you want to", 
    "write in your programming language, and how you represent things in", 
    "structured storage.", 
    "And what we're going to see now is that associations help close that gap", 
    "when you want to represent relationships among", 
    "different types of models.", 
    "Because that's what we're really doing here, right?", 
    "We're setting up a relationship between one kind of model-- a movie--", 
    "and another kind of model-- a review-- and a third kind of model-- the", 
    "movie-goer who wrote the review.", 
    "So, how might we actually do this?", 
    "Let us do a quick overview of how you could express the concept of having", 
    "many in terms of the relational database model.", 
    "So we have two tables.", 
    "We have a table for movies, we have a table for reviews.", 
    "And the idea is that in the Reviews table, we're going to include an", 
    "additional field, which is called a foreign key.", 
    "It's called a foreign key because its value refers to a key", 
    "in some other table.", 
    "So the idea is, a review is going to have a number of potatoes and an", 
    "identifier of which movie it refers to.", 
    "Then you can see how this would allow us to associate multiple reviews with", 
    "the same movie.", 
    "We could certainly have multiple reviews in the reviews table.", 
    "They'll all have different primary key IDs, as is the usual case, but if they", 
    "all have the same movie ID, then they'll all be pointing to the same", 
    "movie in some sense, right?", 
    "So this is sort of the classic way that you can express a one-to-many", 
    "relationship in terms of the relational database model.", 
    "The way that I've chosen to name the attributes follows the rails", 
    "convention, which is, we always use ID to refer to the primary key of that", 
    "type of object, a movie or a review.", 
    "But when there's a foreign key, we prefix ID with the name of the thing", 
    "that it points to.", 
    "So movie underscore ID is a foreign key to the table of movies.", 
    "So, if you have those tables, how do you actually manipulate them to get", 
    "the effect that we want?", 
    "You do a join query, which in relational database parlance is a way", 
    "of combining records from two or more tables--", 
    "we'll do an example based on two tables, but we can extend it easily", 
    "enough to three or more.", 
    "And the join refers to the fact that we're going to join the two tables in", 
    "that we're going to enumerate every combination of the rows of one table", 
    "with every combination of rows of the other table, but then we're going to", 
    "select out specific ones based on a criterion.", 
    "So let's do a simple example, because this is easier to see in example form", 
    "than it is to explain.", 
    "And in our simple example, it's going to correspond to this SQL query where", 
    "we're going to select a bunch of stuff from the movies tables and the reviews", 
    "table with the criterion that we only care about the join rows where the", 
    "primary key of the movies matches up with the foreign key of the review.", 
    "So let's actually take a look at what this means.", 
    "So what's the Cartesian product, named for Rene Descartes, who did not win a", 
    "Turing Award, but probably would have if they'd been invented at the time?", 
    "Famous mathematician and logician.", 
    "And the idea of a Cartesian product is that you're going to take two", 
    "different entities, each of which has a number of distinct points-- so we", 
    "have an artist table with three different rows, we have a reviews", 
    "table that has three different rows.", 
    "And the Cartesian product takes every row of the first one and mates it with", 
    "every possible row of the second one.", 
    "So the number of rows in the first one times the number of rows in the second", 
    "one is the size of the overall Cartesian product.", 
    "Three rows here, three rows here means that the Cartesian", 
    "product has nine rows.", 
    "But from these, we will filter out only the ones for which the artist ID", 
    "in the reviews table matches the primary key of the artist.", 
    "So that's what the ones that are grayed out are supposed to represent.", 
    "So at the end, what we've done is we've used foreign keys to set up a", 
    "has many relationship, and we've constructed a way of filtering the", 
    "Cartesian product to only return the ones that we care about.", 
    "Essentially, we've used this underlying feature, the foreign key", 
    "feature, of relational databases to model the thing that we really want,", 
    "which is a one-to-many relationship.", 
    "And we'll see in a minute that we could also do many-to-many and", 
    "many-to-one and various other relationships, as well.", 
    "So this is the computation that we want to do.", 
    "We want to take the Cartesian product of two tables-- and that's done in SQL", 
    "using the join syntax--", 
    "and we want to filter it so that we only care about the cases where the", 
    "foreign key of one table matches up with the primary key", 
    "of the other table.", 
    "The owning tables', if you wish, primary key matches the owned tables'", 
    "foreign key.", 
    "So ActiveRecord has an entire subsystem for manipulating", 
    "associations that makes this really easy to do, And it makes it easy to", 
    "write it Rubyistically such that once you set things up correctly, you don't", 
    "have to worry too much about the details of how that join and how the", 
    "filtering actually happens.", 
    "You almost can be oblivious to it.", 
    "And I say \"almost\" because, like all abstractions, this one is leaky.", 
    "You have to know a little bit about it so that when you misuse it, you can", 
    "identify why you misused it.", 
    "And we'll have more to say about that when we talk about performance.", 
    "So here's how we express it Rubyistically.", 
    "We want a movie to have many reviews, so we just say that.", 
    "Let me know if you need me to repeat that.", 
    "We also--", 
    "and we'll see in a minute that we don't have to do this,", 
    "but it's a good idea--", 
    "in the reviews, we can also talk about the review belonging to a movie.", 
    "So notice the asymmetry, right?", 
    "Has many implies that for one of these, one movie, there's going to be", 
    "lots of these.", 
    "But belongs to kind of implies single ownership, so that any given review", 
    "belongs to a movie, as opposed to belonging to multiple movies.", 
    "So they're asymmetric.", 
    "One way to remember which is which--", 
    "and the first couple of times you'll do this, you'll have trouble", 
    "remembering, well, which table gets the foreign key, Right This foreign", 
    "key belongs to this table.", 
    "So if you're saying, review belongs to movie, then the foreign key is going", 
    "to belong in the reviews table.", 
    "I made that up.", 
    "That's one way of remembering it.", 
    "Maybe you don't need to use it.", 
    "If so, who cares?", 
    "OK.", 
    "So what's the basic idea here?", 
    "Like we showed, the reviews table is going to get a foreign key field whose", 
    "job is going to be to hold the primary key of the movie that it's for.", 
    "And what the associations portion of Active Record gives us is if we now", 
    "say a movie dot reviews, it will construct the right query to perform", 
    "that database join that we saw, take the Cartesian product, and filter out", 
    "only the rows where the primary key for some movie matches the foreign key", 
    "in the reviews field.", 
    "So effectively, what we'll get back is all the reviews associated with one", 
    "and only one movie.", 
    "If which one should be plural.", 
    "No, it should not be.", 
    "So I'm assuming here that movie is a particular instance of a movie.", 
    "Right?", 
    "Because it doesn't make sense to talk about the idea of a", 
    "collection of movies.", 
    "It makes sense to talk about the idea of a particular movie.", 
    "So I'm assuming that movie is an instance of an active record movie", 
    "object, and ID refers to whatever its primary key is, and then the movie ID", 
    "would be a field of a review.", 
    "I guess I could have put review dot movie ID to make this clearer, right?", 
    "Like this.", 
    "If I say review dot movie, I'm going the other way.", 
    "I'm saying, look up the one movie whose primary key matches the movie ID", 
    "field of that review.", 
    "Hence it's asymmetrical.", 
    "There could be many reviews whose movie ID is the same.", 
    "That means they're all reviews of the same movie.", 
    "But for any given review, it only belongs to one movie.", 
    "You can only follow the backward pointer in one direction.", 
    "By the way, the foreign key fields don't appear by themselves, right?", 
    "We have to actually add them in.", 
    "Remember, the way we change our database tables", 
    "is by using a migration.", 
    "So here's an example of that.", 
    "So if we wanted to create a Reviews table that does what we just said, we", 
    "create the table--", 
    "potatoes as the number of potatoes that it's going to get--", 
    "and we're going to add references fields.", 
    "References are foreign key fields.", 
    "In older versions of Rails, this is actually just an integer.", 
    "But references is more general, in case it's working with a database", 
    "where foreign keys aren't done strictly as integers.", 
    "So, each of these is going to create a foreign key field, one for movies and", 
    "one for moviegoers.", 
    "So here, we're creating a reviews table where each review belongs to a", 
    "movie, and also belongs to a movie-goer.", 
    "It sort of doesn't make sense to have a review that", 
    "wasn't written by anybody.", 
    "So with those foreign keys in place, what can we now do?", 
    "Well, given a movie, we can say movie dot reviews.", 
    "And by the way, you should already see that this is an example of", 
    "metaprogramming, right?", 
    "Because what's going on here?", 
    "This works because reviews was declared as the subject of a has many", 
    "association.", 
    "Because I said movie has many reviews, that defines new methods like movie", 
    "dot reviews that will give me back an innumerable of all the reviews that", 
    "are associated with that movie.", 
    "I can also go the other way.", 
    "Given a interview, I can say review dot movie.", 
    "And these are two different kinds of lookups that are going on, right?", 
    "Review dot movie is a really simple look up.", 
    "You find the review, whatever its movie ID field is, you look up the", 
    "movie whose primary key matches that.", 
    "Movie dot reviews is more involved, because it's actually", 
    "got to do the join.", 
    "It's got to enumerate all of the reviews whose movie ID field matches", 
    "the primary key of this movie.", 
    "More interestingly is, I can also add new reviews.", 
    "So, here is a movie that's already part of my database, and based on the", 
    "return value of movie dot reviews, I can build or create", 
    "a new review object.", 
    "What's the difference between doing build or create versus just using the", 
    "new method that we've already seen for active record?", 
    "Well, remember that if we're now stipulating that the review is going", 
    "to belong to a movie, then at the time we create a new review, we immediately", 
    "have to associate it with which movie it belongs to.", 
    "And that's what build does.", 
    "Build is kind of like new, but it prepopulates the new object with a", 
    "movie underscore ID field that matches this guy.", 
    "So it gives you a way of building up a review, and then later on saving it,", 
    "as we've done before.", 
    "We can use the append operator to add a new review as well.", 
    "So any of these methods would work.", 
    "And the way that this works is that the models that are part of the", 
    "association have to have an attribute for the foreign key", 
    "of the owning object.", 
    "So, in the case of the reviews table, they're expected to have a movie ID.", 
    "The ActiveRecord methods that manage associations actually do all this", 
    "stuff, so you don't actually have to manage those yourself.", 
    "And one of the reasons to actually use the ActiveRecord methods to do this", 
    "instead of directly managing foreign keys is if you're forced to use a", 
    "database that, for legacy reasons, doesn't use the same naming", 
    "conventions as Rails does, you can actually override how", 
    "these columns are named.", 
    "And it makes it less likely that your code will break if you keep it hidden", 
    "behind these abstractions.", 
    "So some questions.", 
    "How does it work?", 
    "How are table names and column names determined from has many?", 
    "Well, just as we saw with active record, it can", 
    "introspect the database.", 
    "If you say, movie has many reviews, there had better be a reviews table", 
    "somewhere in the database that it can pull from.", 
    "A more interesting question is, we saw two sides of the association, right?", 
    "We said, movie has many interviews.", 
    "We also said that review belongs to movie.", 
    "So one question is, what would happen if we omit the belongs to part and we", 
    "only had the has many part?", 
    "Here's a hint.", 
    "When we created the migration that would set up a reviews table, we", 
    "created a reviews table with a foreign key back to movies.", 
    "What changes did we have to make to the movie table?", 
    "None, right?", 
    "To associate many reviews with a single movie, you don't have to do", 
    "anything to the movie table, because the foreign key information is all in", 
    "the owned side, the reviews side.", 
    "So, if we omit the belongs to-- remember, what does", 
    "belongs to give us?", 
    "It gives us the ability to do this.", 
    "Right?", 
    "It gives us the ability to say, given this review, what movie owns the", 
    "review, so to speak?", 
    "And the thing to keep in mind here is that this behavior, the fact that I", 
    "can call a particular method on a view object, is completely independent of", 
    "the underlying database.", 
    "So if I omit the belongs to, I can't do this, but it doesn't mean that the", 
    "relationship is any different in the database, right?", 
    "It's still the case that there's a reviews table with foreign keys, and", 
    "there's a movie table, and the foreign keys in the one refer to the other.", 
    "The only thing belongs to gives me, is it gives me the convenience of being", 
    "able to do this query.", 
    "So this is an additional behavior that doesn't change the way that the", 
    "database represents the association.", 
    "It only changes what I can do with the association.", 
    "So that's the reason that belongs to and has many are actually separate.", 
    "Another question.", 
    "Would you expect that associations are implemented as a class or as a module?", 
    "Raise your hand if you think the answer is class.", 
    "For the benefit of those in TV Land, no hands are up.", 
    "And if you think the answer is a module.", 
    "For the benefit of those in TV Land, most people still didn't do anything,", 
    "but a few people raised their hands for module, and the rest of you should", 
    "have been brave, because modules are correct.", 
    "Why would it make sense to implement associations as a module?", 
    "Because it defines a set of behaviors that you're adding on to an active", 
    "record model, namely the ability to relate it to other models, but you", 
    "might want to add it onto any type of model.", 
    "So implementing it as a class doesn't make sense, right?", 
    "Then you run into the problem of inheritance, where what does it", 
    "inherit from, and how would you add these behaviors to your own models?", 
    "So associations are, from an implementation perspective, a great", 
    "example of using a module.", 
    "Question?", 
    "STUDENT: [INAUDIBLE]", 
    "PROFESSOR: No.", 
    "A module is a collection of methods that have their own name space.", 
    "When we talked about duck typing and the idea that there's this contract", 
    "that if the class that you're mixing stuff into fulfills the contract, you", 
    "can add new behaviors to it.", 
    "Like the innumerable module is a collection of things you can do as", 
    "long as the class mixing it in responds to each.", 
    "So a module is a collection of methods that follow a duck typing contract.", 
    "Not to be confused with a model in the ActiveRecord sense.", 
    "STUDENT: [INAUDIBLE]", 
    "PROFESSOR: Yeah.", 
    "So associations are declared inside of the models that you're going to", 
    "relate, but the implementation--", 
    "so how does Rails provide the functionality of doing associations?", 
    "It's provided as a module because you have to be able to mix it into any", 
    "kind of model.", 
    "STUDENT: [INAUDIBLE]", 
    "PROFESSOR: Yeah.", 
    "So that the part of Rails that defines, has many, belongs to, and a", 
    "few other things that we're going to see--", 
    "those things are defined as part of a module called associations, and", 
    "ActiveRecord mixes in that module by default.", 
    "That means that any class you create that descends from ActiveRecord has", 
    "the modules behavior as built into it, as well.", 
    "But when you want to be able to take a set of behaviors and add it to any", 
    "class, that's when a module comes in handy.", 
    "And that's why this is an example of it.", 
    "Was there a question behind you as well, or it got resolved?", 
    "I think the question is, by specifying the foreign key, does that mean that", 
    "you've created the association between tables?", 
    "Because I said, you can omit the belongs to, does that mean that it's", 
    "the presence of the foreign key that really defines whether", 
    "the association exists?", 
    "OK.", 
    "That's a good question.", 
    "Let's take a little detour to answer it.", 
    "So the associations really consist of two things, right?", 
    "One thing is, you need a way to represent the fact that things are", 
    "associated with each other.", 
    "That's what the foreign key gives you.", 
    "The foreign key gives you a way to connect a row in one table with one or", 
    "more rows in another table.", 
    "But, the other aspect of associations is, you need the behaviors, right?", 
    "You need a way to say, given this row of a table, find all the corresponding", 
    "rows in the other table.", 
    "Or given a row in the reviews table, find me the one row in the movies", 
    "table it corresponds to.", 
    "So those are behaviors of associations.", 
    "What the foreign key in the tables gives you is the data structure part.", 
    "It gives you a way to represent the relationship.", 
    "But what has many and belongs to give you are behaviors that make use of", 
    "that relationship.", 
    "And they're independent of each other, right?", 
    "You could say has many and belongs to, and if you don't have the foreign key", 
    "table in place, you won't get an error until run time, because Rails will", 
    "look for a movie underscore ID field, and it won't find it.", 
    "But they're only loosely related to each other.", 
    "One of them is there to support the other.", 
    "The data structures give you the association, a way to represent the", 
    "association, but belongs to and has many give you a way to traverse the", 
    "association.", 
    "Does that make sense?", 
    "OK.", 
    "So I think we can now add another page to the Rails cookbook.", 
    "How do you create a one-to-many association?", 
    "Well, first of all, in your models, you'll add has many to the owning", 
    "side, and you'll probably want to add belongs to to the owned side.", 
    "Again, you could omit belongs to.", 
    "That doesn't change the layout of the database, but it does change whether", 
    "you can traverse the association in both directions or not.", 
    "In most cases, you'll find that it's useful enough to traverse it in both", 
    "directions that you'll want to add belongs to.", 
    "You need to create a migration so that you can add the appropriate foreign", 
    "keys to the appropriate tables, and run the migration.", 
    "And don't forget--", 
    "because you'll soon be doing a lot of testing-- whenever you do a schema", 
    "change to your database, you have to make sure that the test database gets", 
    "regenerated, because the schema has changed.", 
    "This is a common pitfall.", 
    "If you just made a change to your database, and now you try to run your", 
    "tests, and a bunch of things fail, remember that you have to run rake db", 
    "test prepare to copy the new schema that you just changed", 
    "over to the test database.", 
    "Otherwise badness will occur.", 
    "Question?", 
    "STUDENT: [INAUDIBLE]", 
    "PROFESSOR: The question was, does point number four mean that when you", 
    "change your model-- in other words, when you add the has many and belongs", 
    "to declarations to your model--", 
    "That's a good question.", 
    "Let's put it out as a class question.", 
    "The question is, if I've just changed my model, do I have to run rake db", 
    "test prepare?", 
    "It's good that we ask these questions in class.", 
    "OK.", 
    "So the only thing db test prepare does, is it copies the schema of the", 
    "development database over to the new database.", 
    "If you've changed your models but you have not applied any migration to the", 
    "database, then two statements are true.", 
    "The first statement is that step four won't do anything, because you haven't", 
    "applied a migration to the development database.", 
    "The second thing that's true is, you'll get an error.", 
    "Because in your model, you've said A has many Bs and B belongs to A, but", 
    "you haven't changed your database to allow it to represent the association.", 
    "That's why I'm saying that associations really have", 
    "two halves to them.", 
    "There's the representation half, which requires you to set up foreign keys in", 
    "the database, and there's the behavior half, which you get by saying, has", 
    "many and belongs to.", 
    "Another way to look at it is, I could do associations without ever using has", 
    "many and belongs to.", 
    "I could do things the hard way.", 
    "I could write specific queries--", 
    "in fact, this would be a good exercise to do in class.", 
    "I'll do this in a future lecture.", 
    "This is a great exercise.", 
    "Pretend that you didn't have has many or belongs to, but you've set up your", 
    "database in the correct manner to say that a movie has may reviews.", 
    "Write the queries using plain old active record where, like we've", 
    "already been using, that would return, let's say, all the reviews associated", 
    "with a given movie.", 
    "OK.", 
    "So let's explore this question of, what's the interaction between the", 
    "structure of the database and the use of things like has", 
    "many and belongs to?", 
    "So here's what I've done.", 
    "I have a version of Rotten Potatoes that has the table we described, and I", 
    "created it using this exact migration, but I did that offline.", 
    "And I've got a console window here where we can type various things in", 
    "the application.", 
    "So one of the things I did, is I grabbed a random movie--", 
    "not really a random one, because I created some reviews in advance,", 
    "anticipating this moment.", 
    "Great.", 
    "So here's my movie dot find, and we can hopefully see, as we always can,", 
    "what was the SQL query that went to the database in response to", 
    "my movie dot find.", 
    "So it just said, find movie where movies dot ID equals whatever I typed,", 
    "which was 1.", 
    "And now I said, m dot reviews, because in my source code, indeed I have movie", 
    "has many reviews, I have review belongs to movie.", 
    "So, what happened when I said m dot reviews?", 
    "All it did was form another query where it looked for all of the rows in", 
    "the reviews table where the movie ID field of the reviews equals--", 
    "Where did the 1 come from?", 
    "It's the ID of this, right?", 
    "So what's going on here?", 
    "We can actually see the inner workings of the reviews method.", 
    "This is what it did.", 
    "At the end of the day, all it did is it created another SQL query.", 
    "And remember, ActiveRecord is based on having a relational database", 
    "underneath it.", 
    "So no matter what fancy, cool thing I show you that you can use ActiveRecord", 
    "to do, at the end of the day, it's got to translate into", 
    "one or more SQL queries.", 
    "So now let's get back to this question of, what happens if we", 
    "didn't use has many?", 
    "Let's comment them out.", 
    "I'll comment out the belongs to as well, and I will reopen the console.", 
    "We'll grab a movie.", 
    "What's going to happen?", 
    "It's not going to work.", 
    "And indeed it doesn't work.", 
    "Undefined method reviews.", 
    "Have I changed the database?", 
    "Are the foreign keys still there?", 
    "And in fact, how can we prove it?", 
    "Well, we could do this, right?", 
    "What's the equivalent of this using ActiveRecord?", 
    "How about that?", 
    "Ah.", 
    "OK?", 
    "So, this is the difference, right?", 
    "I haven't changed the database.", 
    "I can manually generate the same exact query on my own as was generated for", 
    "me when I used the built-in associations functionality.", 
    "But the reason to use the associations functionality is A, it saves me typing", 
    "a query and it makes my code more independent of the database layout, B,", 
    "as we'll see a little bit later in the lecture, or at the rate we're going,", 
    "more likely on Wednesday, you can actually stack up a lot of different", 
    "conditions and have nested associations and reusable scopes--", 
    "you can sort of build up things like tinker toys in a way that makes your", 
    "code very, very readable.", 
    "But if you look at the query that comes out, the query is pretty", 
    "convoluted.", 
    "So what we're doing is we're providing a much nicer abstraction--", 
    "and by the way, I can add this after the fact, right?", 
    "Ooh.", 
    "Now why did that work?", 
    "Because the only thing that has many is doing is adding a new set of", 
    "behaviors to allow the right kind of query to be generated.", 
    "It doesn't know anything about the database.", 
    "It's assuming that when it actually tries to generate the database query,", 
    "that all of these columns exist, and that they have the appropriate names", 
    "based on the names of the models.", 
    "OK.", 
    "So, we have that.", 
    "Let's grab the first one.", 
    "What about this?", 
    "Work, don't work?", 
    "Bam, it doesn't work.", 
    "What could we have done in the absence of belongs to?", 
    "What would I type?", 
    "Where--", 
    "that worked, right?", 
    "So all I'm doing is I'm manually creating the same queries that would", 
    "have been synthesized for me.", 
    "Or I can be lazy, which is much preferred.", 
    "But again, hopefully this helps decipher things a little bit, right?", 
    "The only thing that has many and belongs to are doing is they're adding", 
    "a collection of new functionality that makes it possible to generate these", 
    "queries automatically.", 
    "They are not changing the database.", 
    "They are, in fact, assuming that I have already set up the database to", 
    "have the right foreign keys in the right tables.", 
    "Otherwise they just wouldn't work.", 
    "So, does that answer your question?", 
    "STUDENT: [LAUGHTER]", 
    "PROFESSOR: Was it useful?", 
    "OK.", 
    "Other questions?", 
    "It's good to take a little extra time on this, because this is a pretty", 
    "important feature.", 
    "So, which of these, if any, is not a correct way of saving a new", 
    "association?", 
    "So suppose m is an existing movie.", 
    "We could create a review, and we could explicitly pass it, the primary key of", 
    "movie that it's for.", 
    "We could use the build function to start building a review, and then save", 
    "it explicitly.", 
    "We could use the append operator to create a new review for", 
    "a particular movie.", 
    "Or we could do any of the three of these-- all would work.", 
    "And as a hint, the entire discussion we just had was about the idea that", 
    "there's the representation of something in the database, and there's", 
    "the way that we choose to manipulate that representation in our programming", 
    "language, and that those are separate."
  ]
}