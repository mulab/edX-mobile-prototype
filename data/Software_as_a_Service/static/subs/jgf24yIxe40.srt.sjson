{
  "start": [
    1040, 
    2660, 
    3650, 
    6660, 
    10190, 
    14070, 
    15450, 
    17820, 
    19520, 
    21800, 
    24320, 
    26470, 
    28390, 
    30700, 
    31580, 
    34460, 
    38370, 
    39960, 
    43120, 
    44810, 
    47240, 
    49610, 
    52190, 
    53950, 
    55720, 
    57540, 
    58870, 
    61660, 
    63290, 
    67030, 
    70460, 
    73460, 
    77290, 
    81000, 
    84620, 
    87850, 
    90150, 
    91330, 
    94440, 
    95760, 
    96070, 
    99050, 
    103410, 
    104670, 
    106840, 
    107780, 
    112240, 
    114820, 
    115930, 
    117940, 
    121160, 
    124810, 
    128570, 
    130150, 
    133580, 
    136000, 
    137080, 
    140800, 
    142680, 
    145830, 
    149020, 
    151380, 
    152260, 
    156410, 
    160660, 
    161240, 
    165400, 
    168040, 
    170260, 
    173470, 
    176720, 
    178000, 
    180510, 
    184970, 
    186070, 
    190450, 
    193980, 
    195660, 
    198760, 
    200730, 
    205510, 
    207970, 
    211230, 
    212640, 
    216820, 
    218100, 
    222950, 
    224840, 
    225925, 
    229090, 
    230740, 
    234980, 
    239090, 
    240950, 
    242660, 
    244040, 
    244200, 
    245420, 
    248110, 
    249150, 
    250940, 
    252000, 
    253580, 
    254660, 
    257250, 
    258640, 
    262470, 
    263780, 
    266910, 
    268040, 
    272760, 
    275530, 
    280030, 
    280880, 
    282520, 
    284470, 
    285400, 
    288420, 
    291980, 
    295400, 
    299310, 
    300510, 
    301680, 
    304700, 
    308670, 
    310010, 
    312000, 
    312270, 
    313890, 
    317050, 
    318550, 
    319960, 
    320780, 
    324020, 
    327430, 
    330450, 
    331450, 
    332720, 
    336440, 
    338830, 
    341120, 
    342480, 
    345070, 
    346640, 
    349620, 
    350900, 
    355820, 
    358080, 
    360900, 
    362950, 
    366680, 
    367910, 
    371930, 
    374150, 
    376780, 
    380380, 
    382540, 
    383370, 
    385680, 
    386830, 
    391250, 
    392030, 
    393230, 
    397040, 
    400570, 
    402630, 
    404310, 
    408160, 
    409820, 
    411700, 
    416700, 
    421120, 
    423500, 
    426590, 
    429660, 
    432710, 
    435570, 
    440680, 
    441870, 
    445760, 
    447910, 
    450720, 
    452570, 
    453760, 
    457890, 
    458870, 
    460670, 
    463770, 
    465980, 
    468370, 
    470920, 
    474210, 
    477460, 
    481210, 
    482770, 
    486140, 
    489000, 
    490170, 
    494520, 
    495630, 
    497670, 
    500980, 
    505130, 
    507320, 
    508380, 
    510530, 
    512169, 
    514120, 
    515080, 
    516500, 
    520770, 
    523530, 
    524730, 
    526580, 
    530230, 
    531570, 
    535650, 
    538270, 
    538530, 
    539900, 
    543620, 
    544790, 
    547460, 
    550280, 
    553260, 
    556560, 
    557740, 
    559490, 
    561470, 
    566670, 
    567500, 
    570190, 
    574240, 
    577110, 
    580630, 
    584370, 
    589140, 
    592800, 
    594340, 
    598730, 
    601870, 
    602450, 
    605680, 
    607190, 
    607730, 
    611420, 
    614070, 
    616050, 
    620630, 
    624910, 
    627150, 
    629320, 
    630780, 
    633670, 
    635700, 
    637070, 
    640170, 
    641830, 
    643050, 
    643900, 
    645550, 
    650080, 
    651760, 
    655770, 
    661220, 
    664640, 
    666960, 
    667820, 
    671030, 
    675730, 
    681030, 
    682570, 
    684990, 
    687430, 
    689040, 
    690600, 
    694530, 
    696660, 
    700160, 
    701650, 
    703630, 
    704300, 
    707970, 
    711620, 
    712990, 
    715610, 
    717620, 
    719530, 
    723290, 
    727150, 
    729100, 
    730690, 
    733150, 
    738420, 
    741340, 
    743430, 
    745630, 
    746780, 
    754940, 
    756420, 
    757860, 
    759970, 
    762740, 
    764840, 
    770460, 
    773020, 
    776870, 
    779900, 
    782260, 
    783630, 
    785260, 
    787470, 
    789330, 
    793280, 
    795040, 
    795960, 
    797960, 
    802520, 
    806680, 
    809290, 
    812360, 
    815630, 
    816910, 
    821730, 
    824600, 
    826450, 
    828780, 
    832050, 
    834770, 
    836410, 
    840560, 
    844070, 
    847410, 
    851450, 
    852530, 
    857010, 
    859900, 
    862090, 
    863530, 
    864960, 
    866940, 
    867920, 
    870400, 
    872830, 
    875530, 
    878670, 
    880690, 
    883380, 
    884620, 
    889680, 
    891380, 
    892770, 
    894240, 
    895900, 
    896490, 
    897590, 
    902710, 
    903860, 
    905990, 
    909180, 
    912860, 
    914580, 
    917020, 
    920420, 
    923570, 
    928030, 
    931910, 
    934710, 
    936910, 
    938670, 
    940470, 
    942920, 
    944310, 
    948820, 
    952460, 
    953500, 
    956090, 
    959320, 
    962300, 
    963470, 
    966730, 
    970160, 
    975000, 
    978350, 
    980270, 
    982700, 
    983690, 
    987690, 
    991960, 
    993530, 
    995850, 
    996820, 
    1000580, 
    1002630, 
    1005830, 
    1006940, 
    1010190, 
    1014110, 
    1017450, 
    1019210, 
    1023280, 
    1026540, 
    1029069, 
    1029490, 
    1033880, 
    1034810, 
    1036530, 
    1038050, 
    1039280, 
    1041000
  ], 
  "end": [
    2660, 
    3650, 
    6660, 
    10190, 
    14070, 
    15450, 
    17820, 
    19520, 
    21800, 
    24320, 
    26470, 
    28390, 
    30700, 
    31580, 
    34460, 
    38370, 
    39960, 
    43120, 
    44810, 
    47240, 
    49610, 
    52190, 
    53950, 
    55720, 
    57540, 
    58870, 
    61660, 
    63290, 
    67030, 
    70460, 
    73460, 
    77290, 
    81000, 
    84620, 
    87850, 
    90150, 
    91330, 
    94440, 
    95760, 
    96070, 
    99050, 
    103410, 
    104670, 
    106840, 
    107780, 
    112240, 
    114820, 
    115930, 
    117940, 
    121160, 
    124810, 
    128570, 
    130150, 
    133580, 
    136000, 
    137080, 
    140800, 
    142680, 
    145830, 
    149020, 
    151380, 
    152260, 
    156410, 
    160660, 
    161240, 
    165400, 
    168040, 
    170260, 
    173470, 
    176720, 
    178000, 
    180510, 
    184970, 
    186070, 
    190450, 
    193980, 
    195660, 
    198760, 
    200730, 
    205510, 
    207970, 
    211230, 
    212640, 
    216820, 
    218100, 
    222950, 
    224840, 
    225925, 
    229090, 
    230740, 
    234980, 
    239090, 
    240950, 
    242660, 
    244040, 
    244200, 
    245420, 
    248110, 
    249150, 
    250940, 
    252000, 
    253580, 
    254660, 
    257250, 
    258640, 
    262470, 
    263780, 
    266910, 
    268040, 
    272760, 
    275530, 
    280030, 
    280880, 
    282520, 
    284470, 
    285400, 
    288420, 
    291980, 
    295400, 
    299310, 
    300510, 
    301680, 
    304700, 
    308670, 
    310010, 
    312000, 
    312270, 
    313890, 
    317050, 
    318550, 
    319960, 
    320780, 
    324020, 
    327430, 
    330450, 
    331450, 
    332720, 
    336440, 
    338830, 
    341120, 
    342480, 
    345070, 
    346640, 
    349620, 
    350900, 
    355820, 
    358080, 
    360900, 
    362950, 
    366680, 
    367910, 
    371930, 
    374150, 
    376780, 
    380380, 
    382540, 
    383370, 
    385680, 
    386830, 
    391250, 
    392030, 
    393230, 
    397040, 
    400570, 
    402630, 
    404310, 
    408160, 
    409820, 
    411700, 
    416700, 
    421120, 
    423500, 
    426590, 
    429660, 
    432710, 
    435570, 
    440680, 
    441870, 
    445760, 
    447910, 
    450720, 
    452570, 
    453760, 
    457890, 
    458870, 
    460670, 
    463770, 
    465980, 
    468370, 
    470920, 
    474210, 
    477460, 
    481210, 
    482770, 
    486140, 
    489000, 
    490170, 
    494520, 
    495630, 
    497670, 
    500980, 
    505130, 
    507320, 
    508380, 
    510530, 
    512169, 
    514120, 
    515080, 
    516500, 
    520770, 
    523530, 
    524730, 
    526580, 
    530230, 
    531570, 
    535650, 
    538270, 
    538530, 
    539900, 
    543620, 
    544790, 
    547460, 
    550280, 
    553260, 
    556560, 
    557740, 
    559490, 
    561470, 
    566670, 
    567500, 
    570190, 
    574240, 
    577110, 
    580630, 
    584370, 
    589140, 
    592800, 
    594340, 
    598730, 
    601870, 
    602450, 
    605680, 
    607190, 
    607730, 
    611420, 
    614070, 
    616050, 
    620630, 
    624910, 
    627150, 
    629320, 
    630780, 
    633670, 
    635700, 
    637070, 
    640170, 
    641830, 
    643050, 
    643900, 
    645550, 
    650080, 
    651760, 
    655770, 
    661220, 
    664640, 
    666960, 
    667820, 
    671030, 
    675730, 
    681030, 
    682570, 
    684990, 
    687430, 
    689040, 
    690600, 
    694530, 
    696660, 
    700160, 
    701650, 
    703630, 
    704300, 
    707970, 
    711620, 
    712990, 
    715610, 
    717620, 
    719530, 
    723290, 
    724600, 
    729100, 
    730690, 
    733150, 
    734400, 
    741340, 
    743430, 
    745630, 
    746780, 
    749610, 
    756420, 
    757860, 
    759970, 
    762740, 
    764840, 
    770460, 
    773020, 
    776870, 
    779900, 
    782260, 
    783630, 
    785260, 
    787470, 
    789330, 
    793280, 
    795040, 
    795960, 
    797960, 
    799660, 
    806680, 
    809290, 
    812360, 
    815630, 
    816910, 
    821730, 
    824600, 
    826450, 
    828780, 
    832050, 
    834770, 
    836410, 
    840560, 
    844070, 
    847410, 
    851450, 
    852530, 
    857010, 
    859900, 
    862090, 
    863530, 
    864960, 
    866940, 
    867920, 
    870400, 
    872830, 
    875530, 
    878670, 
    880690, 
    883380, 
    884620, 
    889680, 
    891380, 
    892770, 
    894240, 
    895900, 
    896490, 
    897590, 
    902710, 
    903860, 
    905990, 
    909180, 
    912860, 
    914580, 
    917020, 
    920420, 
    923570, 
    928030, 
    931910, 
    934710, 
    936910, 
    938670, 
    940470, 
    942920, 
    944310, 
    948820, 
    952460, 
    953500, 
    956090, 
    959320, 
    962300, 
    963470, 
    966730, 
    970160, 
    975000, 
    978350, 
    980270, 
    982700, 
    983690, 
    987690, 
    991960, 
    993530, 
    995850, 
    996820, 
    1000580, 
    1002630, 
    1005830, 
    1006940, 
    1010190, 
    1014110, 
    1017450, 
    1019210, 
    1023280, 
    1026540, 
    1029069, 
    1029490, 
    1033880, 
    1034810, 
    1036530, 
    1038050, 
    1039280, 
    1041000, 
    1043710
  ], 
  "text": [
    "Armando Fox: Methods should be short.", 
    "Yeah, they should.", 
    "But a straight line method that's really long is not really that hard to", 
    "test if there's not that many places where it interacts with other methods.", 
    "So, being short is certainly nice, but it doesn't make your testing life", 
    "quite as hellacious.", 
    "Same with sticking to one level of abstraction.", 
    "This makes your code harder to understand.", 
    "But what is it that makes code hard to test?", 
    "What makes code hard to test is when there's a lot of different ways it", 
    "could behave and you've got to have tests that cover all", 
    "the different behaviors.", 
    "I'm gonna argue for having few arguments.", 
    "Why is that?", 
    "Because if the arguments really all make a difference in how the code", 
    "behaves, then you're potentially talking about a lot of different", 
    "degrees of freedom behaviors.", 
    "Now, it could just be that the reason you have a lot of arguments is you're", 
    "computing a complicated formula.", 
    "And really, the arguments are just data inputs to that formula.", 
    "They're not controlling the flow of the program.", 
    "In that case, you might say, look, it's the same formula.", 
    "It doesn't matter where the arguments come from.", 
    "And I would probably say, yeah, you're right.", 
    "But if you've got that many, they should be pulled out", 
    "into their own class.", 
    "And you might be able to do some testing on that class separately and", 
    "put some of the helper methods in there.", 
    "But if you wrestled me to the floor-- which Dave actually can do--", 
    "you would probably end up getting credit for either of these.", 
    "Doing one thing, again, it depends on-- if it does a number of things,", 
    "but each individual thing is simple, it's probably not that bad to test.", 
    "But if it really has dependence on a lot of different arguments, that may", 
    "be a signal that the number of internal arguments is hard to test.", 
    "But again, I'm sure that whichever one of these I say is the right answer,", 
    "you could come up with a counter example where the other one is", 
    "actually more important.", 
    "So, I would say overall I'll give you credit for both, but I would have", 
    "picked the red one.", 
    "OK.", 
    "So let's start talking about method-level refactoring.", 
    "In the last segment there, I gave some examples of cool things that I did to", 
    "improve the code.", 
    "But again, I don't want to give you the impression that this is just sort", 
    "of ad hoc, right.", 
    "There is actually catalogs of specific things you can do, like this symptom,", 
    "you could do this transformation and it will make your code better.", 
    "And what does better mean?", 
    "It could mean that it eliminates a code smell.", 
    "It could mean that it improves one or more of your code metrics.", 
    "So, collectively those techniques are called refactoring.", 
    "And the idea with refactoring is your code works, but it has one or more", 
    "problems that you'd like to fix.", 
    "And through a series of very small steps, you'll transform it to a new", 
    "version of the code where those problems are absent, or at least that", 
    "they're improved on.", 
    "And at each step, you try to protect yourself with tests, right.", 
    "It doesn't mean that your test will always be passing.", 
    "Because if you're making changes to the code, if you have tests that rely", 
    "on specific structures of your code, they may temporally fail and you have", 
    "to fix them so that they correctly reflect the new", 
    "structure of your code.", 
    "But you're at least trying to minimize the time during which that occurs.", 
    "So this idea has sort of been around since the beginning of software", 
    "engineering.", 
    "But Martin Fowler gets a lot of credit for developing one of the most", 
    "definitive catalogs of refactorings.", 
    "And his original book is just called Refactoring.", 
    "I believe the examples are either Java or C++.", 
    "But since then, there's kind of been editions of the book that have been", 
    "tailored to every different language.", 
    "And the Ruby addition is quite good.", 
    "In his book, the refactorings are very systematically laid out.", 
    "So, there's a template.", 
    "For each refactoring has a name, a summary of what that refactoring does", 
    "and when it might be appropriate to use it, what problem it solves.", 
    "Is there some code smell that it solves?", 
    "Does it help you with breaking up a herd of arguments that", 
    "travels around together?", 
    "There's a step by step mechanical recipe that is so concrete you could", 
    "almost imagine a machine being able to follow it.", 
    "And usually there's one or two examples of showing it on a", 
    "real piece of code.", 
    "I strongly, strongly, strongly recommend perusing the Refactoring", 
    "Ruby addition book.", 
    "There is, I think, something like 60 or 70 refactorings that he identifies.", 
    "Some are at the level of individual methods.", 
    "Some are at the level of classes.", 
    "And some are at the level of modules, right, collections of classes that the", 
    "work together.", 
    "So, to give a concrete example of this, let's talk about how we would", 
    "refactor that bad method that we started making fun of at the beginning", 
    "of lecture.", 
    "The first thing somebody pointed out is that there were", 
    "stupid variable names.", 
    "OK.", 
    "Well, that's easy enough to fix.", 
    "We can change d and y to days and years.", 
    "That's not too bad.", 
    "We don't even have to show that example.", 
    "But what else can we do?", 
    "We could extract a method.", 
    "What does that mean?", 
    "That's an example similar to the one that I walked", 
    "through from my own code.", 
    "In the version that we made fun of there was some", 
    "complicated logic in here.", 
    "This is the nested if statements that somebody was upset about.", 
    "Rightly so.", 
    "A small improvement we could make, we still have a nested if, but we could", 
    "pull out the method that was doing this calculation.", 
    "All I've done is basically move some code from the original method into its", 
    "own method.", 
    "And I gave it a descriptive name.", 
    "By the way, what does this code actually do?", 
    "Let me give you a preview.", 
    "What this code is trying to do is figure out, given a particular", 
    "starting year and some number of days that have elapsed, right, since", 
    "January 1 of that year, what year is it now?", 
    "So, if the original year was 1980 and 400 days have gone by, the current", 
    "year must be 1981.", 
    "That's what it does.", 
    "The reason I'm picking on this method is that this is a slightly simplified", 
    "example of a method that brought all of the Microsoft Zunes to their knees", 
    "at the end of 2008.", 
    "But more on that in a moment.", 
    "OK.", 
    "So the first thing I've done is extract method.", 
    "This is actually one of the most commonly used refactorings.", 
    "And Fowler calls it extract method.", 
    "So that's what we're gonna call it.", 
    "And it's just what it says.", 
    "You take a piece of code that was originally inline as part of some", 
    "other method, you give it a descriptive name, you move it into its", 
    "own method, and you pass in any arguments that it would have needed to", 
    "get its work done.", 
    "Pretty straightforward, right.", 
    "There's other room for improvement here as well, which if you read the", 
    "book example it goes into more detail on.", 
    "Even after we do the refactorings that we're going to talk about here, you", 
    "could do even more.", 
    "But that's the basic idea behind extracting a method.", 
    "What else can we do?", 
    "We can also encapsulate this thing in its own class, right.", 
    "So what would that mean?", 
    "Well, in our original method, we're passing in a day, and we're hard", 
    "coding whatever the start year is.", 
    "You get the sense that this is a responsibility that could be separated", 
    "out into its own class.", 
    "For example, I could create a class which has a legitimate name, right.", 
    "I could improve the name.", 
    "And, I can start tracking the state of this class through instance variables.", 
    "Why is this a nicer thing to do?", 
    "Well, if I don't do that, look what I already had to do here.", 
    "When I extracted this really simple method-- remember, I pulled out the", 
    "leap year code into its own method.", 
    "This is kind of ugly--", 
    "I had to pass it the year.", 
    "Why is that ugly?", 
    "Because during the entire execution of this function, the value of year is", 
    "not gonna change.", 
    "It's a constant, right.", 
    "In fact, I declare it as a constant in my original method.", 
    "So it seems kind of bogus that this helper method should have to", 
    "explicitly be passed this argument.", 
    "Why does it have to explicitly be passed it?", 
    "Because right now, this new method that I defined and my original one,", 
    "they don't share any state.", 
    "They're completely separate from each other.", 
    "So, once you identify that actually these methods ought to be sharing some", 
    "state, the idea of what the start here is-- and I'm sort of peeling years off", 
    "of a calendar to count what year we're into now--", 
    "that is state associated with doing the calculation.", 
    "And whenever you have state associated with the calculation that says, a-ha,", 
    "I could have a class whose instance variables capture that state.", 
    "And now all of the methods in that class have access to them.", 
    "So once I encapsulate in a class, I can set up the days in the year inside", 
    "this initializer method.", 
    "And now, I no longer have to pass it explicitly leap year because it can", 
    "just talk to the instance variable, right.", 
    "So again, the goal is not just that I remove the argument.", 
    "It's that I removed an argument they didn't have to be there", 
    "in the first place.", 
    "It makes all the sense in the world that convert and leap_year should be", 
    "able to share that state.", 
    "And yet, it was hard for us to do so.", 
    "We had to explicitly pass it in as an argument even though they're sort of", 
    "cooperating on solving one problem, right.", 
    "So encapsulating it in a class lets us do that.", 
    "By the way, another thing it let's us do as a preview is remember, we always", 
    "talk about when you want to enhance testability, one thing you want is you", 
    "want seams, places where you can change the behavior of your code at", 
    "testing time so that you can do some tests but without having to change the", 
    "source code to support that.", 
    "Here you can immediately see that if we created a date calculator, we can", 
    "play around with different values for the starting year to make our", 
    "debugging simpler.", 
    "Whereas in the original version, this is sort of hidden as a magic constant", 
    "that's a local variable, right.", 
    "There's no effective way to stub this out.", 
    "If we wanted to ask the question, does this work equally correctly if the", 
    "starting year was 2008 instead of 1980, there's no way for us to test", 
    "that without changing the source code, right.", 
    "In this version, there is.", 
    "We could create the object, and we could change the value of this", 
    "instance variable.", 
    "Now some of you who are astute--", 
    "that's all of you--", 
    "might be saying, wait a minute.", 
    "Wouldn't you have to have something like attr_accessor or attr_writer in", 
    "order to make that instance variable accessible to the outside world so", 
    "that you could stub it?", 
    "The answer is, yes, but.", 
    "Yes, if the goal is to make that variable available to other places in", 
    "your actual app.", 
    "But, if your only goal is to test it, you can cheat.", 
    "And I'll show you how in a moment.", 
    "OK.", 
    "So we can extract methods.", 
    "We can extract a class so that now we encapsulate the state in one place", 
    "that everybody can share it.", 
    "We can also start writing tests for the extracted methods.", 
    "If we're breaking down the methods into little pieces, each individual", 
    "little piece shouldn't be too hard test.", 
    "And I have some examples of specs that would do this.", 
    "We'll even run them.", 
    "By the way, here's my cheat.", 
    "Everybody see what I did there?", 
    "In my original class, I didn't define attr_accessor for either of the", 
    "instance variables.", 
    "That would make it difficult to test.", 
    "But if I don't want to expose those things to other classes, I shouldn't", 
    "put in attr_accessor just to make testing easier, right.", 
    "I don't want to put things in the code that make testing easier but they do", 
    "so at the expense of modularity in my actual code where it matters the most.", 
    "So instead, using Ruby's dynamic language features, I cheat.", 
    "I send the DateCalculator class the attr_accessor message, and I do it", 
    "inside of a test case.", 
    "So just for the purposes of the test cases in this describe block, I can", 
    "now behave as if I had attr_accessor in my class.", 
    "That's pretty cool.", 
    "That's a good kind of cheating, not to be confused with the other kind which", 
    "we punish severely.", 
    "OK.", 
    "But, now you can see I can write some pretty straightforward tests for", 
    "things like if there's not enough days left, it shouldn't try", 
    "to peel off a year.", 
    "If there's at least one day left as you try to peel off a year, I left", 
    "this one as pending because I want to have a dramatic reveal here.", 
    "So, I wrote some basic tests.", 
    "And this is all on Pastebin, so you can read the tests that I wrote.", 
    "They're pretty straightforward.", 
    "The leap year calculator just make sure that it knows the convoluted", 
    "rules for leap year calculation.", 
    "I assume you all know this.", 
    "Leap years occur every four years, but not on centuries, but", 
    "yes if it's 400 years.", 
    "Everybody knew that, right?", 
    "No, you didn't?", 
    "OK.", 
    "But, I left a couple of these off because as it turns out--", 
    "let's remove this pending--", 
    "as it turns out, the original version of our code actually has a bug in it.", 
    "When I was testing that if there is exactly a years worth of days left, it", 
    "should be OK to peel off a leap year--", 
    "where's that test case in here?", 
    "There it is.", 
    "So I set the starting year to 2008.", 
    "I try to see what happens if it's 2008 and 366 days have passed.", 
    "And my expectation says that when I call add_leap_year, it should change", 
    "the year variable by one.", 
    "In other words, there's 366 days left.", 
    "2008 is a leap year, so that's fine, right.", 
    "Subtract that many days.", 
    "Yet this failed.", 
    "The more dramatic result is, suppose before I make that test", 
    "green, I get greedy.", 
    "Here's my high-level test that actually tests a complete call to the", 
    "date converter function.", 
    "And I'll take out the pending now and I'll try to run this.", 
    "So the same thing.", 
    "I'm setting the start year this time to 1980.", 
    "I'm setting the number of days to 366.", 
    "So this should be fine, right.", 
    "This should be a legal combination of values.", 
    "And what happens when I take out that pending?", 
    "Here's my red test.", 
    "Where's the result of my unit test down here?", 
    "It should handle starting in a leap year?", 
    "Anybody?", 
    "Why am I not getting a result?", 
    "Why should I be very worried?", 
    "I was in an infinite loop, kids.", 
    "Let's get the actual code.", 
    "If you spend a little time with the debugger--", 
    "and the book has a nice walkthrough, and that screencast", 
    "also talks about it--", 
    "you would find that this is problematic.", 
    "OK.", 
    "So what's the good news?", 
    "My code isn't in an infinite loop anymore.", 
    "At least now I have something I can fix.", 
    "But the infinite loop problem really happened.", 
    "It happened for Zunes, which were released in 2008 on December 31.", 
    "And if you tried to boot them up on that day, they would brick.", 
    "And the only official solution posted by Microsoft was when you wake up on", 
    "the morning of January 1, then do it.", 
    "Because at that point, the piece of code that has the infinite loop would", 
    "be avoided, right.", 
    "The code reads from a real-time clock.", 
    "So there was nothing you could do except wait for the real-time clock to", 
    "roll over to 2009.", 
    "So it's a dramatic example of a bug, but the code here is really just the", 
    "stylization of the real bug that happened.", 
    "And this is on Wikipedia.", 
    "It's a pretty interesting story.", 
    "But what's the moral of the story here?", 
    "The moral of the story is we made the DateCalculator easier to read because", 
    "we extracted helper methods and gave them descriptive names.", 
    "Because they were short, they were also testable on their own.", 
    "We used a few simple refactorings, like extract class and encapsulate", 
    "class, in order to do that.", 
    "We also cheated, and we used that fake injecting attr_accessor so we could", 
    "actually mock those things and stub them in tests, which wouldn't have", 
    "been allowed by our code.", 
    "We found a bug.", 
    "And we might observe that if we developed this method using the same", 
    "test that we wrote after the fact, we might have found it earlier, right.", 
    "But who really knows.", 
    "One question is, we said the goal of refactoring or a goal of factoring is", 
    "fixing problems with the structure of your code, and besides the fact that", 
    "we helped out with these code smells, a question is, did we improve our", 
    "score on flog, our complexity score, and does reek still find the smell it", 
    "found before?", 
    "So we can run the same tools on the new version of the code that we ran on", 
    "the original version of the code.", 
    "Look at that.", 
    "This is the line I want you to pay attention to.", 
    "Zero warnings.", 
    "Reek has nothing to complain about anymore on the new", 
    "version of the code.", 
    "Now again, you don't want to get hung up on metrics, right.", 
    "Reek is not the be all and end all of good code.", 
    "But it's significant that in the original version, which wasn't that", 
    "much longer in terms of how many lines, it complained about like six", 
    "things, right, six different smells.", 
    "And what if we flog the new code?", 
    "Not too bad, right.", 
    "Now we're below 20 on all of the-- oh, sorry, that's the spec.", 
    "Why don't we do--", 
    "thought that was a little too good to be true.", 
    "One warning.", 
    "No descriptive comment in my class name.", 
    "OK, fine.", 
    "Guilty, right.", 
    "Still pretty good compared to the six or seven warnings we had before.", 
    "And flog--", 
    "remember before-- flog was up at 23?", 
    "So now each individual method's flog score is way lower, right.", 
    "So, this is the total across all methods summing them up.", 
    "And this is the average per method.", 
    "So again, you don't want to get hung up on quantitative metrics.", 
    "But it's encouraging that at the same time that we eliminated some", 
    "qualitative complaints, right, design smells and code smells that reek was", 
    "complaining about, we also managed to improve the quantitative scores on one", 
    "of the more widely accepted complexity measures.", 
    "Like I said, there's a long, long, long list of design smells.", 
    "Some of them have very amusing names.", 
    "Some of them have names that are pretty obvious, like", 
    "large class or method.", 
    "Some of them have funny names like shotgun surgery or", 
    "inappropriate intimacy.", 
    "It's worth perusing through Fowler's book Refactoring to see what these", 
    "mean because they do have kind of whimsical names but they actually are", 
    "pointing out real things.", 
    "For example, remember when we talked about mock train wrecks?", 
    "When you have mock this and then this thing mocks something that it calls", 
    "and it has to mock something that it calls, that's what Fowler calls", 
    "inappropriate intimacy, right.", 
    "The question is, what is this class doing with knowledge of a class that's", 
    "like three ancestors or three siblings away, right?", 
    "Why do you have a.b.c.d when a, b, c and d are all in different classes?", 
    "That's an example of inappropriate intimacy. a knows way more about d", 
    "then it really has any business knowing.", 
    "And that's why you find yourself having to do a mock every step of the", 
    "way, right.", 
    "So, for each one of these, he's got some examples of how it occurs in code", 
    "and a specific mechanical technique for fixing your code to fix that one", 
    "specific problem.", 
    "And you can see why in lecture we can only do a couple of", 
    "simple examples of these.", 
    "But, this is like a good summer's worth of reading by itself.", 
    "And yes, I did read it over the summer.", 
    "So the ones that we used in our simple example, we decomposed a", 
    "conditional, right.", 
    "We took that nested if statement and we actually broke it up so that the", 
    "original top-level method doesn't have a nested if in its final version.", 
    "We did extract method to pull some of the helper methods out into their own", 
    "shorter methods.", 
    "And we also extracted a class so that we could encapsulate the state that", 
    "goes with this computation and allow all of those helper methods to access", 
    "it without having to sort of pass it back and forth all the time.", 
    "OK.", 
    "So, which of these would you say is not a main goal of method-level", 
    "refactoring?", 
    "To reduce the code complexity?", 
    "To get rid of code smells?", 
    "To get rid of bugs?", 
    "Or to improve testability?", 
    "Which is not a primary goal of method-level refactoring?"
  ]
}