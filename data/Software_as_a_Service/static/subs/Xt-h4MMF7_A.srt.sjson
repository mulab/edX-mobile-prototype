{
  "start": [
    340, 
    2950, 
    3690, 
    6360, 
    8510, 
    10310, 
    17810, 
    21690, 
    27050, 
    30230, 
    31890, 
    34630, 
    36190, 
    39270, 
    40980, 
    42590, 
    45890, 
    48950, 
    52390, 
    56010, 
    57340, 
    60290, 
    62360, 
    64099, 
    68310, 
    73900, 
    76260, 
    78010, 
    80260, 
    80950, 
    83860, 
    87310, 
    89260, 
    93030, 
    93810, 
    98500, 
    102080, 
    106690, 
    110440, 
    113020, 
    116360, 
    119720, 
    121080, 
    123980, 
    126960, 
    128639, 
    130419, 
    131860, 
    132760, 
    136380, 
    140140, 
    141200, 
    143990, 
    148330, 
    149060, 
    151770, 
    155140, 
    156960, 
    161520, 
    165480, 
    168680, 
    171840, 
    173810, 
    177040, 
    180850, 
    182230, 
    185180, 
    186602, 
    189280, 
    191300, 
    194500, 
    195730, 
    199070, 
    202830, 
    203850, 
    206930, 
    210500, 
    213640, 
    214750, 
    218400, 
    222830, 
    225190, 
    227240, 
    229890, 
    232915, 
    234470, 
    235590, 
    236950, 
    239980, 
    242930, 
    246050, 
    249580, 
    251090, 
    254460, 
    258950, 
    261470, 
    263320, 
    264400, 
    268680, 
    272280, 
    275300, 
    279340, 
    283480, 
    287550, 
    290880, 
    293310, 
    296530, 
    297660, 
    299630, 
    302700, 
    306040, 
    306970, 
    309210, 
    311960, 
    313130, 
    316490, 
    321010, 
    324670, 
    327240, 
    329770, 
    332800, 
    334240, 
    338180, 
    339850, 
    341490, 
    345990, 
    350260, 
    354110, 
    355090, 
    357640, 
    360510, 
    363180, 
    367500, 
    370190, 
    373430, 
    377930, 
    380220, 
    382600, 
    385950, 
    388340, 
    391940, 
    394740, 
    396520, 
    400630, 
    403900, 
    406070, 
    409880, 
    411160, 
    415390, 
    419710, 
    422420, 
    425560, 
    428010, 
    428930, 
    431810, 
    435600, 
    437910, 
    441470, 
    443210, 
    446850, 
    450120, 
    453530, 
    457120, 
    457740, 
    462070, 
    465150, 
    468490, 
    472720, 
    474930, 
    480350, 
    484120, 
    487070, 
    489460, 
    492940, 
    494790, 
    498820, 
    501920, 
    502730, 
    505880, 
    509990, 
    512669, 
    515020, 
    517830, 
    520370, 
    523539, 
    527750, 
    530010, 
    531030, 
    535110, 
    537080, 
    539610, 
    541870, 
    546240, 
    548880, 
    552440, 
    555690, 
    559480, 
    560600, 
    563140, 
    566920, 
    569130, 
    571130, 
    572310, 
    576350, 
    577550, 
    580000, 
    582820, 
    585410, 
    587800, 
    590460, 
    592340, 
    594130, 
    597660, 
    601930, 
    605110, 
    607830, 
    610530, 
    611940, 
    615710, 
    618590, 
    622000, 
    625390, 
    629770, 
    633270, 
    635170, 
    636790, 
    640630, 
    644380, 
    645260, 
    648670, 
    652930, 
    655350, 
    657230, 
    661130, 
    664680, 
    665850, 
    669230, 
    671550, 
    673220, 
    676360, 
    678720, 
    681260, 
    684370, 
    687550, 
    691380, 
    692750, 
    695620, 
    701180, 
    704250, 
    707290, 
    711800, 
    715740, 
    717350, 
    720970, 
    722280, 
    725350, 
    728000, 
    730090, 
    734780, 
    737710, 
    741540, 
    744540, 
    748550, 
    752010, 
    754290, 
    758030, 
    761560, 
    762580, 
    765500, 
    769830, 
    773250, 
    777130, 
    777970, 
    781230, 
    785250, 
    787730, 
    789100, 
    791120, 
    794940, 
    796770, 
    798880, 
    800130, 
    803200, 
    806280, 
    810580, 
    814970, 
    815920, 
    818390, 
    819580, 
    823690, 
    825390, 
    828330, 
    831760, 
    835350, 
    839390, 
    843970, 
    847530, 
    848800, 
    850060, 
    854170, 
    857370, 
    860950, 
    864710, 
    867550, 
    870780, 
    872060, 
    873400, 
    877230, 
    880490, 
    885010, 
    886320, 
    890410, 
    894890, 
    897940, 
    899300, 
    901610, 
    905070, 
    908930, 
    912330, 
    916420, 
    917210, 
    921230, 
    923660, 
    925640, 
    926730, 
    928450, 
    932250, 
    936110, 
    938890, 
    940800, 
    941840, 
    946400, 
    950410, 
    952690, 
    955890, 
    959550, 
    960670, 
    964060, 
    965190, 
    969890, 
    970630, 
    974020, 
    977760, 
    980000, 
    981440, 
    985100, 
    987820, 
    991670, 
    993210, 
    995500, 
    1000560, 
    1002560, 
    1004780
  ], 
  "end": [
    2950, 
    3690, 
    6360, 
    8510, 
    10310, 
    17810, 
    21690, 
    27050, 
    30230, 
    31890, 
    34630, 
    36190, 
    39270, 
    40980, 
    42590, 
    45890, 
    48950, 
    52390, 
    56010, 
    57340, 
    60290, 
    62360, 
    64099, 
    68310, 
    73900, 
    76260, 
    78010, 
    80260, 
    80950, 
    83860, 
    87310, 
    89260, 
    93030, 
    93810, 
    98500, 
    102080, 
    106690, 
    110440, 
    113020, 
    116360, 
    119720, 
    121080, 
    123980, 
    126960, 
    128639, 
    130419, 
    131860, 
    132760, 
    136380, 
    140140, 
    141200, 
    143990, 
    148330, 
    149060, 
    151770, 
    155140, 
    156960, 
    161520, 
    165480, 
    168680, 
    171840, 
    173810, 
    177040, 
    180850, 
    182230, 
    185180, 
    186602, 
    189280, 
    191300, 
    194500, 
    195730, 
    199070, 
    202830, 
    203850, 
    206930, 
    210500, 
    213640, 
    214750, 
    218400, 
    222830, 
    225190, 
    227240, 
    229890, 
    232915, 
    234470, 
    235590, 
    236950, 
    239980, 
    242930, 
    246050, 
    249580, 
    251090, 
    254460, 
    258950, 
    261470, 
    263320, 
    264400, 
    268680, 
    272280, 
    275300, 
    279340, 
    283480, 
    287550, 
    290880, 
    293310, 
    296530, 
    297660, 
    299630, 
    302700, 
    306040, 
    306970, 
    309210, 
    311960, 
    313130, 
    316490, 
    321010, 
    324670, 
    327240, 
    329770, 
    332800, 
    334240, 
    338180, 
    339850, 
    341490, 
    345990, 
    350260, 
    354110, 
    355090, 
    357640, 
    360510, 
    363180, 
    367500, 
    370190, 
    373430, 
    377930, 
    380220, 
    382600, 
    385950, 
    388340, 
    391940, 
    394740, 
    396520, 
    400630, 
    403900, 
    406070, 
    409880, 
    411160, 
    415390, 
    416940, 
    422420, 
    425560, 
    428010, 
    428930, 
    431810, 
    435600, 
    437910, 
    441470, 
    443210, 
    446850, 
    450120, 
    453530, 
    457120, 
    457740, 
    462070, 
    465150, 
    468490, 
    472720, 
    474930, 
    480350, 
    484120, 
    487070, 
    489460, 
    492940, 
    494790, 
    498820, 
    501920, 
    502730, 
    505880, 
    509990, 
    512669, 
    515020, 
    517830, 
    520370, 
    523539, 
    527750, 
    530010, 
    531030, 
    535110, 
    537080, 
    539610, 
    541870, 
    546240, 
    548880, 
    552440, 
    555690, 
    559480, 
    560600, 
    563140, 
    566920, 
    569130, 
    571130, 
    572310, 
    576350, 
    577550, 
    580000, 
    582820, 
    585410, 
    587800, 
    590460, 
    592340, 
    594130, 
    597660, 
    601930, 
    605110, 
    607830, 
    610530, 
    611940, 
    615710, 
    618590, 
    622000, 
    625390, 
    629770, 
    633270, 
    635170, 
    636790, 
    640630, 
    644380, 
    645260, 
    648670, 
    652930, 
    655350, 
    657230, 
    661130, 
    664680, 
    665850, 
    669230, 
    671550, 
    673220, 
    676360, 
    678720, 
    681260, 
    684370, 
    687550, 
    691380, 
    692750, 
    695620, 
    701180, 
    704250, 
    707290, 
    711800, 
    715740, 
    717350, 
    720970, 
    722280, 
    725350, 
    728000, 
    730090, 
    734780, 
    737710, 
    741540, 
    744540, 
    748550, 
    752010, 
    754290, 
    758030, 
    761560, 
    762580, 
    765500, 
    769830, 
    773250, 
    777130, 
    777970, 
    781230, 
    785250, 
    787730, 
    789100, 
    791120, 
    794940, 
    796770, 
    798880, 
    800130, 
    803200, 
    806280, 
    810580, 
    814970, 
    815920, 
    818390, 
    819580, 
    823690, 
    825390, 
    828330, 
    831760, 
    835350, 
    839390, 
    843970, 
    847530, 
    848800, 
    850060, 
    854170, 
    857370, 
    860950, 
    864710, 
    867550, 
    870780, 
    872060, 
    873400, 
    877230, 
    880490, 
    885010, 
    886320, 
    890410, 
    894890, 
    897940, 
    899300, 
    901610, 
    905070, 
    908930, 
    912330, 
    916420, 
    917210, 
    921230, 
    923660, 
    925640, 
    926730, 
    928450, 
    932250, 
    936110, 
    938890, 
    940800, 
    941840, 
    946400, 
    950410, 
    952690, 
    955890, 
    959550, 
    960670, 
    964060, 
    965190, 
    969890, 
    970630, 
    974020, 
    977760, 
    980000, 
    981440, 
    985100, 
    987820, 
    991670, 
    993210, 
    995500, 
    1000560, 
    1002560, 
    1004780, 
    1006690
  ], 
  "text": [
    "ARMANDO FOX: So, let's actually talk it through by looking back at the", 
    "example code.", 
    "We can actually identify which of these things are going on.", 
    "We'll use the validation as an example, although we", 
    "could really use either.", 
    "Well, certainly, in terms of higher-order functions, we have a", 
    "method that we're defining in place.", 
    "In this case, we passed a symbol to the unless clause.", 
    "However, passing a symbol to unless--", 
    "I guess I don't have an example of that here--", 
    "passing a symbol to unless is really just a shortcut for defining a", 
    "function in place.", 
    "So, as a matter of fact, we are using higher-order functions.", 
    "We're passing functions to other functions.", 
    "Because what is validates?", 
    "Well, validates is just a method call that is going to do something later on", 
    "when it gets called at model validation time.", 
    "And at that point, one of the things that we can do is we can pass it the", 
    "name or the definition of a method that's going to perform a custom", 
    "validation.", 
    "And of course, that's also an example of meta-programming, because we're", 
    "defining code on the fly.", 
    "What about closures?", 
    "Well, remember that the distinguishing characteristic of a closure is that it", 
    "allows you to use symbols in a context in which they're defined, even if it's", 
    "going to be run later on.", 
    "And we're actually--", 
    "meta-programming, higher-order functions, and enclosures tend to go", 
    "hand in hand.", 
    "And if you pass a function to something, it's really a lot more", 
    "useful if the function you're passing is able to reference symbols that were", 
    "alive at the time that you defined it.", 
    "So this would have been a better example, if I just put inline lambda", 
    "right here.", 
    "But as a matter of fact, the idea that you can pass functions around, call", 
    "them, and expect them to have access to all the symbols they would have had", 
    "access to at the point of definition suggests that higher-order programming", 
    "and closures actually go hand in hand with this.", 
    "The truth is, all three are really pretty important.", 
    "But in one sense, it's a little bit of a trick question, because it's very", 
    "rare that you would see the use of higher-order functions without taking", 
    "advantage of closures.", 
    "It doesn't really make sense to pass a function if calling the function", 
    "doesn't guarantee that it'll be able to have access to all the state that", 
    "was available when it was defined.", 
    "So, blue is right.", 
    "Sorry, let me go back.", 
    "Sure, we can--", 
    "so the question is, can you crisply define a closure, because some people", 
    "who chose red instead of blue, if they know what a closure was, they might", 
    "have picked blue instead.", 
    "Sure, we'll take a little detour and we'll restart this in just a moment.", 
    "A closure is the environment that's visible at a particular", 
    "point in the code.", 
    "So for example, you look at some source line in the code and you ask,", 
    "when the program is executed, when I get to this line, what is the sum", 
    "total of all the state that I can see?", 
    "So for example, if there is variables that are defined in my local scope,", 
    "then all those variables that I can see would be part of the closure.", 
    "The idea is that you can put the thing in a bubble, and then sometime later", 
    "on, make a call into the bubble and expect that everything you could have", 
    "seen originally is still visible.", 
    "The reason it's called a closure is because if you're familiar with the", 
    "term \"transitive closure,\" like in mathematics, the idea is that there is", 
    "a set of things that you can see.", 
    "So for example, there's another function that I can call.", 
    "So let's say--", 
    "it would be better if I had an example of this, but since I don't have an", 
    "example ready, I'll try to talk through it.", 
    "Suppose that I am talking about the closure with respect to a", 
    "method that I defined.", 
    "One of the things that that method does is it calls some other method.", 
    "Well, that other method that it calls has its own idea of what's visible at", 
    "the moment of call.", 
    "So the closure has to actually include all of that stuff.", 
    "You have to keep expanding the bubble outward until you've captured every", 
    "possible thing that could have been referenced at the point where you make", 
    "your definition.", 
    "The reason a closure is such a powerful abstraction is that it lets", 
    "you define a function now and use it later, with the assurance that all of", 
    "the state that that function could have seen at the point of definition", 
    "is still available when you call it later on.", 
    "And it's somewhat tricky to get right from the programming language", 
    "implementers point of view, which is why it's such a highly prized thing", 
    "when the language actually has it.", 
    "That's what a closure is.", 
    "And by the way, you've been using them.", 
    "Remember when we saw--", 
    "when we used each to iterate over a collection?", 
    "You're calling each on some object, and then you've got a do block, and", 
    "inside that do block, you could refer to variables that are outside the", 
    "block of the each.", 
    "That's a simple example of a closure, because the block that you're passing", 
    "is a function, and the promise is, when that function is called to do", 
    "something on each element of the list, it can see everything that would have", 
    "been visible at that point, even things that are from", 
    "outside its own scope.", 
    "So you're closing around everything that it could have seen.", 
    "We're going to talk about a topic that we originally didn't know where to", 
    "put, but we decided to put it with the other topics about drying out your", 
    "app, because what's happened in the last few years is, we can dry out the", 
    "concept of signing in, of logging into an app and authenticating yourself.", 
    "Simply put, the various aspects of security that we're going to focus on", 
    "ask the question, who are you, and what are you doing here?", 
    "So these are actually two separate things although people tend to", 
    "conflate them, because most sites treat them as one and the same.", 
    "The first thing is, who are you?", 
    "And that's just authentication.", 
    "Basically, all that does is prove that you are who you say you are.", 
    "And typically it's because you have a secret password that you establish", 
    "when you signed up.", 
    "And presumably, nobody else knows that password.", 
    "So if you provided the password, it must really be you who is sitting at", 
    "the keyboard.", 
    "There's various ways to do this, but by far the most popular way these days", 
    "is some combination of public key and symmetric key cryptography.", 
    "So if you read about public key crypto, one way you can prove your", 
    "identity is if there's a matched pair of keys that have to be created", 
    "together, a public piece and a private piece.", 
    "And if you have information that was encrypted using one, it can only be", 
    "decrypted using the other.", 
    "So your ability to decrypt something is one way of proving who you are,", 
    "because it means that you are the holder of the", 
    "matching part of the key.", 
    "Another possibility of how you prove who you say you are is, you write down", 
    "a statement saying, I am Google.com, and you get that to be signed by", 
    "somebody who is trustworthy, somebody to whom you've gone to present some", 
    "sort of documentation.", 
    "So this is the equivalent of when you go to a notary and you have something", 
    "notarized, you have to present an ID, and then the notary signs off, saying", 
    "yes, this person proved that were who they said.", 
    "This is the equivalent, except that the proof takes the form of a document", 
    "with a cryptographic signature that anyone can verify.", 
    "So the idea is, I'm presenting this document signed by a trusted third", 
    "party, and the document attests that I really am who I said I was.", 
    "But this doesn't say anything about what you're allowed to do.", 
    "It only says that you can prove who you are.", 
    "Authorization, which is a different concept, is to prove that you're", 
    "allowed to do what it is you're asking to do.", 
    "And the most common example, probably, in everyday experience is, often", 
    "there's a lot of sites now that allow you to sign in with your Facebook", 
    "account or with your Twitter account.", 
    "And after you've already authenticated yourself by typing your Facebook or", 
    "Twitter password, there's often another step that says, this", 
    "application also wants the following permission.", 
    "It wants to post your wall, it wants to spam your friends, all the various", 
    "things that it wants to do.", 
    "And you have to separately decide, now that I've proven who I am, what am I", 
    "going to allow it to do on my behalf?", 
    "As we'll see, one of the ways that this is done is in addition to", 
    "authenticating yourself, there's another token that has a cryptographic", 
    "signature saying, here's the list of things that this", 
    "person's allowed to do.", 
    "If it's not on the list, I won't do it.", 
    "So in the old days of the web, the way you authenticated yourself to a site", 
    "is, every site had its own password.", 
    "Also at the same time, most of the sites didn't have a RESTful API like", 
    "what we've been talking about.", 
    "So you had to actually log in to the site in order to do anything.", 
    "And today, that isn't hugely appealing, because what we're seeing", 
    "is a lot of sites that derive their power from talking to other services.", 
    "So, for service-oriented architecture, there's really no concept of a user", 
    "logging in.", 
    "You need some other set of credentials that websites can exchange so that if", 
    "you want to authorize one site to work with another site on your behalf,", 
    "there isn't a separate interactive login step every this happens.", 
    "So the name of the user experience that has come to be current for this", 
    "is single-sign-on, or SSO.", 
    "The idea is, wouldn't it be nice if when I want to log in to the New York", 
    "Times with my Facebook account so that my friends can see what I'm reading, I", 
    "wouldn't have to separately sign in to both, if there's some way to connect", 
    "my identities on the two sites.", 
    "The pitfall with this is that you usually don't want one service to know", 
    "your other service's password.", 
    "So a simple example is, I might want to allow a certain services like", 
    "Facebook to have limited access to my bank balance so that I", 
    "can see what it is.", 
    "But I don't want to grant that service the password that would allow it to do", 
    "everything as me on that same account because I don't fully trust it.", 
    "So the way this is come to be solved is generally called third party", 
    "authentication, and the scheme is as follows.", 
    "There's one service that knows something about your identity.", 
    "It's often called an authentication provider.", 
    "Facebook is a classic example of one of these today.", 
    "What you'd like to do is use this service to authenticate yourself to", 
    "service B. So I don't want to set up a separate password on", 
    "the New York Times.", 
    "I want to use my existing identity, my existing profile on Facebook, as my", 
    "credentials to log in to this other site.", 
    "But I don't want the other site to know my Facebook", 
    "password, reasonably enough.", 
    "So usually service A is called an authentication provider, because it is", 
    "the place where you prove your identity.", 
    "Other sites will work with the authentication provider so that you", 
    "don't have to set up separate logins on each one.", 
    "And in practice today, there's other functions that the authentication", 
    "provider does.", 
    "For example, in the case of Twitter or Facebook, there's all these other", 
    "features that the apps have, like walls and posts and follows, that", 
    "aren't directly related to authentication.", 
    "So that's why I made a difference between authentication and", 
    "authorization.", 
    "In its purest form, services like OpenID or Kerberos really are only", 
    "about authentication.", 
    "In and of themselves, they don't provide any other services.", 
    "All they do is let you prove who you are, and then they allow other", 
    "services to leverage that proof and say, OK, you don't have to log in", 
    "again because you proven to Kerberos who you are.", 
    "So conceptually, how would this work?", 
    "The building block is something that we'll call a", 
    "tamper-evident secure token.", 
    "That's a very fancy way of saying that I can create, using well-known", 
    "cryptographic techniques, a string that has certain useful properties.", 
    "One property is that only I can decrypt that string.", 
    "Another is that I can detect if the string has been tampered with.", 
    "In other words, if someone has tried to change its contents before", 
    "passing on to me.", 
    "Another is that it's a string that no one else could have created without", 
    "knowing some secret that presumably is mine alone.", 
    "So I use my secret to create a tamper-evident string.", 
    "And the book has some information about ways that this is done.", 
    "Among other things, it caused the Turing award to be distributed.", 
    "Because practically solving this in the absence of a universally trusted", 
    "third party is hard.", 
    "And what do I put in that string?", 
    "Usually the string is just a handle that is going to be used by the SAS", 
    "application to retrieve information about me and let me manage my profile,", 
    "and so forth.", 
    "But the idea is that if the string is really tamper-evident, and if it's a", 
    "string that only I could have created, then upon receipt of the string, I", 
    "know that I can trust whoever provided it.", 
    "So how would this work with RottenPotatoes?", 
    "Well, I want to be able to log in to RottenPotatoes using, let's say, my", 
    "Twitter ID, but without revealing my Twitter password and credentials to", 
    "RottenPotatoes.", 
    "So the first step is, I actually hit the RottenPotatoes site.", 
    "And presumably there's a link somewhere that says, login with your", 
    "Twitter account.", 
    "The second step is the interesting one, where RottenPotatoes will use a", 
    "redirect-- remember, we've talked about redirects as a way of", 
    "temporarily sending us to a different URI--", 
    "and the redirect will actually send me over to Twitter's site.", 
    "And the redirect includes enough information that once I'm finished", 
    "authenticating myself on Twitter, I'll go back to a predetermined page at", 
    "RottenPotatoes.", 
    "So the reason this is an important piece of the transaction is because", 
    "now, Twitter asks me, is it OK that this app wants to connect with your", 
    "Twitter account so that you can log in to the app using your Twitter account?", 
    "At that point, I can say no, and everything is aborted.", 
    "But if I say yes, and I don't mind that the app is going to see my", 
    "personal info, this entire transaction and me typing in my password is", 
    "between me and Twitter.", 
    "So at this point, RottenPotatoes has not seen any of the interaction that I", 
    "have with Twitter.", 
    "Now that I've approved it, Twitter gives me another redirect back to", 
    "RottenPotatoes, and includes this access token.", 
    "Remember what we said about the access token.", 
    "First of all, it's tamper-evident, so if RottenPotatoes tries to muck with", 
    "the access token, it'll be rendered invalid.", 
    "Only Twitter could have created it, and it encodes the fact that I have", 
    "given Twitter permission to connect with this app.", 
    "So it's basically a tamper-evident capability that tells RottenPotatoes,", 
    "that in the future, when you, RottenPotatoes, want to post things to", 
    "my Twitter feed, present this token.", 
    "And because the token could only have been created by me authorizing this", 
    "transaction using my password, the token is trustworthy.", 
    "Make sense?", 
    "So third party authentication is an extremely powerful concept, because", 
    "I've now empowered these two applications to talk together.", 
    "I can allow RottenPotatoes to do things, limited things on Twitter, on", 
    "behalf of me, without each one of those things requiring me to log in", 
    "interactively.", 
    "It can now do these things in a service-oriented architecture.", 
    "So basically, presenting the token proves that at some point, the user", 
    "said this was OK, because that's the only way the token", 
    "could have been created.", 
    "That's the basic idea.", 
    "Now, if you're the person authoring this application, what do you actually", 
    "have to do?", 
    "Well, you have to keep in mind-- you have to keep this", 
    "information around somewhere.", 
    "You have to keep track of whether somebody has logged in or not.", 
    "And presumably, you've got to hold on to that magic token, because any time", 
    "you want to communicate with Twitter to post something on Armando's Twitter", 
    "feed, you have to present this token as proof that Armando authorized you", 
    "to do that.", 
    "So the way that this is typically done is, you model the", 
    "session as its own entity.", 
    "That means you create a model that models the idea that I have logged in", 
    "and given permissions to another app.", 
    "This is why the concept of a session is actually useful.", 
    "You have a controller for that session that deletes and creates the sessions.", 
    "It handles all of the interaction between RottenPotatoes and Twitter.", 
    "And the examples in the book and in the screencast use a very, very nice", 
    "gem called OmniAuth that really abstracts all of this away from you.", 
    "Once the user is authenticated, OmniAuth will receive a call back and", 
    "say, here is the magic token.", 
    "Don't lose this.", 
    "And any time in the future that you want to negotiate with that service on", 
    "behalf of this user, this is the token you need to provide, and this is the", 
    "user's ID on that service.", 
    "There's my notion in RottenPotatoes that maybe moviegoers have a primary", 
    "key, but if I'm interacting with another service like Twitter for", 
    "authentication, Twitter also has a notion of the unique ID", 
    "representing some user.", 
    "So I have to remember that.", 
    "As the application writer, whenever I want to do something with the auth", 
    "provider, I have to present, here's the user ID on whose behalf I want to", 
    "post, and here is a magic token, that you must have created, that proves", 
    "that I'm authorized to do that.", 
    "So you make your RESTful API calls and you use that information.", 
    "OmniAuth is really awesome for this because the concept of the flow that I", 
    "just showed on the previous slide, where there's a three-way handshake,", 
    "is completely abstracted away.", 
    "And there's a strategy for virtually every provider.", 
    "So if you want to be able to let your users log in with Google, log in with", 
    "Twitter, log in with Facebook, login with CalNet, all of those are OmniAuth", 
    "strategies, and you almost don't have to touch it.", 
    "It's worth going through the example that's in the book and the screencast", 
    "about this.", 
    "And since I wasn't able to show a code demo, I will make available a version", 
    "of RottenPotatoes that actually has this code built into it, so you can", 
    "see how this is implemented in real life.", 
    "It's like 20 lines.", 
    "It's actually very simple to do.", 
    "And in fact, these days, for all the projects that you all are going to be", 
    "building, I would say don't even bother to do your own authentication.", 
    "Use authentication for an external third party.", 
    "And if you want to have password-based authentication,", 
    "OmniAuth does that too.", 
    "But the way the world is going seems to be third party authentication.", 
    "Conceptually, we can ask, which of these is true regarding the third", 
    "party authentication flow?", 
    "One possibility is that now that I've completed the flow, I've given", 
    "approval to Twitter, so now the requester can do anything that I could", 
    "have done on the auth provider.", 
    "So RottenPotatoes can now do anything on Twitter that I myself could do", 
    "interactively.", 
    "Or, the green answer, if my credentials on the requester are", 
    "compromised--", 
    "in other words, if somebody compromises RottenPotatoes and gets", 
    "that secret token, then I should worry about my credentials at Twitter, that", 
    "it's time to change my password there.", 
    "Is that a true statement?", 
    "The third one, if the provider revokes access-- in other words, if I go to", 
    "Twitter and say, no, I want to disconnect this application--", 
    "then the requester, the application RottenPotatoes, no longer has any of", 
    "my information.", 
    "It no longer knows anything about me.", 
    "And the fourth one, that if I do grant access, it can be time-limited so that", 
    "it expires on a preset date.", 
    "So, one of these statements is true.", 
    "And three of them are not."
  ]
}