{
  "start": [
    650, 
    2830, 
    3250, 
    8560, 
    10690, 
    12130, 
    13680, 
    16500, 
    20730, 
    23390, 
    24970, 
    28480, 
    31880, 
    33360, 
    35700, 
    37890, 
    39500, 
    41340, 
    42670, 
    43180, 
    44640, 
    45760, 
    47810, 
    51130, 
    54340, 
    55830, 
    57850, 
    59450, 
    62750, 
    66770, 
    67450, 
    70210, 
    73120, 
    74870, 
    78420, 
    82790, 
    84630, 
    88140, 
    91740, 
    94100, 
    95790, 
    98670, 
    99780, 
    102860, 
    103530, 
    104370, 
    106230, 
    108090, 
    110110, 
    112070, 
    114780, 
    116170, 
    119430, 
    123420, 
    126130, 
    127170, 
    130050, 
    133810, 
    134770, 
    138480, 
    144500, 
    146680, 
    150190, 
    151850, 
    154860, 
    158010, 
    158940, 
    163520, 
    166888, 
    171190, 
    173360, 
    175410, 
    179620, 
    182660, 
    185080, 
    185980, 
    187690, 
    192830, 
    195700, 
    196810, 
    200600, 
    204350, 
    206700, 
    210060, 
    212610, 
    217410, 
    220090, 
    221510, 
    224160, 
    227150, 
    230890, 
    231150, 
    232900, 
    234330, 
    237530, 
    239740, 
    243080, 
    245110, 
    247110, 
    251530, 
    256410, 
    257910, 
    259829, 
    261600, 
    264030, 
    266820, 
    269020, 
    272750, 
    274820, 
    276220, 
    277630, 
    281340, 
    285300, 
    286420, 
    290950, 
    294830, 
    296690, 
    298090, 
    302250, 
    304920, 
    307740, 
    312450, 
    314370, 
    318310, 
    321670, 
    324500, 
    327070, 
    332180, 
    333380, 
    339630, 
    341420, 
    343700, 
    345170, 
    348380, 
    350510, 
    359380, 
    365110, 
    367250, 
    368160, 
    369840, 
    370370, 
    372190, 
    375530, 
    379570, 
    380640, 
    386030, 
    389980, 
    394900, 
    397390, 
    399260, 
    403140, 
    408400, 
    412890, 
    416810, 
    421640, 
    423370, 
    426840, 
    430770, 
    432090, 
    437780, 
    444690, 
    449490, 
    451100, 
    456030, 
    457210, 
    459240, 
    464590, 
    466330, 
    469010, 
    476930, 
    483380, 
    487410, 
    490260, 
    494270, 
    499110, 
    502670, 
    505480, 
    509020, 
    512260, 
    516240, 
    518789, 
    522360, 
    524090, 
    528020, 
    530200, 
    534660, 
    537220, 
    540500, 
    542290, 
    545730, 
    547370, 
    550900, 
    553950, 
    554860, 
    556770, 
    559380, 
    563210, 
    566830, 
    570360, 
    572010, 
    574520, 
    575910, 
    577530, 
    580990, 
    582450, 
    585460, 
    588630, 
    590770, 
    593420, 
    595970, 
    596870, 
    599090, 
    600250, 
    602010, 
    604810, 
    609470, 
    612010, 
    615350, 
    617330
  ], 
  "end": [
    2830, 
    3250, 
    8560, 
    10690, 
    12130, 
    13680, 
    16500, 
    20730, 
    23390, 
    24970, 
    28480, 
    31880, 
    33360, 
    35700, 
    37890, 
    39500, 
    41340, 
    42670, 
    43180, 
    44640, 
    45760, 
    47810, 
    51130, 
    54340, 
    55830, 
    57850, 
    59450, 
    62750, 
    66770, 
    67450, 
    70210, 
    73120, 
    74870, 
    78420, 
    82790, 
    84630, 
    88140, 
    91740, 
    94100, 
    95790, 
    98670, 
    99780, 
    102860, 
    103530, 
    104370, 
    106230, 
    108090, 
    110110, 
    112070, 
    114780, 
    116170, 
    119430, 
    123420, 
    126130, 
    127170, 
    130050, 
    133810, 
    134770, 
    138480, 
    144500, 
    146680, 
    150190, 
    151850, 
    154860, 
    158010, 
    158940, 
    163520, 
    166888, 
    171190, 
    173360, 
    175410, 
    179620, 
    182660, 
    185080, 
    185980, 
    187690, 
    192830, 
    195700, 
    196810, 
    200600, 
    204350, 
    206700, 
    210060, 
    212610, 
    217410, 
    220090, 
    221510, 
    224160, 
    227150, 
    230890, 
    231150, 
    232900, 
    234330, 
    237530, 
    239740, 
    243080, 
    245110, 
    247110, 
    251530, 
    256410, 
    257910, 
    259829, 
    261600, 
    264030, 
    266820, 
    269020, 
    272750, 
    274820, 
    276220, 
    277630, 
    281340, 
    285300, 
    286420, 
    290950, 
    294830, 
    296690, 
    298090, 
    302250, 
    304920, 
    307740, 
    312450, 
    314370, 
    318310, 
    321670, 
    324500, 
    327070, 
    332180, 
    333380, 
    334760, 
    341420, 
    343700, 
    345170, 
    348380, 
    350510, 
    352610, 
    365110, 
    367250, 
    368160, 
    369840, 
    370370, 
    372190, 
    375530, 
    379570, 
    380640, 
    382615, 
    389980, 
    394900, 
    397390, 
    399260, 
    403140, 
    408400, 
    412890, 
    416810, 
    421640, 
    423370, 
    426840, 
    430770, 
    432090, 
    437780, 
    444690, 
    449490, 
    451100, 
    456030, 
    457210, 
    459240, 
    464590, 
    466330, 
    469010, 
    476930, 
    478205, 
    487410, 
    490260, 
    494270, 
    499110, 
    502670, 
    505480, 
    509020, 
    512260, 
    516240, 
    518789, 
    522360, 
    524090, 
    528020, 
    530200, 
    534660, 
    537220, 
    540500, 
    542290, 
    545730, 
    547370, 
    550900, 
    553950, 
    554860, 
    556770, 
    559380, 
    563210, 
    566830, 
    570360, 
    572010, 
    574520, 
    575910, 
    577530, 
    580990, 
    582450, 
    585460, 
    588630, 
    590770, 
    593420, 
    595970, 
    596870, 
    599090, 
    600250, 
    602010, 
    604810, 
    609470, 
    612010, 
    615350, 
    617330, 
    618580
  ], 
  "text": [
    "ARMANDO FOX: So can functions be anonymous?", 
    "Yes.", 
    "In fact, we saw an example just a minute ago of a function without-- you", 
    "don't have to give the function a name.", 
    "They always return a value.", 
    "Yep.", 
    "If you don't have an explicit return statement, what do you get?", 
    "Unlike Ruby, you don't get the value of the last thing that you evaluated.", 
    "So be careful because this is sort of a standard JavaScript pit fall if", 
    "you're coming from the Ruby world.", 
    "Remember, that in Ruby, the last expression evaluated in the function", 
    "becomes the function's return value, unless you have a return statement", 
    "that does something different.", 
    "In JavaScript, if you don't have an explicit return, the", 
    "return value is undefined.", 
    "By the way, another JavaScript pit fall, there's", 
    "undefined and there's null.", 
    "Don't confuse them.", 
    "OK?", 
    "Null is a defined value.", 
    "But it's the null value.", 
    "Undefined means it doesn't have a value.", 
    "Those things are both false, but they're not equal to each other.", 
    "So having something be undefined and having it be null in JavaScript are", 
    "not actually the same.", 
    "They can be passed a function as an argument.", 
    "Yes, there was an example of that, as well.", 
    "That's one of the things that means to have functions be first class.", 
    "And as I've said a number of times by now, functions can't execute", 
    "concurrently.", 
    "So in that sense, you'd think the programming model is simple.", 
    "You don't have to worry about two copies of your function modifying a", 
    "data structure at the same time.", 
    "But as we'll see, you do have to worry about the concept of which outstanding", 
    "callbacks are there, and stuff like that, which may be easier or harder.", 
    "So let's talk about prototype inheritance.", 
    "This is one of the quirky features of JavaScript that can actually work", 
    "pretty well, but it's probably new to most people coming from other", 
    "object-oriented languages.", 
    "Every JavaScript object--", 
    "well, except the root object, I guess-- has a prototype.", 
    "So what's a prototype?", 
    "It's not like inheritance in a class-based system.", 
    "A prototype--", 
    "and remember what's an object?", 
    "An object is just a hash, right?", 
    "So let's keep reminding ourselves of that.", 
    "A JavaScript object is just a hash.", 
    "It's a set of keys and values.", 
    "The prototype of the object is you could think of it like", 
    "the object's parent.", 
    "Which means functionally that if I have an object and I try to look up a", 
    "property, a key in that hash, and it's not present in the object, before", 
    "returning an error, the object's prototype will be checked to see if it", 
    "has the key.", 
    "And so on, all the way up the prototype chain to the root object.", 
    "And only if nobody in that chain has a hash with that slot, then you would", 
    "get an error.", 
    "So whenever you create a new object, every new object has a prototype.", 
    "And the implementation of the interpreter is such that objects will", 
    "prototype inherit from their own kind of thing.", 
    "So when you create a new string, there's a string prototype from which", 
    "all new strings inherit.", 
    "And it encapsulates some of the behaviors that strings can do.", 
    "If you create a new array, there is an array prototype from which all new", 
    "arrays inherit.", 
    "And it defines some behaviors that all arrays will have.", 
    "Except in some versions of Internet Explorer, you can use the under under", 
    "proto under under accessor to inspect what an object's prototype is.", 
    "And in a moment, we'll see how to set the prototype for", 
    "certain kinds of objects.", 
    "So you can think of an object as inheriting the slots in its prototype,", 
    "not in the sense that it's sort of gets an extra copy of them.", 
    "But they'll get looked up in the prototype if they're not present in", 
    "the object.", 
    "And by the way, the converse is also true.", 
    "If my prototype has a particular slot, and I, as a descendant of it, override", 
    "that slot, then if somebody looks at the slot on me, they'll get my", 
    "overridden value.", 
    "So you can sort of see how you might use this to create something that's", 
    "like what we think of as inheritance with instance variables and class", 
    "variables and instance methods and class methods.", 
    "So let's take a look at a specific example of that.", 
    "Now in this example, I'm going to illustrate two things.", 
    "One of them is how you can use this sort of quirky, prototype inheritance", 
    "to create something that is a lot like class-based inheritance, which", 
    "sometimes is useful.", 
    "And the other thing I'm going to show is a horrible, horrible design", 
    "misfeature of JavaScript that probably will trip you up at least once.", 
    "And this way I can feel at ease that I've warned you about it.", 
    "OK.", 
    "So what's going on here?", 
    "I've defined a function square.", 
    "And for the moment, don't worry about why I have capitalized it.", 
    "I'll explain what the conventional is shortly.", 
    "But this is kind of an interesting function because it makes", 
    "reference to this.", 
    "And it's got a couple of different attributes.", 
    "One of them is being initialized to whatever I pass in as a length.", 
    "The other one is a function that will apparently return the square's area", 
    "easy enough.", 
    "Now this is the weird feature of JavaScript.", 
    "Look how I'm calling it.", 
    "I'm calling it with New Square.", 
    "OK, this is going to confuse the hell out of you for a little bit because", 
    "Square is just a plain old function.", 
    "However, because I'm calling it with the new keyword in front of it, it", 
    "would have been legal to omit the new keyword.", 
    "But it would result in a different behavior.", 
    "And this is the pit fall.", 
    "If I call it with the new keyword in front of it, then two things happen.", 
    "The first thing that happens is in the body of the function, a new object is", 
    "going to be created.", 
    "And this is going to be a reference to that object.", 
    "So this new object that gets created is going to have a side slot and an", 
    "area slot that are going to be initialized according to", 
    "what's in the function.", 
    "The second thing that happens is that that object is going to be returned", 
    "from the function, even though I don't have a return statement.", 
    "So you can think of this as acting kind of like a constructor.", 
    "And the prototype of the newly created object will be whatever Capital", 
    "Square's prototype is.", 
    "Now in this case, that doesn't matter so much because the new object is", 
    "going to have a side, and it's going to have a way to compute its own area.", 
    "Once we've created the object, it's basically independent of Square.", 
    "So in a moment, we'll see why that part matters.", 
    "For now, let's just verify that this actually works the way I say it will.", 
    "There's our function.", 
    "And now we'll call it--", 
    "that didn't surprise anybody, right?", 
    "Hopefully you weren't expecting to see a number because", 
    "area is just a function.", 
    "I haven't actually called it.", 
    "Just making sure everybody's on their toes.", 
    "OK, so what is someSquare?", 
    "So it's an object whose prototype is capital Square.", 
    "And it's got an area slot, which is a function.", 
    "It's got a side--", 
    "and here's the under under proto.", 
    "Right?", 
    "Under under proto is capital Square.", 
    "That means that if I do look up on someSquare for a property that it", 
    "doesn't have, the next thing it would do is try to see whether capital", 
    "Square has it.", 
    "So let's find an example where this matters.", 
    "Prototype is a special property that's only defined for functions that lets", 
    "us explicitly set what the prototype of an object is.", 
    "The prototype property is a special property that's", 
    "only defined on functions.", 
    "And, indeed, capital Square is a function.", 
    "What we're going to do here is rather than define an area function that is", 
    "part of the constructor, in other words, every square object we create", 
    "would end up carrying around a copy of that function, what we're going to do", 
    "instead is directly modify the prototype from which any newly created", 
    "squares would inherit.", 
    "And in the prototype, we are going to put the area function because that", 
    "function is the same no matter what square we've created.", 
    "So let's see how this actually works.", 
    "We'll copy our simplified constructor into our JavaScript browser window.", 
    "And if we try to create a square, it works as we expect.", 
    "We can see that the square's prototype is capital Square, the name of the", 
    "constructor function.", 
    "And in turn, we can open that and see that the constructor function is", 
    "function Square.", 
    "But there's no area function.", 
    "So predictably, if we try to call a square dot area, we'll get an error", 
    "because area is undefined.", 
    "And you can't call undefined as a function.", 
    "But now let's modify the prototype object of the square constructor.", 
    "And we can try again.", 
    "Once again, we can look at the object we've created and we can see that its", 
    "prototype is capital Square.", 
    "But now we can see that the prototype also has an area function, which means", 
    "that unlike our first square, we can compute the area of this one.", 
    "Because even though otherSquare, itself, doesn't have the area", 
    "property, its prototype does have the area property.", 
    "So you can think of it similar to looking at the method in Ruby, where", 
    "you go up the ancestor tree until you find it.", 
    "Unfortunately, you can call a function either using New, or not using New.", 
    "And both are legal and they have different behaviors.", 
    "If you call it using New, you get a new object whose prototype is whatever", 
    "the function's prototype is.", 
    "So you can use that to create something like inheritance in a", 
    "class-based language.", 
    "And when you call a function on the newly created object, the value of", 
    "this in the body of the function is whatever the receiver was.", 
    "So in that sense, its behavior is actually pretty similar to something", 
    "like Java or Ruby.", 
    "But if you call a function with no receiver, then the receiver is assumed", 
    "to be the global object.", 
    "In the case of JavaScript being embedded in the browser, the global", 
    "object is the window object that represents the window holding the", 
    "current document.", 
    "We'll play around with that object in just a moment.", 
    "But it's usually not the thing you intended.", 
    "And this is relevant because if you have a function like capital Square", 
    "that we defined with the intention of using it like a constructor function,", 
    "but you forget to use the word \"New\" when you call it, then the return", 
    "value of function will be undefined.", 
    "And whenever you call the function, the value of this in the function will", 
    "be the global object.", 
    "That's almost never what you want.", 
    "So this is considered a JavaScript design misfeature.", 
    "Unfortunately we just have to live with it.", 
    "And the way that most JavaScript programmers live with it is they've", 
    "adopted the convention that if the function's name begins with a capital", 
    "letter, it's intended to be called using New.", 
    "In other words, it's intended to be constructor-like.", 
    "And if the function's name doesn't begin with a capital letter, it's a", 
    "plain old function.", 
    "It's not intended to be used as a constructor.", 
    "So it's only a convention.", 
    "But it's a pretty widely use one.", 
    "And you'll get used to seeing it a lot.", 
    "Here is an example that does work about which of these function calls", 
    "will evaluate to nine, based on what you've seen.", 
    "So remember, there's a couple of pitfalls you've already seen.", 
    "And it's going to take a moment to parse the code.", 
    "So do that."
  ]
}