{
  "start": [
    900, 
    3100, 
    8570, 
    10170, 
    12910, 
    13870, 
    16650, 
    20500, 
    23790, 
    25520, 
    27080, 
    28910, 
    32640, 
    37750, 
    41470, 
    44400, 
    45610, 
    46180, 
    49410, 
    50490, 
    53740, 
    57060, 
    60910, 
    66650, 
    68020, 
    72270, 
    73810, 
    76960, 
    79610, 
    80610, 
    82120, 
    85590, 
    87410, 
    91860, 
    94655, 
    96850, 
    100270, 
    102770, 
    104240, 
    107450, 
    109120, 
    111690, 
    112780, 
    115900, 
    119005, 
    120600, 
    125060, 
    127340, 
    130130, 
    132150, 
    133570, 
    137130, 
    140700, 
    144930, 
    146890, 
    148270, 
    153030, 
    156790, 
    160610, 
    164390, 
    166870, 
    169040, 
    170950, 
    173460, 
    175630, 
    178630, 
    180160, 
    184220, 
    188730, 
    191590, 
    193200, 
    197050, 
    199750, 
    202050, 
    203840, 
    208120, 
    209500, 
    213840, 
    218500, 
    222010, 
    224880, 
    226500, 
    230360, 
    233380, 
    236710, 
    238480, 
    241900, 
    244580, 
    247970, 
    250920, 
    253970, 
    256510, 
    262230, 
    265140, 
    272380, 
    275925, 
    277930, 
    281330, 
    284790, 
    289580, 
    292760, 
    295910, 
    297800, 
    301980, 
    302970, 
    305640, 
    310630, 
    312890, 
    314450, 
    317800, 
    321950, 
    325790, 
    327290, 
    330830, 
    333250, 
    337510, 
    341490, 
    344930, 
    348420, 
    352510, 
    355950, 
    361190, 
    364170, 
    365500, 
    369030, 
    370540, 
    373790, 
    377240, 
    379520, 
    381510, 
    386220, 
    389490, 
    393440, 
    396440, 
    397110, 
    399150, 
    403230, 
    405380, 
    407010, 
    408800, 
    411360, 
    412440, 
    415880, 
    419180, 
    421500, 
    422910, 
    426960, 
    428800, 
    433330, 
    436550, 
    437830, 
    441570, 
    446320, 
    447450, 
    452150, 
    454820, 
    459460, 
    463560, 
    467390, 
    470130, 
    471480, 
    475640, 
    479850, 
    483110, 
    486310, 
    490530, 
    496830, 
    500470, 
    501240, 
    503310, 
    504910, 
    506760, 
    510980, 
    514030, 
    515830, 
    519760, 
    523409, 
    525500, 
    529000, 
    533160, 
    535330, 
    537880, 
    539830, 
    543890, 
    547340, 
    550260, 
    555010, 
    557050, 
    560870, 
    563860, 
    570700, 
    572770, 
    577630, 
    579350, 
    582590, 
    585880, 
    587620, 
    591020, 
    594880, 
    596890, 
    599240, 
    604030, 
    604620, 
    608340, 
    611040, 
    614230, 
    619560, 
    621920, 
    624380, 
    628100, 
    629690, 
    631800, 
    633070, 
    636070, 
    637290, 
    641530, 
    645520, 
    646310, 
    650630, 
    654880, 
    657890, 
    662570, 
    664670, 
    666670, 
    673130, 
    676210, 
    677380, 
    680830, 
    683580, 
    685000, 
    690130, 
    693510, 
    697220, 
    698630, 
    704440, 
    706830, 
    709560, 
    712860, 
    713830, 
    718440, 
    720930, 
    721730, 
    725770, 
    730150, 
    734150, 
    738220, 
    739710, 
    741720, 
    743140, 
    746370, 
    747740, 
    751465, 
    755630, 
    756820, 
    761380, 
    763850, 
    767770, 
    772120, 
    775010, 
    778360, 
    780620, 
    784460, 
    789150, 
    793800, 
    795600, 
    798390, 
    802150, 
    804860, 
    808660, 
    812720, 
    814590, 
    816240, 
    820030, 
    823410, 
    827680, 
    831430, 
    833840, 
    836530, 
    840290, 
    841740, 
    845240, 
    846210, 
    848140, 
    850900, 
    852280, 
    856010, 
    857200, 
    862280, 
    865910, 
    869640, 
    872300, 
    875160, 
    876310, 
    879710, 
    883780, 
    886720, 
    890410, 
    894970, 
    895720, 
    901420, 
    904460, 
    908460, 
    912220, 
    915890, 
    917010, 
    920200, 
    923500, 
    924130, 
    929170, 
    932680, 
    935510, 
    936340, 
    938170, 
    940620, 
    941440, 
    944340, 
    946680, 
    950670, 
    952120, 
    956590, 
    957860, 
    961810, 
    965710, 
    967570, 
    971570, 
    974680, 
    978210, 
    981670, 
    983950, 
    985700, 
    989230, 
    993690, 
    996350, 
    999130, 
    1001790, 
    1004660, 
    1006070, 
    1009380, 
    1010610
  ], 
  "end": [
    3100, 
    8570, 
    10170, 
    12910, 
    13870, 
    16650, 
    20500, 
    23790, 
    25520, 
    27080, 
    28910, 
    32640, 
    37750, 
    41470, 
    44400, 
    45610, 
    46180, 
    49410, 
    50490, 
    53740, 
    57060, 
    60910, 
    66650, 
    68020, 
    72270, 
    73810, 
    76960, 
    79610, 
    80610, 
    82120, 
    85590, 
    87410, 
    91860, 
    94655, 
    96850, 
    100270, 
    102770, 
    104240, 
    107450, 
    109120, 
    111690, 
    112780, 
    115900, 
    119005, 
    120600, 
    125060, 
    127340, 
    130130, 
    132150, 
    133570, 
    137130, 
    140700, 
    144930, 
    146890, 
    148270, 
    153030, 
    156790, 
    160610, 
    164390, 
    166870, 
    169040, 
    170950, 
    173460, 
    175630, 
    178630, 
    180160, 
    184220, 
    188730, 
    191590, 
    193200, 
    197050, 
    199750, 
    202050, 
    203840, 
    208120, 
    209500, 
    213840, 
    218500, 
    222010, 
    224880, 
    226500, 
    230360, 
    233380, 
    236710, 
    238480, 
    241900, 
    244580, 
    247970, 
    250920, 
    253970, 
    256510, 
    262230, 
    265140, 
    272380, 
    275925, 
    277930, 
    281330, 
    284790, 
    289580, 
    292760, 
    295910, 
    297800, 
    301980, 
    302970, 
    305640, 
    310630, 
    312890, 
    314450, 
    317800, 
    321950, 
    325790, 
    327290, 
    330830, 
    333250, 
    337510, 
    341490, 
    344930, 
    348420, 
    352510, 
    355950, 
    361190, 
    364170, 
    365500, 
    369030, 
    370540, 
    373790, 
    377240, 
    379520, 
    381510, 
    386220, 
    389490, 
    393440, 
    396440, 
    397110, 
    399150, 
    403230, 
    405380, 
    407010, 
    408800, 
    411360, 
    412440, 
    415880, 
    419180, 
    421500, 
    422910, 
    426960, 
    428800, 
    433330, 
    436550, 
    437830, 
    441570, 
    446320, 
    447450, 
    452150, 
    454820, 
    459460, 
    463560, 
    467390, 
    470130, 
    471480, 
    475640, 
    479850, 
    483110, 
    486310, 
    490530, 
    496830, 
    500470, 
    501240, 
    503310, 
    504910, 
    506760, 
    510980, 
    514030, 
    515830, 
    519760, 
    523409, 
    525500, 
    529000, 
    533160, 
    535330, 
    537880, 
    539830, 
    543890, 
    547340, 
    550260, 
    555010, 
    557050, 
    560870, 
    563860, 
    570700, 
    572770, 
    577630, 
    579350, 
    582590, 
    585880, 
    587620, 
    591020, 
    594880, 
    596890, 
    599240, 
    604030, 
    604620, 
    608340, 
    611040, 
    614230, 
    619560, 
    621920, 
    624380, 
    628100, 
    629690, 
    631800, 
    633070, 
    636070, 
    637290, 
    641530, 
    645520, 
    646310, 
    650630, 
    654880, 
    657890, 
    662570, 
    664670, 
    666670, 
    673130, 
    676210, 
    677380, 
    680830, 
    683580, 
    685000, 
    690130, 
    693510, 
    697220, 
    698630, 
    704440, 
    706830, 
    709560, 
    712860, 
    713830, 
    718440, 
    720930, 
    721730, 
    725770, 
    730150, 
    734150, 
    738220, 
    739710, 
    741720, 
    743140, 
    746370, 
    747740, 
    751465, 
    755630, 
    756820, 
    761380, 
    763850, 
    767770, 
    772120, 
    775010, 
    778360, 
    780620, 
    784460, 
    789150, 
    793800, 
    795600, 
    798390, 
    802150, 
    804860, 
    808660, 
    812720, 
    814590, 
    816240, 
    820030, 
    823410, 
    827680, 
    831430, 
    833840, 
    836530, 
    840290, 
    841740, 
    845240, 
    846210, 
    848140, 
    850900, 
    852280, 
    856010, 
    857200, 
    862280, 
    865910, 
    869640, 
    872300, 
    875160, 
    876310, 
    879710, 
    883780, 
    886720, 
    890410, 
    894970, 
    895720, 
    901420, 
    904460, 
    908460, 
    912220, 
    915890, 
    917010, 
    920200, 
    923500, 
    924130, 
    929170, 
    932680, 
    935510, 
    936340, 
    938170, 
    940620, 
    941440, 
    944340, 
    946680, 
    950670, 
    952120, 
    956590, 
    957860, 
    961810, 
    965710, 
    967570, 
    971570, 
    974680, 
    978210, 
    981670, 
    983950, 
    985700, 
    989230, 
    993690, 
    996350, 
    999130, 
    1001790, 
    1004660, 
    1006070, 
    1009380, 
    1010610, 
    1013350
  ], 
  "text": [
    "Armando Fox: OK, one down, four to go.", 
    "We're onto the O of solid, which is the Open/closed principle.", 
    "These are great names, aren't they?", 
    "So what is the open/closed closed principle this is one of the ones that", 
    "you probably--", 
    "if you don't think about it, you find yourself violating really easily.", 
    "So this is one of the examples of the more subtle ones.", 
    "The idea is that a class should be open for extension but closed against", 
    "modification of the source.", 
    "So what does that mean exactly?", 
    "It's easy to illustrate with an example.", 
    "Here is a hypothetical class for generating reports.", 
    "And one of its methods is output report, which takes a look at one of", 
    "the instance variables and, depending on the value of the instance variable,", 
    "it might create a different kind of for matter in order to", 
    "generate the report.", 
    "Right.", 
    "It looks harmless enough but it's a clear violation of", 
    "the open/closed principle.", 
    "In fact, anywhere you have a case statement, you're probably doing a", 
    "violation of something related to open/closed.", 
    "And in this case, the problem is, suppose we add a new type of report.", 
    "Instead of PDF and HTML, we now have a report that, I don't know, prints on", 
    "some weird kind of printer.", 
    "The point is, the only way to add support is to add another clause to", 
    "this case statement.", 
    "So there's two things that we'd have to change to add a new report type.", 
    "One thing is, we'd have to create a new class that", 
    "implements our report type.", 
    "But that's not a big deal.", 
    "When we add new classes, we're not breaking compatibility with people's", 
    "old code that depends on us.", 
    "But we also have to add, somewhere in here, recognition of that new class so", 
    "that we can call its built-in formatter, and that's the part where", 
    "we violate the open/closed principle.", 
    "Even though all we're trying to do is extend, rather than change, existing", 
    "functionality, we're forced to change the source code", 
    "just to do the extension.", 
    "So that's sort of the signature problem that the open/closed principle", 
    "tries to identify.", 
    "Now again, in a statically typed language, the cost of", 
    "doing this is obvious.", 
    "Because as soon as I touch this file, I have to recompile it.", 
    "And if this part of a library, then anybody who used that library now has", 
    "to relink the new library.", 
    "So those costs are sometimes subtly hidden from you in a interpreted", 
    "language like Ruby, where there is no compile step.", 
    "Nonetheless, the costs are real, so we should figure out what we", 
    "can do about them.", 
    "So there's the smell, by the way.", 
    "Whenever you're using a case statement to do different things depending on", 
    "the value of some variable, especially if, within the case, you've got", 
    "references to other collaborator classes, it's pretty likely that", 
    "there's no way you can extend this without modifying", 
    "that function in place.", 
    "OK, if you're using a statically-typed language, there's a design pattern", 
    "called abstract factory, which basically answers the question of, at", 
    "run time, I'm going to create something that is one of a variety of", 
    "subclasses, all of which inherit from the same base class, but I won't know", 
    "which is the right subtype until run time.", 
    "So there's a couple of different problems you have to solve in a", 
    "statically-typed language in order to do that.", 
    "One of which is that you basically have to work around the type system's", 
    "idea of what's compilable.", 
    "But the kind of problem that abstract factory solves is actually", 
    "relevant to us here.", 
    "Because we have a similar issue here.", 
    "We're trying to do the report method that we just saw in such a way that,", 
    "if we added new report types, we wouldn't have to change the existing", 
    "code just to support them.", 
    "Which is the same as saying, we don't have certainty at runtime over what", 
    "the possible entire set of report types might be.", 
    "We want to specifically be able to extend it.", 
    "So how do we do this.", 
    "Ruby has a particularly nice implementation of the abstract factory", 
    "pattern that can be used to solve this.", 
    "So this is the bad old code that we started from.", 
    "I've changed the syntax just a little bit so that there's an output method.", 
    "And inside the output method, we first figure out what kind of formatter", 
    "we're going to use, and then we'll eventually call some", 
    "method on that formatter.", 
    "So this is the version that is rigid, and that the only way to add support", 
    "for new formatters is to add new when clauses.", 
    "Here's a much nicer implementations that looks a little weird the first", 
    "time you see it, but bear with me here.", 
    "It's another nice use of meta-programming.", 
    "A look at whatever the format variable is.", 
    "Classify is a method that's provided to essentially convert it to the kind", 
    "of string that makes a class name, it's upper camel case.", 
    "So instead of a word with lower case underscores, it becomes a word with", 
    "capital letters separating each word.", 
    "And constantize looks up the string to see if it corresponds to the name of", 
    "class-- to see if it corresponds to a constant, specifically.", 
    "So if this succeeds, then the value of @format will be an actual reference to", 
    "the class named by the string format.", 
    "Does that makes sense?", 
    "So that's why I called it formatter_class because I'll end up", 
    "with a reference to whatever class is named here.", 
    "And if it turns out that constantize can't find any class with this name,", 
    "Ruby will raise a name error, which I can rescue, and then there's some code", 
    "here to say, I don't know what you did, but you're specifying a format or", 
    "type that I don't know about.", 
    "And now, whatever class that was, I can create a new instance of it by", 
    "sending it the new message.", 
    "And now I can call whatever instance methods I want on it.", 
    "So this is pretty nice because now, when I add a new format class, as long", 
    "as the class is present somewhere in my application, this", 
    "code will still work.", 
    "So this code is now open for extension, because I can add new", 
    "functionality, and it's closed for modification, in that I don't need to", 
    "make any changes here just to extend with a new report class.", 
    "Pretty nice.", 
    "So this is, again, to me this is in the category of tasteful uses of", 
    "meta-programming", 
    "There's a more general design pattern, or actually a family of patterns, that", 
    "has arisen to help solve this problem too, most of which make use, in some", 
    "way or another, of the abstract factory.", 
    "The template and the strategy pattern are the two most basic examples.", 
    "And both of them are intended to help you cover a situation where you've got", 
    "a set of steps that, structurally, is very similar across some different", 
    "variations, but, depending on which variation you choose, there's either", 
    "some difference in the set of steps, or there's some difference in how the", 
    "steps are implemented.", 
    "So in the template method, you have the same set of steps no matter what,", 
    "but the implementation is different.", 
    "So, for example, in the case of a report, you might say, you always have", 
    "to generate a header, a body, and a footer, but the specific way that you", 
    "do that depends on which type of report it is.", 
    "That would be a template.", 
    "And usually it's not uncommon to implement that with inheritance, where", 
    "the basic methods are overridden by all the different subclasses.", 
    "Or there's the strategy method, where the overall task you're doing is the", 
    "same, but there's many different ways to do it, and that's done by", 
    "composition.", 
    "So what's the difference between these two?", 
    "Well, here's an example on the left of what happens if we try to implement", 
    "something like report generation--", 
    "actually, here, let me, here we go.", 
    "This is easier.", 
    "Here's what happens if we try to implement report generation using the", 
    "template pattern.", 
    "We've got an overall master class called Report.", 
    "And it defines the method that everybody's going to call.", 
    "The method calls two or three different helpers to actually", 
    "get the work done.", 
    "But these helpers are the moral equivalent of purely virtual methods,", 
    "purely abstract methods.", 
    "Now Ruby doesn't have purely abstract methods, in the sense that it doesn't", 
    "provide a way for you to enforce the fact that a method is abstract, at", 
    "least not in the language.", 
    "But the equivalent of what you're doing is, in all of the different", 
    "subclasses of report, you'll provide methods that override these.", 
    "Now, why will this work?", 
    "Because remember that you can create a report object, not by using the report", 
    "constructor, but by using the abstract factory.", 
    "So if the thing that I created using my abstract factory trick is really an", 
    "instance of HTML report, then when I call output title, it's going to be", 
    "HTML report's output title instance method that gets called.", 
    "So this relies on the fact that I'm never really", 
    "manipulating a report item.", 
    "Report is really playing the role of an abstract class in Java.", 
    "It relies on the fact that I'm always going to be manipulating a subclass of", 
    "Report that actually has an implementation for that method.", 
    "So that's the idea of how you would use a template.", 
    "And the corresponding diagram looks like this, where you have a method", 
    "that's available in the master class, but the methods that do the actual", 
    "work, the individual steps, are overridden by methods in the", 
    "subclasses.", 
    "So you always call one of the subclass methods.", 
    "What about using the strategy pattern?", 
    "What would be different about doing that?", 
    "This is a pattern you would use if the task of generating report is the thing", 
    "that you want to capture, but even the steps in doing it would be different", 
    "from one type of report to another.", 
    "So whereas before, the assumption was that the structure of header, body,", 
    "and footer is the same for all report types, if that's not the case, you", 
    "might want to say, well, we're going to do it differently.", 
    "We'll just have the report have a component, which is the formatter.", 
    "And the output report method, instead of being defined in report itself will", 
    "delegate to whatever the formatter is.", 
    "And the formatter is the one that has different subclasses and the", 
    "subclasses can do whatever they want.", 
    "So the idea here is, the idea of outputting a report is common to all", 
    "the different flavors, so to speak, but within that method, there's", 
    "basically no commonality across the different types.", 
    "So you still want to have a common ancestor that has the method signature", 
    "available for you, but the method is just a delegate.", 
    "All it does is directly hand it off to one of its subclasses.", 
    "So this is an example of using delegation as opposed to inheritance.", 
    "The idea being that, if there's less commonality in the tasks delegation", 
    "gets in your way less than inheritance.", 
    "Inheritance assumes that most of what the superclass you want to at least", 
    "implement a shared interface for.", 
    "But if the variants of the tasks are different enough from each other that", 
    "you have no need to do that, then inheritance really provides extra", 
    "baggage that you have to work around.", 
    "So remember I said, one of the metapatterns or the principles that", 
    "we'll keep coming back to is that composition and delegation usually", 
    "give you a cleaner design than inheritance.", 
    "This is one of the examples where that could be true.", 
    "Here's another variation of drawing out functionality when you have common", 
    "subclasses.", 
    "And this is the one that arises when there's enough different variations of", 
    "what you want to do, but they can actually be composed.", 
    "So the example that I picked is based on the one in the book.", 
    "But we are also already saw an example of this when we talked about scopes.", 
    "The example here is, suppose I have a formatter already.", 
    "I have a PDF formatter which already works.", 
    "But there's various things you can do with PDF files, like, you can attach a", 
    "password to them.", 
    "You can do water marks, like, when you have the word draft", 
    "printed across the back.", 
    "And the idea is that you could actually mix and match these options", 
    "in different ones.", 
    "So if you try to solve this the naive way, with inheritance, you could say", 
    "well, OK, there's two different options and either option can be", 
    "turned on or off.", 
    "So I need a total of four subclasses to capture any possible combination of", 
    "them, including the PDF formatter that has, sort of, no bells and whistles,", 
    "so really five classes, all told.", 
    "But what you'd really like to do is to be able to stack them up.", 
    "You'd like to be able to mix and match them.", 
    "And that's what the decorator pattern gives you.", 
    "Basically, you create a class that has the same signature as the class that", 
    "you're starting from, the same signature as your base class.", 
    "So what does that mean?", 
    "Remember when we talked about scopes, we were able to define a scope for", 
    "kids, a scope with good reviews, and then it turns out", 
    "you can compose them?", 
    "And it's because the set of methods that this scope responds to is the", 
    "same as the set of methods that movie itself would have responded to, in", 
    "terms of the finders and being able to look up things by traversing the", 
    "association.", 
    "So because of that, because each one of these returns the same thing, you", 
    "can actually stack them up in various combinations.", 
    "So we already saw this example when we did scopes.", 
    "And here's the example of doing with the PDF formatter.", 
    "How does this work?", 
    "Well, we still are going to inherit from PDF formatter, but we only to", 
    "inherit once for each of the features that we want.", 
    "Why?", 
    "Because if we instantiate a PDF with water mark formatter, one of the", 
    "things that it can do is delegate calls to its base class.", 
    "It will hold onto a reference to the thing that it ultimately inherits", 
    "from, which means that anything I can do on a PDF formatter, I", 
    "can also do on this.", 
    "This has its own behaviors, which I added, it's the", 
    "ability to do a watermark.", 
    "But it can also have all of the other PDF formatter behaviors through", 
    "delegation.", 
    "So technically, I probably should've put a dotted arrow here to symbolize", 
    "that any of the methods associated with PDF formatter could be achieved", 
    "through delegation.", 
    "So now I can take a PDF with watermark formatter and compose it with a PDF", 
    "with password formatter if I want both features.", 
    "In exactly the same way as we did scopes in active record.", 
    "So this is a pretty neat instance of the decorator pattern.", 
    "Another place that you see the decorator pattern, quote unquote, \"in", 
    "the wild,\" another place that Rails uses it, is actually in the way that", 
    "the rack application server works.", 
    "So the application server that sits between the outside world and your", 
    "application, all it does is, it receives an HTTP request, and it hands", 
    "back to the caller a status code, a set of HTTP response headers, and the", 
    "HTTP response body.", 
    "Now in the simplest possible case, what happens?", 
    "It calls your app by, calling the correct controller action.", 
    "And depending on the result of that action, it will return whatever the", 
    "rendered view was, the appropriate headers, and the HTTP response code,", 
    "but you could also define your own, individual sliver that goes in front", 
    "of that and intercepts the call.", 
    "This is actually how many Omniauth works.", 
    "Those of you who started playing around with Omniauth for your projects", 
    "to do authentication, Omniauth actually slips in to the rack", 
    "application controller, and it decorates the existing HTTP methods so", 
    "that it takes whatever would have been returned by the HTTP method and also", 
    "adds a layer of authentication on top of it.", 
    "And it works because it can delegate to the base class for anything it", 
    "doesn't know how to do, but it can add its own behaviors for that the extra", 
    "functionality that it has.", 
    "So there's a handful of examples of this in the wild, and the key use case", 
    "for it is--", 
    "I essentially have a collection of features.", 
    "I may want to be able to compose them, so more than one feature could be", 
    "active at the same time.", 
    "But I want to avoid a combinatorial explosion of subclasses just to be", 
    "able to support that.", 
    "So again, delegation and composition instead of inheritance.", 
    "The usual challenge with actually implementing the open/closed principle", 
    "is, you'd have to be a clairvoyant to know all the different ways that", 
    "somebody might, someday, want to extend your app.", 
    "So you can't close against all types of changes because you don't even know", 
    "what they're going to be.", 
    "So again, you have to exercise some engineering judgment and try to figure", 
    "out which ones are the ones that are most likely to be extension points.", 
    "The nice thing about the agile methodology is, because you're", 
    "iterating frequently, you can expose some of the important types of change", 
    "points early and then try to close against the changes that are outside", 
    "of that's set.", 
    "Try to make those extension points open for future extension, while", 
    "closing against modifications that really don't contribute to those.", 
    "So this is consistent with the observation that, often, code starts", 
    "out looking just fine and eventually gets to the point where you realize", 
    "that you want to make an extension that you can't make without making a", 
    "change to the code.", 
    "That's sort of the time to refactor and figure out, OK, given that I want", 
    "to make this extension now, I may want to make similar types of extensions in", 
    "the future.", 
    "What is the proper refactoring as we showed in this example, PDF formatter", 
    "without features, it's fine to just say we'll inherit from the formatter.", 
    "But once you start talking about adding features, now you're talking", 
    "about a refactoring.", 
    "We had to make this class look different.", 
    "So that we can enable an extension point that we hadn't previously", 
    "thought of.", 
    "So that's the essence of the open/closed principle.", 
    "With that in mind, we can now address the following question.", 
    "You saw a lot about the Associations functionality that's available in", 
    "active record.", 
    "You can traverse Associations you can behave as if the Associations behave", 
    "like collections.", 
    "And the question is, whether the Association's functionality is or is", 
    "not an example of adhering to the open/closed principle.", 
    "So here's four possible ways to think about it.", 
    "You could think, yes it is, because you don't have to change the source", 
    "code in your models to take advantage of associations.", 
    "You could say, yes it is, because you can change the underlying database, as", 
    "long as a relational database, the association stuff can do its magic.", 
    "And you don't have to make any changes to Rails to switch", 
    "out the type of database.", 
    "You could take the point of view that no, it's not an example of OCP", 
    "because, even though we get some kinds of relationships now we can't add new", 
    "relationships without modifying the source code of Rails.", 
    "Therefore, not open/closed principle compliant.", 
    "Or you could say no, but it's for different reason.", 
    "It's because the Associations provide functionality that isn't really", 
    "related to the model's business logic.", 
    "It's not an example of an extension point relative to what the model", 
    "itself would do.", 
    "So which of these best describes your reaction?"
  ]
}