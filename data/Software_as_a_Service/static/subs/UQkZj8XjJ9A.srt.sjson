{
  "start": [
    260, 
    4710, 
    6870, 
    9700, 
    12530, 
    14970, 
    18530, 
    20530, 
    22230, 
    24500, 
    25880, 
    29570, 
    33780, 
    35510, 
    38020, 
    40930, 
    42750, 
    46670, 
    50070, 
    54090, 
    57310, 
    60590, 
    63600, 
    66500, 
    70450, 
    73020, 
    76600, 
    80780, 
    84910, 
    86450, 
    90110, 
    92890, 
    96280, 
    98980, 
    103230, 
    107780, 
    111250, 
    115390, 
    117130, 
    120370, 
    123100, 
    126180, 
    128419, 
    130490, 
    134280, 
    138580, 
    140910, 
    144490, 
    147850, 
    151150, 
    153090, 
    154220, 
    158200, 
    161720, 
    165280, 
    168510, 
    172600, 
    174740, 
    177410, 
    179510, 
    183750, 
    186770, 
    187890, 
    190550, 
    191590, 
    194410, 
    198380, 
    203110, 
    206010, 
    211690, 
    213270, 
    217040, 
    218430, 
    222130, 
    223080, 
    225740, 
    228240, 
    232780, 
    235720, 
    237020, 
    240390, 
    243640, 
    244630, 
    247780, 
    249910, 
    251270, 
    255930, 
    259160, 
    262600, 
    264490, 
    266070, 
    266660, 
    271510, 
    276560, 
    279460, 
    283860, 
    287180, 
    288030, 
    291540, 
    295100, 
    300430, 
    306540, 
    310380, 
    315230, 
    321050, 
    325870, 
    327540, 
    331190, 
    333320, 
    337060, 
    340270, 
    344440, 
    347200, 
    351090, 
    351910, 
    354180, 
    355820, 
    358190, 
    359250, 
    362330, 
    364120, 
    367020, 
    369420, 
    373780, 
    374940, 
    379920, 
    381770, 
    387290, 
    387836, 
    391390, 
    395070, 
    396990, 
    401400, 
    405320, 
    407230, 
    409710, 
    410890, 
    414460, 
    419210, 
    421500, 
    424700, 
    430360, 
    431500, 
    434700, 
    437600, 
    438570, 
    442700, 
    445240, 
    446910, 
    451680, 
    457855, 
    460290, 
    464380, 
    467420, 
    468480, 
    471690, 
    472590, 
    475110, 
    477710, 
    482780, 
    485550, 
    488870, 
    493680, 
    498030, 
    501560, 
    503800, 
    508220, 
    509970, 
    511490, 
    515240, 
    517919, 
    521490, 
    524350, 
    527350, 
    529230, 
    533180, 
    535950, 
    538430, 
    541840, 
    545800, 
    549030, 
    552570, 
    553900, 
    560510, 
    566240, 
    569690, 
    572200, 
    576140, 
    578730, 
    582370, 
    584280, 
    588470, 
    590760, 
    594990, 
    598690, 
    602000, 
    604240, 
    609470, 
    613780, 
    617180, 
    623890, 
    627110, 
    631740, 
    635060, 
    637660, 
    640720, 
    644760, 
    646580, 
    650730, 
    654810, 
    656280, 
    658880, 
    662640, 
    665840, 
    668660, 
    672260, 
    676620, 
    679760, 
    683090, 
    687080, 
    690920, 
    694890, 
    696050, 
    700530, 
    702790, 
    706300, 
    709140, 
    710530, 
    713320, 
    715710, 
    716660, 
    720910, 
    724050, 
    725860, 
    728760, 
    731810, 
    733290, 
    736180, 
    739200, 
    743120, 
    745220, 
    748810, 
    751000, 
    752670, 
    755800, 
    759970, 
    762020, 
    763750, 
    767250, 
    772140, 
    776750, 
    777880, 
    780340, 
    783500, 
    787220, 
    791020, 
    792110, 
    796080, 
    798890, 
    802900, 
    805830, 
    807100, 
    809400, 
    811980, 
    814300, 
    816740, 
    820520, 
    822130, 
    824870, 
    826390, 
    829470, 
    831880, 
    833880, 
    836820, 
    841220, 
    845820, 
    850230, 
    851350, 
    857560, 
    861040, 
    864200, 
    866810, 
    871300, 
    875230, 
    879100, 
    881730, 
    883790, 
    886360, 
    890500, 
    893520, 
    895780, 
    898060, 
    899140
  ], 
  "end": [
    4710, 
    6870, 
    9700, 
    12530, 
    14970, 
    18530, 
    20530, 
    22230, 
    24500, 
    25880, 
    29570, 
    33780, 
    35510, 
    38020, 
    40930, 
    42750, 
    46670, 
    50070, 
    54090, 
    57310, 
    60590, 
    63600, 
    66500, 
    70450, 
    73020, 
    76600, 
    80780, 
    84910, 
    86450, 
    90110, 
    92890, 
    96280, 
    98980, 
    103230, 
    107780, 
    111250, 
    115390, 
    117130, 
    120370, 
    123100, 
    126180, 
    128419, 
    130490, 
    134280, 
    138580, 
    140910, 
    144490, 
    147850, 
    151150, 
    153090, 
    154220, 
    158200, 
    161720, 
    165280, 
    168510, 
    172600, 
    174740, 
    177410, 
    179510, 
    183750, 
    186770, 
    187890, 
    190550, 
    191590, 
    194410, 
    198380, 
    203110, 
    206010, 
    211690, 
    213270, 
    217040, 
    218430, 
    222130, 
    223080, 
    225740, 
    228240, 
    232780, 
    235720, 
    237020, 
    240390, 
    243640, 
    244630, 
    247780, 
    249910, 
    251270, 
    255930, 
    259160, 
    262600, 
    264490, 
    266070, 
    266660, 
    271510, 
    276560, 
    279460, 
    283860, 
    287180, 
    288030, 
    291540, 
    295100, 
    300430, 
    303710, 
    310380, 
    315230, 
    321050, 
    325870, 
    327540, 
    331190, 
    333320, 
    337060, 
    340270, 
    344440, 
    347200, 
    351090, 
    351910, 
    354180, 
    355820, 
    358190, 
    359250, 
    362330, 
    364120, 
    367020, 
    369420, 
    373780, 
    374940, 
    379920, 
    381770, 
    387290, 
    387836, 
    391390, 
    395070, 
    396990, 
    401400, 
    405320, 
    407230, 
    409710, 
    410890, 
    414460, 
    419210, 
    421500, 
    424700, 
    430360, 
    431500, 
    434700, 
    437600, 
    438570, 
    442700, 
    445240, 
    446910, 
    451680, 
    457855, 
    460290, 
    464380, 
    467420, 
    468480, 
    471690, 
    472590, 
    475110, 
    477710, 
    482780, 
    485550, 
    488870, 
    493680, 
    498030, 
    501560, 
    503800, 
    508220, 
    509970, 
    511490, 
    515240, 
    517919, 
    521490, 
    524350, 
    527350, 
    529230, 
    533180, 
    535950, 
    538430, 
    541840, 
    545800, 
    549030, 
    552570, 
    553900, 
    560510, 
    566240, 
    569690, 
    572200, 
    576140, 
    578730, 
    582370, 
    584280, 
    588470, 
    590760, 
    594990, 
    598690, 
    602000, 
    604240, 
    609470, 
    613780, 
    617180, 
    623890, 
    627110, 
    631740, 
    635060, 
    637660, 
    640720, 
    644760, 
    646580, 
    650730, 
    654810, 
    656280, 
    658880, 
    662640, 
    665840, 
    668660, 
    672260, 
    676620, 
    679760, 
    683090, 
    687080, 
    690920, 
    694890, 
    696050, 
    700530, 
    702790, 
    706300, 
    709140, 
    710530, 
    713320, 
    715710, 
    716660, 
    720910, 
    724050, 
    725860, 
    728760, 
    731810, 
    733290, 
    736180, 
    739200, 
    743120, 
    745220, 
    748810, 
    751000, 
    752670, 
    755800, 
    759970, 
    762020, 
    763750, 
    767250, 
    772140, 
    776750, 
    777880, 
    780340, 
    783500, 
    787220, 
    791020, 
    792110, 
    796080, 
    798890, 
    802900, 
    805830, 
    807100, 
    809400, 
    811980, 
    814300, 
    816740, 
    820520, 
    822130, 
    824870, 
    826390, 
    829470, 
    831880, 
    833880, 
    836820, 
    841220, 
    845820, 
    850230, 
    851350, 
    857560, 
    861040, 
    864200, 
    866810, 
    871300, 
    875230, 
    876480, 
    881730, 
    883790, 
    886360, 
    890500, 
    893520, 
    895780, 
    898060, 
    899140, 
    900390
  ], 
  "text": [
    "ARMANDO FOX: OK, I think there's a little bit of preference for red, but", 
    "let's talk about each statement individually.", 
    "So, the controller under test is tightly coupled to the model.", 
    "Absolutely true, right?", 
    "We're reaching into the model and stubbing a method here.", 
    "It sounds kind of perverted or something, but we actually have", 
    "detailed knowledge of what the model is going to do.", 
    "The model is not the thing we're testing.", 
    "We're testing the controller, but we know it's going to call the model, and", 
    "we know the model is going to try to do something.", 
    "So, yes, these kinds of controller tests, if we change anything about how", 
    "the model does the job of finding whatever object in question here, then", 
    "we'd have to change the controller test too.", 
    "So yes, these tests are highly coupled to the model.", 
    "How about this, in a static language we'd have to use dependency injection", 
    "to achieve the same task.", 
    "You would, because in a static language you can't just sort of, with", 
    "impunity, stub and mock your way at runtime through all these things.", 
    "You actually have to provide some way to intercept the call at the class", 
    "level, and dependency injection solves exactly that problem.", 
    "It gives you a way by inserting a level of indirection, which as we know", 
    "is the solution to all computer science problems.", 
    "And at that level of indirection now you can say, OK, instead of providing", 
    "the real model I'm going to provide a fake model whose implementation to", 
    "find is to control what gets returned.", 
    "So in most testing frameworks in a static language you'd first have to", 
    "refactor to use DI in order to get this kind of testability.", 
    "By the way, that's an example of where some of these principles", 
    "originally come from.", 
    "If you could sort of mock and stub your way to testing success in any", 
    "language, it might not occur to you that the reason you're having to do", 
    "that is because you didn't insert a seam where you could have controlled", 
    "the behavior of your code at testing time.", 
    "Remember, if you reach way back to when we were talking about RSpec and", 
    "the great fun things that it lets you do, the reason that testing in Ruby", 
    "potentially can be so much fun than other languages is even if you don't", 
    "have a seam in your source code, you can create a seam using stubbing and", 
    "mocking at testing time.", 
    "But what dependency injection and some of the other solid principles say is,", 
    "look, maybe you should have had a seam there to begin with.", 
    "If you're finding that you have a difficulty in testing, maybe what it's", 
    "really telling you is that there would've been a reason to insert a", 
    "seam in your design as well.", 
    "So, in some sense, what you'll find is that the cost of not obeying some of", 
    "the solid principles is less obvious in Ruby and in a dynamic duck-typed", 
    "language than it would be in a statically typed language.", 
    "And sometimes where you see that is at testing time.", 
    "OK, onward to the last of the solid principles, and then we'll wrap up our", 
    "discussion of solid with some kind of higher level insights before we jump", 
    "into JavaScript.", 
    "The principle of Demeter.", 
    "Now, when I started talking about solid I mentioned that in the", 
    "traditional formulation of solid, dependency injection is the one that", 
    "goes with the letter D. The one that would have gone with the letter I is", 
    "interface segregation, which you can read a little bit about in the book.", 
    "I don't cover it here mainly because it comes up a lot less frequently in", 
    "Ruby than the Demeter principle does.", 
    "And so I've decided to give the Demeter principle first class status,", 
    "it gets the letter D.", 
    "You can summarize Demeter principle as, don't talk to strangers.", 
    "What does that mean in terms of classes that collaborate in an object", 
    "oriented design?", 
    "It means that if you're a member of some particular class, you can call", 
    "methods on yourself.", 
    "In other words, items in your own class.", 
    "You can call methods on your own instance variables.", 
    "So, for example, if I'm a square, one of my instance variables points to a", 
    "rectangle object, like the example we just saw.", 
    "I can call methods on the rectangle because the rectangle is directly one", 
    "of my instance variables.", 
    "But I shouldn't be calling methods on the results returned by either of", 
    "those things.", 
    "And again, if we do an example it'll be much easier to show than if we try", 
    "to explain our way through it.", 
    "So let's go straight to the videotape.", 
    "And this example is taken from Dan Manges's blog.", 
    "It's a pretty good example, so I just adapted it for use in the class.", 
    "So here's an implementation of a paperboy collecting", 
    "money from a customer.", 
    "We'll do an implementation that has Demeter violations and then you can", 
    "see what they look like, both in your source code and how they show up at", 
    "testing time.", 
    "You might be starting to get the message that a lot of things that", 
    "might be structurally wrong with your code will show up when", 
    "you try to do testing.", 
    "So we have a simple wallet which has a cash attribute, we have a customer and", 
    "the customer has a wallet, and now we have a paperboy who's going to try to", 
    "collect money from the customer in some amount.", 
    "So, here is where the Demeter violation is", 
    "happening in this example.", 
    "Why?", 
    "Well, the paperboy collaborates directly with the customer, so it's OK", 
    "to call a method on the customer attribute, but we're also reaching", 
    "through the wallet to call a method on it.", 
    "In other words, I'm sort of one degree of freedom removed from wallet, yet", 
    "I'm exploiting knowledge about a method that it has in order to do the", 
    "withdrawal.", 
    "So this is the classic Demeter violation, and you can see why, in a", 
    "language like Ruby where you can do method chaining with dots, it's easy", 
    "to fall into this trap of writing a.b.c.d and you realize that the", 
    "paperboy class really has no business being in my wallet, so to speak.", 
    "And by the way, what happens if you try to test this code?", 
    "Well, you realize that if you were going to test this method, if you're", 
    "going to test the collect money method, then at some point the method", 
    "is going to try to do this customer.wallet.cash.", 
    "So what does that mean in terms of a test?", 
    "It means you've got to have a paperboy who has a valid customer object, or at", 
    "least one that you can mock out.", 
    "The customer, well, you're going to reach through the customer to the", 
    "customer's wallet, so we have to mock that.", 
    "And we have to give the wallet a cash attribute so that when wallet.cash", 
    "gets called it can respond to the method and return something.", 
    "So, we've got to do these two mocks just to get to the point where we can", 
    "call our method.", 
    "This is what's called a mock train wreck, if you remember back when we", 
    "talked about mocks and stubs.", 
    "And it's a pretty good sign that there's a Demeter", 
    "violation in your code.", 
    "You've got a method the knows way too much about classes that are not", 
    "directly its friends.", 
    "So, what's a way to fix this?", 
    "Well, let's go back to our two principles.", 
    "One of them is delegation and composition, can often solve these", 
    "kinds of problems.", 
    "So here's another version where the customer has a cash method which is", 
    "just delegated to the wallet.", 
    "This is arguably somewhat better because now I still can talk to the", 
    "customer, right?", 
    "I can call methods on customer because I collaborate directly with it.", 
    "But I don't need to reach through the customer to call something on wallet", 
    "because the customer has delegated that.", 
    "In other words, if the implementation of the customer's wallet changes, my", 
    "paperboy class would be immune to that change because all I'm depending on is", 
    "that this method is defined on customer.", 
    "This is a really, really common solution, but we can actually do", 
    "somewhat better.", 
    "In the best version of this, we delegate the entire behavior.", 
    "So now we still have a wallet, it still has some cash, but it doesn't", 
    "provide a way to set that amount.", 
    "It provides a way to manipulate it through an external method.", 
    "So now the customer class can define a method that has to explicitly invoke a", 
    "behavior on the wallet.", 
    "So now even customer doesn't have access to the attribute directly.", 
    "This is even better because now I can change the implementation of", 
    "withdrawal.", 
    "For example, if I'm running a credit, a net positive credit, I can change", 
    "the implementation of withdrawal to just reduce that number, and the", 
    "customer would never have to know about it.", 
    "So, in the first example the first fix was, we sort of delegated manipulation", 
    "of the attribute, but the better solution is we also converted into a", 
    "behavior and then we delegate the entire behavior.", 
    "And now the mock train wreck is also gone, because if I'm testing paperboy", 
    "all I have to do is stub this method and make it behave the way I want for", 
    "my different tests.", 
    "And usually you can tell when you clean up a Demeter violation, your", 
    "test gets simpler too.", 
    "You can remove a whole bunch of stubbing and mocking, and it kind of", 
    "makes you feel good that your test got simpler.", 
    "So, what we did in that example is we replaced a method with a delegate.", 
    "And then after that we also improved on the delegate by delegating the", 
    "behavior instead of just delegating access to the attribute.", 
    "But there's other examples that we've seen both in Ruby and Rails, and also", 
    "that you come across all the time in a variety of different systems.", 
    "One of them is what's called a visitor design pattern, which basically means", 
    "separate traversal from computation.", 
    "I have a data structure and I want to traverse it and do something with each", 
    "element or at each node of that data structure.", 
    "For example, a tree.", 
    "I want to say, here's the thing I want to do at each node of this tree, but I", 
    "don't want to know the details of how the tree is implemented.", 
    "I want somebody else to deal with the concept of traversal.", 
    "This is often called the visitor design pattern, and we've actually", 
    "seen it so many times that we don't realize we've seen it.", 
    "Each is an example of this.", 
    "If you defined your own tree data structure, you could define each in", 
    "such a way that it knows how to traverse the tree, and you would just", 
    "have to worry about anybody who wants to do something with the tree would", 
    "just have to get tree nodes back and visit them.", 
    "And another one that we'll see an example of momentarily is, you need to", 
    "be aware of important events in some other class, but you don't want to", 
    "know the details of how and why those events are triggered.", 
    "Let's take a look at that.", 
    "The observer pattern which is, I wouldn't say that it's directly", 
    "involved in every Demeter violation repair, but it's another way to", 
    "isolate one class from the details of how another class is implemented,", 
    "which is the essence of what Demeter is about.", 
    "The problem here is you have an observer entity that wants to know", 
    "when something's happened to a subject, but it doesn't really want to", 
    "know a lot of details about how the subject is implemented or why those", 
    "actions are triggered.", 
    "So the idea is that you don't want to pollute the subject with the", 
    "implementation of the events and vice versa.", 
    "You don't want the events to have to know how the subject is implemented,", 
    "and because any type of object could potentially be an observer or subject,", 
    "this is clearly an awkward thing to try to solve with inheritance.", 
    "So, here's kind of what it looks like.", 
    "You've got a subject and the idea is the subject decides to implement an", 
    "observable interface, which means that it keeps a list of observers.", 
    "The observers get updated whenever interesting things happen in the", 
    "subject, and you can define as part of your observer, which kinds of actions,", 
    "or which methods in the subject will trigger an update call.", 
    "The observer allows for the update method to be overridden so that you", 
    "can actually take whatever action was appropriate when the", 
    "event of interest happens.", 
    "Some example use cases of this that might come up in a SaaS application", 
    "is, for example, imagine a blog application like the one that's the", 
    "subject of homework five.", 
    "You could also imagine that there's a full text indexer that every time a", 
    "new blog post is created, or one is edited, that you would want to be able", 
    "to index that new post.", 
    "So, you don't really want to know the implementation of posts or all the", 
    "different places where a post could be updated, but when a post is updated", 
    "you want to know about it so that you can run some extra code that updates a", 
    "full text index somewhere.", 
    "Another possibility is one of the controllers, or a few of the", 
    "controllers, in your application allow sensitive actions like spending money", 
    "or refunding a customer, and you want to know whenever those sensitive", 
    "actions happen so you can record who was logged in at the time.", 
    "So again, you don't want the details on what code paths could those actions", 
    "happen, you just want to be notified when they do.", 
    "An example that we see in Rails is maintaining relational integrity in", 
    "the database.", 
    "Again, I'll use an example from real life, at least my real life, debatable", 
    "how real that is on some days.", 
    "But one problem we have is we get a customer calling up and saying, I", 
    "don't like you guys anymore, I want to be not just taken off your mailing", 
    "list, I want to be expunged.", 
    "I want to not ever have existed in your system.", 
    "I don't know what drives people to such vitriol, but sometimes we get", 
    "those calls.", 
    "So the problem, from our point of view, is that because customers own", 
    "transactions, they've bought things, sometimes they've even donated money", 
    "before deciding they hate us.", 
    "So we can't actually just delete them wholesale, because that would delete", 
    "all of the transactions that goes with them, and that would", 
    "unbalance the books.", 
    "On the other hand, the transactions have to be owned by somebody, so the", 
    "logical thing for us is we have a concept of the unknown customer.", 
    "It's kind of like a null object, except it's this magical person who,", 
    "over time, has bought thousands of things.", 
    "Because whenever somebody asks to be expunged, we essentially merge", 
    "everything they've ever done with the unknown customer.", 
    "So, how do we do that?", 
    "Well, the observer pattern is so useful for SaaS applications with", 
    "multiple models that active record actually provides built in hooks to", 
    "use the observer design pattern without you having", 
    "to write extra code.", 
    "There's an active record observer module, or class, from which you can", 
    "inherit, and all I have to say is which class do I want to observe.", 
    "And, in fact, if I use the convention of something or other observer, then I", 
    "don't even have to say this.", 
    "Rails will infer it by introspecting on the name of the class.", 
    "But in the example I'm saying it just to be clear.", 
    "And now I can add additional life cycle hooks.", 
    "Remember we saw the life cycle hooks like before destroy, before save,", 
    "after save.", 
    "Now all the ones in customer will still be run, but in addition, I can", 
    "define hooks of my own that get run by the observer.", 
    "So whenever a customer is about to be destroyed, before the destroy happens,", 
    "I can take the necessary actions to grab all their transactions and merge", 
    "them into someone else.", 
    "So this is a really nice example of observer.", 
    "Another example we're going to see when we talk about performance is that", 
    "this is also how you do caching in Rails.", 
    "If you want to cache an object, one of the important things you need to know", 
    "about is, when does my cached copy become invalid because the original", 
    "object has changed out from under it.", 
    "And hopefully you could almost finish the story for me", 
    "with what you've seen.", 
    "And then lastly, just as a matter of mechanics, if you're going to use this", 
    "you have to declare which observers you're going to use in your", 
    "environment.rb, so don't forget.", 
    "OK, so here's a question about Demeter.", 
    "Suppose we have a relationship that order belongs to a customer and", 
    "there's some view where it's printing out a table and we see this.", 
    "We see order.customer.name So the question is, is this a violation of", 
    "the Demeter principle?", 
    "One possible answer is, yeah, but it's a view and a view is about exposing", 
    "relationships between objects, so it's probably OK in this case.", 
    "Technically it's a violation, but it's an acceptable one because the purpose", 
    "of a view is to visualize those relationships.", 
    "Another answer is yes, this is absolutely a violation and you should", 
    "define a new method in order, let's say customer name, which just", 
    "delegates to this method.", 
    "That would hide the implementation of customer.name from the", 
    "implementation of order.", 
    "I'm giving you a way to weasel out and say that you could make a case for", 
    "either of those, or you could say, actually, no this isn't really a", 
    "Demeter violation, because the fact that we've expressed it belongs to", 
    "relationship means we're already exposing information about the", 
    "customer, so this is not an issue.", 
    "Not an issue here.", 
    "So, think about that for a moment."
  ]
}