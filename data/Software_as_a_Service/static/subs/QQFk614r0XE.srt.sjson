{
  "start": [
    820, 
    3237, 
    5970, 
    6170, 
    9400, 
    11580, 
    13990, 
    15430, 
    18210, 
    20910, 
    21050, 
    22330, 
    23730, 
    25410, 
    27540, 
    31320, 
    34550, 
    37230, 
    38110, 
    41470, 
    42360, 
    44430, 
    47070, 
    50560, 
    51550, 
    53820, 
    55910, 
    58850, 
    60240, 
    60550, 
    63400, 
    65540, 
    68710, 
    71640, 
    72690, 
    76370, 
    77430, 
    79900, 
    84080, 
    87310, 
    91220, 
    92460, 
    95860, 
    99570, 
    100650, 
    103110, 
    106500, 
    107470, 
    110400, 
    111610, 
    114640, 
    117790, 
    121160, 
    124390, 
    126750, 
    130470, 
    131420, 
    135690, 
    137220, 
    140320, 
    142260, 
    144940, 
    147850, 
    150860, 
    154300, 
    154710, 
    157620, 
    161400, 
    165290, 
    165780, 
    167630, 
    172190, 
    175000, 
    178210, 
    181580, 
    183760, 
    186090, 
    187320, 
    193020, 
    196190, 
    198780, 
    201590, 
    204470, 
    208890, 
    211910, 
    213690, 
    215930, 
    218820, 
    222430, 
    223360, 
    226290, 
    229810, 
    233260, 
    236130, 
    236900, 
    239690, 
    239890, 
    241880, 
    243420, 
    245590, 
    248520, 
    248970, 
    252560, 
    255270, 
    257690, 
    260690, 
    264290, 
    266620, 
    268190, 
    269890, 
    273520, 
    275640, 
    278270, 
    281080, 
    284060, 
    287290, 
    290780, 
    293880, 
    298590, 
    301230, 
    305330, 
    309890, 
    310760, 
    312730, 
    316580, 
    317500, 
    318360, 
    321590, 
    326260, 
    329210, 
    330420, 
    333350, 
    339000, 
    343190, 
    345310, 
    348700, 
    351790, 
    356790, 
    360260, 
    361950, 
    365280, 
    366930, 
    367060, 
    369620, 
    372410, 
    375500, 
    377640, 
    380190, 
    382930, 
    384020, 
    388120, 
    391900, 
    394190, 
    396900, 
    399770, 
    401470, 
    404160, 
    407470, 
    411110, 
    412170, 
    415510, 
    418280, 
    421400, 
    425020, 
    428290, 
    428930, 
    432130, 
    433280, 
    436550, 
    439970, 
    441240, 
    444510, 
    446460, 
    449900, 
    451840, 
    453170, 
    456330, 
    460180, 
    462210, 
    464230, 
    466820, 
    469650, 
    471860, 
    472130, 
    475710, 
    477660, 
    480530, 
    484780, 
    485310, 
    489040, 
    491560, 
    494280, 
    496960, 
    500510, 
    503450, 
    506640, 
    509210, 
    511820, 
    513779, 
    516330, 
    520080, 
    522020, 
    522270, 
    524380, 
    528650, 
    531640, 
    532690, 
    537540, 
    542110, 
    544770, 
    546260, 
    548630, 
    549710, 
    551290, 
    553430, 
    555230, 
    556990, 
    559440, 
    561150, 
    565470, 
    568490, 
    568660, 
    572520, 
    575550, 
    578350, 
    581980, 
    584500, 
    586440, 
    590610, 
    595280, 
    598920, 
    602150, 
    603560, 
    606490, 
    611950, 
    616570, 
    621400, 
    622460, 
    622770, 
    624490, 
    626550, 
    629750, 
    633830, 
    638510, 
    642330, 
    645630, 
    647700, 
    651580, 
    653590, 
    656350, 
    657550, 
    659040, 
    661820, 
    663000, 
    666090, 
    668010, 
    668730, 
    672670, 
    674360, 
    677140, 
    679330, 
    681970, 
    683480, 
    687790, 
    689430, 
    692300, 
    694810, 
    696850, 
    698900, 
    702850, 
    704120, 
    708240, 
    711390, 
    714140, 
    714980, 
    717060, 
    720030, 
    723100, 
    726990, 
    730810, 
    733170, 
    736350
  ], 
  "end": [
    3237, 
    5970, 
    6170, 
    9400, 
    11580, 
    13990, 
    15430, 
    18210, 
    20910, 
    21050, 
    22330, 
    23730, 
    25410, 
    27540, 
    31320, 
    34550, 
    37230, 
    38110, 
    41470, 
    42360, 
    44430, 
    47070, 
    50560, 
    51550, 
    53820, 
    55910, 
    58850, 
    60240, 
    60550, 
    63400, 
    65540, 
    68710, 
    71640, 
    72690, 
    76370, 
    77430, 
    79900, 
    84080, 
    87310, 
    91220, 
    92460, 
    95860, 
    99570, 
    100650, 
    103110, 
    106500, 
    107470, 
    110400, 
    111610, 
    114640, 
    117790, 
    121160, 
    124390, 
    126750, 
    130470, 
    131420, 
    135690, 
    137220, 
    140320, 
    142260, 
    144940, 
    147850, 
    150860, 
    154300, 
    154710, 
    157620, 
    161400, 
    165290, 
    165780, 
    167630, 
    172190, 
    175000, 
    178210, 
    181580, 
    183760, 
    186090, 
    187320, 
    193020, 
    196190, 
    198780, 
    201590, 
    204470, 
    208890, 
    211910, 
    213690, 
    215930, 
    218820, 
    222430, 
    223360, 
    226290, 
    229810, 
    233260, 
    236130, 
    236900, 
    239690, 
    239890, 
    241880, 
    243420, 
    245590, 
    248520, 
    248970, 
    252560, 
    255270, 
    257690, 
    260690, 
    264290, 
    266620, 
    268190, 
    269890, 
    273520, 
    275640, 
    278270, 
    281080, 
    284060, 
    287290, 
    290780, 
    293880, 
    298590, 
    301230, 
    305330, 
    309890, 
    310760, 
    312730, 
    316580, 
    317500, 
    318360, 
    321590, 
    326260, 
    329210, 
    330420, 
    333350, 
    339000, 
    343190, 
    345310, 
    348700, 
    351790, 
    356790, 
    360260, 
    361950, 
    365280, 
    366930, 
    367060, 
    369620, 
    372410, 
    375500, 
    377640, 
    380190, 
    382930, 
    384020, 
    388120, 
    391900, 
    394190, 
    396900, 
    399770, 
    401470, 
    404160, 
    407470, 
    411110, 
    412170, 
    415510, 
    418280, 
    421400, 
    425020, 
    428290, 
    428930, 
    432130, 
    433280, 
    436550, 
    439970, 
    441240, 
    444510, 
    446460, 
    449900, 
    451840, 
    453170, 
    456330, 
    460180, 
    462210, 
    464230, 
    466820, 
    469650, 
    471860, 
    472130, 
    475710, 
    477660, 
    480530, 
    484780, 
    485310, 
    489040, 
    491560, 
    494280, 
    496960, 
    500510, 
    503450, 
    506640, 
    509210, 
    511820, 
    513779, 
    516330, 
    520080, 
    522020, 
    522270, 
    524380, 
    528650, 
    531640, 
    532690, 
    537540, 
    542110, 
    544770, 
    546260, 
    548630, 
    549710, 
    551290, 
    553430, 
    555230, 
    556990, 
    559440, 
    561150, 
    565470, 
    568490, 
    568660, 
    572520, 
    575550, 
    578350, 
    581980, 
    584500, 
    586440, 
    590610, 
    595280, 
    598920, 
    602150, 
    603560, 
    606490, 
    611950, 
    616570, 
    621400, 
    622460, 
    622770, 
    624490, 
    626550, 
    629750, 
    633830, 
    638510, 
    642330, 
    645630, 
    647700, 
    651580, 
    653590, 
    656350, 
    657550, 
    659040, 
    661820, 
    663000, 
    666090, 
    668010, 
    668730, 
    672670, 
    674360, 
    677140, 
    679330, 
    681970, 
    683480, 
    687790, 
    689430, 
    692300, 
    694810, 
    696850, 
    698900, 
    702850, 
    704120, 
    708240, 
    711390, 
    714140, 
    714980, 
    717060, 
    720030, 
    723100, 
    726990, 
    730810, 
    733170, 
    736350, 
    738280
  ], 
  "text": [
    "ARMANDO FOX: According to everything I've just said, either I'm a liar, or", 
    "your imagining things, or nothing's happening in line three.", 
    "Right?", 
    "No database query is actually happening here.", 
    "This is a pretty important piece of information because later, when we", 
    "talk about caching, this will become very important.", 
    "So what's going on in the view?", 
    "Well remember, what's the goal of each?", 
    "Each is here's a thing that is innumerable.", 
    "Right?", 
    "It's not an array, remember?", 
    "It quacks like an array.", 
    "That means that it responds to each.", 
    "It knows how to enumerate elements of itself.", 
    "If you were the instance variable m and you have been lazy and not", 
    "actually queried the database up to this point, now you have to query it", 
    "because somebody is asking you, OK, what's the first element of this", 
    "collection?", 
    "Now you have to force the evaluation of the thunk and go to the database", 
    "and get the first movie.", 
    "And well, while you're at it, you might as well get all of them because", 
    "it's really just one query that's being performed, right?", 
    "But the evaluation of the query is deferred to this point when you ask", 
    "for the first one.", 
    "At this point, you have done all the work.", 
    "So line seven is going to--", 
    "once you've done this one database query in line six, you never have to", 
    "hit the database again.", 
    "Right?", 
    "There's a single query that has been delayed until this point.", 
    "This is really, really, really important for two reasons.", 
    "First of all, like we showed, you can stack up these scopes and you can", 
    "build up pretty complicated queries out of little pieces, right?", 
    "Like LEGO blocks.", 
    "That is a really, really nifty ability that would not work without good lazy", 
    "evaluation.", 
    "The second one, which we're going to see later in the course when we talk", 
    "about caching, is because this doesn't actually occur until the view.", 
    "Suppose we had a way of detecting that we don't actually have to re-render", 
    "the view because the information that the view depends on-- in other words,", 
    "the good_movies_for_kids--", 
    "if we could promise that that information hasn't changed since the", 
    "last time we rendered this view, then we actually could just serve the", 
    "previous copy of the view.", 
    "We don't have to go through the rendering step again, we could just", 
    "pick up a cached copy of the view that already has all the HTML and just", 
    "return that.", 
    "In that scenario, the database is never, ever touched.", 
    "Isn't that cool?", 
    "In that scenario, the controller action will not touch the database", 
    "because it'll just build up a relation that could answer the query.", 
    "And the view won't be rendered because the caching subsystem will say, oh,", 
    "the information the view depends on hasn't changed, I'll just take the", 
    "cached copy of the view that I rendered last time.", 
    "So from a programmer's point of view, you can still think of it in terms of", 
    "models used controller.", 
    "The flow is the same, but you get the performance benefit of not doing a", 
    "needless database access.", 
    "And when we talk about caching, we'll talk about how specifically could you", 
    "guarantee that the information hasn't changed.", 
    "But yes, at this point, you should be smiling if you're a geek because this", 
    "is a beautiful, beautiful feature of Rails 3.", 
    "And more importantly, it's an illustration of how the combination of", 
    "higher order functions and delayed evaluation actually has real value.", 
    "Right?", 
    "It's got programmer value because you can build up complicated queries in", 
    "pieces, and it's got performance value because, as we'll see later in the", 
    "course, you can take advantage of the laziness to possibly avoid evaluating", 
    "altogether.", 
    "The ultimate laziness.", 
    "OK, we've only really scratched the surface of one of the major chunks of", 
    "Rails, which is associations.", 
    "But a thing that I want to come back to that we said very early on in the", 
    "course is that the concept of associating models with each other,", 
    "that's a statement about the application architecture.", 
    "It is not a statement about the storage system.", 
    "Right?", 
    "The discussion we had last time was trying to relate the ways that Rails", 
    "provides for you to manipulate associations in Ruby versus the ways", 
    "you have to represent those in the database using foreign keys.", 
    "So those are separable concepts.", 
    "In the case of Rails, because it was designed to work with a relational", 
    "database, relational databases have this ability of using foreign keys to", 
    "represent associations between tables, and active record takes", 
    "advantage of that fact.", 
    "In a moment, we'll see that that's not the only to do it.", 
    "There are other ways to do it that have pros and cons.", 
    "We also just saw an example of proxy methods.", 
    "Right?", 
    "When I originally asked, what does movie.forkids return?", 
    "And the first answer was, it returns an array of movies, no it doesn't.", 
    "It returns something that quacks like an array of movies, which means you", 
    "could do anything to it that you could do to an array and expect", 
    "the sensible result.", 
    "But it's not really an array, it hasn't even been materialized yet.", 
    "Right?", 
    "And if you do remember this stuff from 61A--", 
    "I didn't know that they called them \"thunks,\" but you", 
    "did learn this concept.", 
    "So proxy methods are used for all of the association behaviors.", 
    "Right?", 
    "Movie.reviews is not an array, it is a thing that you can ask to enumerate", 
    "itself, and that's a subtle difference.", 
    "And when we talk about design patterns, we'll see that this is", 
    "actually a much more broadly applicable strategy that you can use", 
    "when you need to do lazy evaluation or when you want to hide something behind", 
    "an interface, make it look like something you already", 
    "are familiar with.", 
    "We talked about nested routes.", 
    "This is a feature that Rails provides so that you don't have to do common", 
    "cases by hand, but they're optional, right?", 
    "As long as you arrange for the right foreign keys to be filled in when you", 
    "create the objects, you don't have to use the nested routes.", 
    "They are there only as a convenience.", 
    "Let's talk about a different way of doing things because now you know", 
    "enough about associations and how they work to appreciate the difference", 
    "between relying on a relational database versus not.", 
    "When we say-- you know, in our apps, when we use the active record", 
    "associations to dereference collections of things, like all", 
    "reviews belonging to a movie, what we saw is that that turns into a database", 
    "query that joins two tables and grabs the ones where the foreign key matches", 
    "the primary key.", 
    "We walked through an example of this.", 
    "But we've sort of been taking for granted that relational databases are", 
    "designed to do that.", 
    "That's what they do.", 
    "That was the reason that Ted Codd won the Turing Award is for coming up with", 
    "this model which has been implemented with very good engineering behind it.", 
    "But there are some problems with relational databases when it comes to", 
    "very high scale.", 
    "In particular, it's possible to arrange your associations in such a", 
    "way that, eventually, the update cost becomes too large to sustain the kind", 
    "of throughput you need for millions of users and/or the database becomes too", 
    "large to sustain that update rate.", 
    "And that's motivated people to look at non-relational databases, so-called", 
    "NoSQL databases if you've seen that term in the literature.", 
    "One example of such a database is what is behind Google AppEngine.", 
    "And Google AppEngine provides a library you can use that implements", 
    "not Active Record, but Data Mapper.", 
    "Data Mapper is a different way of thinking about how to map things in a", 
    "programming language to things in storage.", 
    "Right?", 
    "Because at the end of the day, that's what Active Record does for us.", 
    "It gives us a way to map things in our language, like objects and", 
    "collections, to their representations in a particular kind of storage", 
    "system, namely relational database.", 
    "But suppose we were using a non-relational database.", 
    "It doesn't have the concept of automatically doing joins based on", 
    "foreign keys.", 
    "It has the concept of tables, but essentially, because I don't have", 
    "foreign keys in the database, I would have to create application logic on my", 
    "own that does what those queries would do.", 
    "If I want to find all the reviews belonging to a movie, I would have to", 
    "have logic that knows how the reviews table is organized and is able to", 
    "manually do that, so to speak.", 
    "I could no longer rely on the database to do it for me.", 
    "That is an example of a different design pattern called Data Mapper", 
    "where every class has a mapper that knows how to do operations relevant to", 
    "that class.", 
    "So the movie mapper would know how to retrieve all the reviews that came", 
    "with a movie if you've established that relationship, but it has to", 
    "actually have code in it that traverses the association itself", 
    "because the underlying database isn't relational, it probably can't do it.", 
    "It's not to say that non-relational databases support no type of", 
    "associations.", 
    "There are some simple ones that are supported, but they're not as general", 
    "as relational databases.", 
    "Now if so, why would you ever use this?", 
    "Well, because these databases don't support arbitrary associations, they", 
    "actually can scale much better.", 
    "You can make them much larger in overall size and still get very good", 
    "performance for reads and writes.", 
    "And you can sustain that performance out to a scale that's much greater", 
    "than what you could do with a relational database.", 
    "So this is a trade-off, right?", 
    "If your application's needs are small enough to fit into the largest", 
    "relational database, you get to enjoy the wonderful power of queries that", 
    "let you represent relationships entirely.", 
    "Make that the database's responsibility.", 
    "If that's not an option for you, then you've got to do this.", 
    "And now it's complicated because associations don't just work anymore.", 
    "You've got to write the code that makes them work.", 
    "OK?", 
    "So this is one of the examples of it's always been the case that people sort", 
    "of start out with a relational database.", 
    "Services are now large enough that many of the large services have gone", 
    "to some combination of relational plus NoSQL, but this is the trade-off.", 
    "Right?", 
    "All the things that SQL gives you and that relational model gives you, you", 
    "need to be prepared to give up those things.", 
    "You have to understand what's the cost of giving up those things.", 
    "And the methods that we've just talked about for associations are a very", 
    "clear example of if you have those things, how elegant it can be to sort", 
    "of meld that into your programing model.", 
    "We haven't talked about referential integrity, but this refers simply to", 
    "the question of suppose we delete a movie that has reviews.", 
    "What ought to happen to those reviews?", 
    "One possibility is that--", 
    "and the problem is if we just delete the movie and we don't touch the", 
    "reviews table, we'll now have a bunch of reviews whose movie_id field refers", 
    "to a non-existent entry in the movies table.", 
    "Right?", 
    "Because primary keys are never reused.", 
    "So one possibility is you could say, well, if you delete a movie, then the", 
    "right behavior is to also delete all of its reviews.", 
    "That's one possibility.", 
    "And because it's a common case, Rails provides a common case syntax so that", 
    "when you set up your association, you can decide what's going to happen.", 
    "Another one would be, well, the reviews will exist, but they just", 
    "won't be associated with a movie.", 
    "I don't know if that's sensible in this app, but there are cases when", 
    "that might be sensible.", 
    "So that's another shortcut you get.", 
    "There's a handful of others that you can do, too.", 
    "And by the way, how are these implemented?", 
    "They're implemented in terms of the model lifecycle.", 
    "Remember there's all these points in the life of a model where you can", 
    "intervene and do stuff?", 
    ":dependent-:destroy just says when a review is about to be destroyed, also", 
    "go through and destroy all of the movies that it depends on.", 
    "Right?", 
    "So it actually uses a built-in mechanism to do this built-in job.", 
    "But from your point of view, you have to make some decision.", 
    "So if you have a has_many relationship and there's a possibility that the", 
    "owning object could get deleted, you need to decide what's the appropriate", 
    "thing to happen to the owned objects, and you need to express", 
    "that in your code.", 
    "And you can also, if you don't want to use these common cases, for example,", 
    "one possibility is let's talk about a blogging system or something, right?", 
    "If I delete an author, maybe what should happen is all of the posts that", 
    "were by that author are now attributed to the anonymous author.", 
    "And that's fine.", 
    "There's no shortcut for me to do that, but I could certainly write a destroy", 
    "hook that plugs into the lifecycle of the author so that when an author is", 
    "about to be destroyed, I grab all of his or her reviews and I reassign the", 
    "author ID key to be some entity that represents the anonymous author or God", 
    "or something like that.", 
    "OK?", 
    "So you could do that, too.", 
    "And by the way, you can test for this.", 
    "Given that you have to test whatever your choice was, right?", 
    "Suppose we made the choice that when a review is deleted, all of its movies", 
    "get deleted, I could write an RSpec test where I create a movie, I create", 
    "some reviews that go along with it, I grab a hold of the reviews ID because", 
    "as soon as I destroy the movies, if everything's working correctly, the", 
    "reviews ID will actually get nulled out.", 
    "And after I destroy the movie, I can assert that trying to find the old", 
    "review_ID should give me an error.", 
    "The other thing I could do is I could have said, review.find by", 
    "ID should be nil.", 
    "That would also work.", 
    "I just like the idea of throwing an exception because it's kind of like a", 
    "macho way to do the test.", 
    "If it's working right, then you'll raise an exception, dammit.", 
    "OK.", 
    "A few advanced--", 
    "like I said, associations are really what a lot of the power of Active", 
    "Record is about.", 
    "Some topics we haven't talked about but you may find appropriate for your", 
    "project, single-table inheritance.", 
    "If you have a good reason to use inheritance because you have closely", 
    "related classes in your app--", 
    "for example, user is a base class, but administrative user and regular user", 
    "might subclass from it--", 
    "there's a really nice mechanism that allows you to have two different", 
    "models that actually share the same table and are only", 
    "different in a few columns.", 
    "You can have self-referential has_manys.", 
    "So if you're a person, you can also be associated with other people because", 
    "you have friends.", 
    "And there's machinery in place to prevent infinite recursion.", 
    "Just like with validations, if you look at the associations", 
    "documentation, there's a lot of options on how you manipulate them and", 
    "set them up.", 
    "Almost anything you can think of that you would want to do on the", 
    "association is probably already supported at some level.", 
    "And before writing code, you should take a good scan through the", 
    "documentation and see if what you want to do you might already be supported.", 
    "You could start with the Ruby on Rails guides, or if you own \"The Rails Way,\"", 
    "which is a book that you can carry around to increase your bicep", 
    "strength, there's an entire chapter just on associations.", 
    "And it's very well written, pretty much encyclopedic."
  ]
}