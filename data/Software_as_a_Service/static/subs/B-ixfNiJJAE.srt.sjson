{
  "start": [
    0, 
    1360, 
    4360, 
    5740, 
    7850, 
    9610, 
    13670, 
    16600, 
    18130, 
    18810, 
    22180, 
    24680, 
    25980, 
    29400, 
    33140, 
    34730, 
    37410, 
    40750, 
    43850, 
    46400, 
    47910, 
    51460, 
    54030, 
    56550, 
    59700, 
    60340, 
    63650, 
    65940, 
    69630, 
    71570, 
    76020, 
    78560, 
    80950, 
    85030, 
    86670, 
    90410, 
    93650, 
    95450, 
    96970, 
    99920, 
    103210, 
    106250, 
    108630, 
    111210, 
    112660, 
    114110, 
    116540, 
    119320, 
    121980, 
    126210, 
    129590, 
    131060, 
    132200, 
    134140, 
    135350, 
    137740, 
    139010, 
    142920, 
    143980, 
    145170, 
    145800, 
    147480, 
    152230, 
    154550, 
    155060, 
    158940, 
    162790, 
    164160, 
    165320, 
    165820, 
    168050, 
    169210, 
    171900, 
    175020, 
    177920, 
    179350, 
    180740, 
    182100, 
    182970, 
    185740, 
    187710, 
    189330, 
    190490, 
    192130, 
    195740, 
    197170, 
    198050, 
    201460, 
    204300, 
    205110, 
    207750, 
    209050, 
    210010, 
    211510, 
    214830, 
    218150, 
    221230, 
    223650, 
    226690, 
    227800, 
    231200, 
    234340, 
    237760, 
    238720, 
    241660, 
    243260, 
    244490, 
    247280, 
    250580, 
    251570, 
    254170, 
    257560, 
    259209, 
    261220, 
    263940, 
    266810, 
    270670, 
    273310, 
    274570, 
    278700, 
    282860, 
    286500, 
    288080, 
    292740, 
    294490, 
    296320, 
    300080, 
    304000, 
    307510, 
    310810, 
    313800, 
    317670, 
    320560, 
    323640, 
    328000, 
    329150, 
    331940, 
    335630, 
    339520, 
    343220, 
    345690, 
    349370, 
    352870, 
    356700, 
    358720, 
    362060, 
    365560, 
    369490, 
    376690, 
    378260, 
    381290, 
    385210, 
    387550, 
    390370, 
    391300, 
    394680, 
    396740, 
    399160, 
    399750, 
    400590, 
    402550, 
    404050, 
    405960, 
    409730, 
    410650, 
    414680, 
    416470, 
    418140, 
    422200, 
    424790, 
    426100, 
    427900, 
    430730, 
    433240, 
    438780, 
    441150, 
    442710, 
    446770, 
    449070, 
    451200, 
    453980, 
    456670, 
    459560, 
    463870, 
    465350, 
    470120, 
    470900, 
    472790, 
    474380, 
    476010, 
    478610, 
    482000, 
    483860, 
    488870, 
    490470, 
    491940, 
    495560, 
    497170, 
    500300, 
    503080, 
    506380, 
    510390, 
    512159, 
    517320, 
    520840, 
    523400, 
    525970, 
    527870, 
    530160, 
    531480, 
    533690, 
    534880, 
    536360, 
    539380, 
    542210, 
    543410, 
    546370, 
    549220, 
    552800, 
    555580, 
    557290, 
    560180, 
    561910, 
    566590, 
    569920, 
    572540, 
    577250, 
    580770, 
    582940, 
    585000, 
    588230, 
    591990, 
    593910, 
    597940, 
    601500, 
    603110, 
    606870, 
    610450, 
    612250, 
    613860, 
    617540, 
    619110, 
    622430, 
    623690, 
    627500, 
    631460, 
    632510, 
    636100, 
    638680, 
    641570, 
    644590, 
    647670, 
    651440, 
    654680, 
    656760, 
    658020, 
    659140, 
    662000, 
    663820, 
    665450, 
    669040, 
    672240, 
    675750, 
    677390, 
    680470, 
    684290, 
    688040, 
    689380, 
    692120, 
    695820, 
    698560, 
    700030, 
    703050, 
    705780, 
    707980, 
    710930, 
    713740, 
    715850, 
    717800, 
    721470, 
    724940, 
    727850, 
    732630, 
    734380, 
    735320, 
    738700, 
    740110, 
    742510, 
    743870, 
    747510, 
    750080, 
    752610, 
    756600, 
    758340, 
    760730, 
    764390, 
    765840, 
    768790, 
    772120, 
    776250, 
    777780, 
    779600, 
    781590, 
    784450, 
    786050, 
    787350, 
    790410, 
    795480, 
    798170, 
    801950, 
    805630, 
    807150, 
    809990, 
    813020, 
    814180, 
    815930, 
    818720, 
    820730, 
    821480, 
    822510, 
    824390, 
    825380, 
    828240, 
    830460, 
    835310, 
    836840, 
    841860, 
    845210, 
    846600, 
    848470, 
    852200, 
    853620, 
    854860, 
    858260, 
    861030, 
    864460, 
    866890, 
    868400, 
    872470, 
    873780, 
    875950, 
    878055, 
    880230, 
    881660, 
    886520, 
    888140, 
    891650, 
    894240, 
    896000, 
    900070, 
    901380, 
    904430, 
    905520, 
    909060, 
    914720, 
    919010, 
    921230, 
    922960, 
    924910, 
    927580, 
    929440, 
    932890, 
    934160, 
    935450, 
    936780, 
    938840, 
    940000, 
    943690, 
    945160, 
    948870, 
    950160, 
    952940, 
    956550, 
    959190, 
    962300, 
    963430, 
    966760, 
    969170, 
    972820, 
    974390, 
    975600, 
    978290, 
    980900, 
    983180, 
    986010, 
    989040, 
    991730, 
    993300, 
    995100, 
    998020, 
    1001190, 
    1004370, 
    1005840, 
    1008120, 
    1010900, 
    1014790, 
    1016550, 
    1018790, 
    1019940, 
    1021130, 
    1022570, 
    1024460, 
    1027868, 
    1031900, 
    1033140, 
    1036250, 
    1037730, 
    1039608, 
    1041640, 
    1044150, 
    1048030, 
    1049800, 
    1052990, 
    1055720, 
    1059490, 
    1062090, 
    1064430, 
    1069010, 
    1069560, 
    1071620, 
    1072970, 
    1076100, 
    1078790, 
    1081740, 
    1083340, 
    1086560, 
    1088410, 
    1089210, 
    1090610, 
    1091690, 
    1094060, 
    1095720, 
    1099290, 
    1100450, 
    1103170, 
    1106170, 
    1107600, 
    1111200, 
    1113590, 
    1117750, 
    1119030, 
    1122700, 
    1124270, 
    1125880, 
    1129040, 
    1130820, 
    1133790, 
    1137750, 
    1138780, 
    1141450, 
    1142450, 
    1144000, 
    1146190, 
    1147950, 
    1151600, 
    1154950, 
    1155940, 
    1159170, 
    1161520, 
    1164150, 
    1165370, 
    1168040, 
    1169270, 
    1174750, 
    1177500, 
    1181970, 
    1185220, 
    1188030, 
    1190920, 
    1193580, 
    1197000, 
    1201060, 
    1202970, 
    1204440, 
    1207460, 
    1208080, 
    1210330, 
    1211390, 
    1213960, 
    1215210, 
    1216360, 
    1220140, 
    1221950, 
    1224900, 
    1225760, 
    1226920, 
    1229580, 
    1233880, 
    1237540, 
    1240040, 
    1241140, 
    1242860, 
    1245620, 
    1248630, 
    1249720, 
    1253160, 
    1255970, 
    1259270, 
    1260250, 
    1262330, 
    1263440, 
    1266450, 
    1269960, 
    1272740, 
    1274600, 
    1276100, 
    1277420, 
    1279960, 
    1283230
  ], 
  "end": [
    1360, 
    4360, 
    5740, 
    7850, 
    9610, 
    13670, 
    16600, 
    18130, 
    18810, 
    22180, 
    24680, 
    25980, 
    29400, 
    33140, 
    34730, 
    37410, 
    40750, 
    43850, 
    46400, 
    47910, 
    51460, 
    54030, 
    56550, 
    59700, 
    60340, 
    63650, 
    65940, 
    69630, 
    71570, 
    76020, 
    78560, 
    80950, 
    85030, 
    86670, 
    90410, 
    93650, 
    95450, 
    96970, 
    99920, 
    103210, 
    106250, 
    108630, 
    111210, 
    112660, 
    114110, 
    116540, 
    119320, 
    121980, 
    126210, 
    129590, 
    131060, 
    132200, 
    134140, 
    135350, 
    137740, 
    139010, 
    142920, 
    143980, 
    145170, 
    145800, 
    147480, 
    152230, 
    154550, 
    155060, 
    158940, 
    162790, 
    164160, 
    165320, 
    165820, 
    168050, 
    169210, 
    171900, 
    175020, 
    177920, 
    179350, 
    180740, 
    182100, 
    182970, 
    185740, 
    187710, 
    189330, 
    190490, 
    192130, 
    193380, 
    197170, 
    198050, 
    201460, 
    204300, 
    205110, 
    207750, 
    209050, 
    210010, 
    211510, 
    214830, 
    218150, 
    221230, 
    223650, 
    224900, 
    227800, 
    231200, 
    234340, 
    237760, 
    238720, 
    241660, 
    243260, 
    244490, 
    247280, 
    250580, 
    251570, 
    254170, 
    257560, 
    259209, 
    261220, 
    263940, 
    266810, 
    270670, 
    273310, 
    274570, 
    278700, 
    282860, 
    286500, 
    288080, 
    292740, 
    294490, 
    296320, 
    300080, 
    304000, 
    307510, 
    310810, 
    313800, 
    317670, 
    320560, 
    323640, 
    328000, 
    329150, 
    331940, 
    335630, 
    339520, 
    343220, 
    345690, 
    349370, 
    352870, 
    356700, 
    358720, 
    362060, 
    365560, 
    369490, 
    372820, 
    378260, 
    379510, 
    385210, 
    387550, 
    390370, 
    391300, 
    394680, 
    396740, 
    399160, 
    399750, 
    400590, 
    402550, 
    404050, 
    405960, 
    409730, 
    410650, 
    414680, 
    416470, 
    418140, 
    422200, 
    424790, 
    426100, 
    427900, 
    430730, 
    433240, 
    438780, 
    441150, 
    442710, 
    446770, 
    449070, 
    451200, 
    453980, 
    456670, 
    459560, 
    463870, 
    465350, 
    470120, 
    470900, 
    472790, 
    474380, 
    476010, 
    478610, 
    482000, 
    483860, 
    488870, 
    490470, 
    491940, 
    495560, 
    497170, 
    500300, 
    503080, 
    506380, 
    510390, 
    512159, 
    517320, 
    520840, 
    523400, 
    525970, 
    527870, 
    530160, 
    531480, 
    533690, 
    534880, 
    536360, 
    539380, 
    542210, 
    543410, 
    546370, 
    549220, 
    552800, 
    555580, 
    557290, 
    560180, 
    561910, 
    566590, 
    569920, 
    572540, 
    577250, 
    580770, 
    582940, 
    585000, 
    588230, 
    591990, 
    593910, 
    597940, 
    601500, 
    603110, 
    606870, 
    610450, 
    612250, 
    613860, 
    617540, 
    619110, 
    622430, 
    623690, 
    627500, 
    631460, 
    632510, 
    636100, 
    638680, 
    641570, 
    644590, 
    647670, 
    651440, 
    654680, 
    656760, 
    658020, 
    659140, 
    662000, 
    663820, 
    665450, 
    669040, 
    672240, 
    675750, 
    677390, 
    680470, 
    684290, 
    688040, 
    689380, 
    692120, 
    695820, 
    698560, 
    700030, 
    703050, 
    705780, 
    707980, 
    710930, 
    713740, 
    715850, 
    717800, 
    721470, 
    724940, 
    727850, 
    732630, 
    734380, 
    735320, 
    738700, 
    740110, 
    742510, 
    743870, 
    747510, 
    750080, 
    752610, 
    756600, 
    758340, 
    760730, 
    764390, 
    765840, 
    768790, 
    772120, 
    776250, 
    777780, 
    779600, 
    781590, 
    784450, 
    786050, 
    787350, 
    790410, 
    795480, 
    798170, 
    801950, 
    805630, 
    807150, 
    809990, 
    813020, 
    814180, 
    815930, 
    818720, 
    820730, 
    821480, 
    822510, 
    824390, 
    825380, 
    828240, 
    830460, 
    835310, 
    836840, 
    841860, 
    845210, 
    846600, 
    848470, 
    852200, 
    853620, 
    854860, 
    858260, 
    861030, 
    864460, 
    866890, 
    868400, 
    872470, 
    873780, 
    875950, 
    878055, 
    880230, 
    881660, 
    886520, 
    888140, 
    891650, 
    894240, 
    896000, 
    900070, 
    901380, 
    904430, 
    905520, 
    909060, 
    914720, 
    919010, 
    921230, 
    922960, 
    924910, 
    927580, 
    929440, 
    932890, 
    934160, 
    935450, 
    936780, 
    938840, 
    940000, 
    943690, 
    945160, 
    948870, 
    950160, 
    952940, 
    956550, 
    959190, 
    962300, 
    963430, 
    966760, 
    969170, 
    972820, 
    974390, 
    975600, 
    978290, 
    980900, 
    983180, 
    986010, 
    989040, 
    991730, 
    993300, 
    995100, 
    998020, 
    1001190, 
    1004370, 
    1005840, 
    1008120, 
    1010900, 
    1014790, 
    1016550, 
    1018790, 
    1019940, 
    1021130, 
    1022570, 
    1024460, 
    1027869, 
    1031900, 
    1033140, 
    1036250, 
    1037730, 
    1039609, 
    1041640, 
    1044150, 
    1048030, 
    1049800, 
    1052990, 
    1055720, 
    1059490, 
    1062090, 
    1064430, 
    1069010, 
    1069560, 
    1071620, 
    1072970, 
    1076100, 
    1078790, 
    1081740, 
    1083340, 
    1086560, 
    1088410, 
    1089210, 
    1090610, 
    1091690, 
    1094060, 
    1095720, 
    1099290, 
    1100450, 
    1103170, 
    1106170, 
    1107600, 
    1111200, 
    1113590, 
    1117750, 
    1119030, 
    1122700, 
    1124270, 
    1125880, 
    1129040, 
    1130820, 
    1133790, 
    1137750, 
    1138780, 
    1141450, 
    1142450, 
    1144000, 
    1146190, 
    1147950, 
    1151600, 
    1154950, 
    1155940, 
    1159170, 
    1161520, 
    1164150, 
    1165370, 
    1168040, 
    1169270, 
    1174750, 
    1177500, 
    1181970, 
    1183220, 
    1188030, 
    1190920, 
    1193580, 
    1197000, 
    1201060, 
    1202970, 
    1204440, 
    1207460, 
    1208080, 
    1210330, 
    1211390, 
    1213960, 
    1215210, 
    1216360, 
    1220140, 
    1221950, 
    1224900, 
    1225760, 
    1226920, 
    1229580, 
    1233880, 
    1237540, 
    1240040, 
    1241140, 
    1242860, 
    1245620, 
    1248630, 
    1249720, 
    1253160, 
    1255970, 
    1259270, 
    1260250, 
    1262330, 
    1263440, 
    1266450, 
    1269960, 
    1272740, 
    1274600, 
    1276100, 
    1277420, 
    1279960, 
    1283230, 
    1284480
  ], 
  "text": [
    "Armando Fox: So let's go through these.", 
    "If a customer can do the action, you can create a simple characterization", 
    "test by mechanizing it.", 
    "Assuming the action's deterministic, there's a pretty good", 
    "case that that's true.", 
    "The idea of creating scenarios after the fact relies on that.", 
    "Integration-level characterization does rely less on detailed knowledge", 
    "about the code structure.", 
    "That's correct.", 
    "We really only exercise some pathway through the code beginning at the", 
    "browser and ending at the browser, in our case.", 
    "Now what about these two?", 
    "They're just as likely to be unexpectedly dependent on the", 
    "production database versus they're based on fewer assumptions about how", 
    "the code works.", 
    "Between the two of them, I would give a little bit of the edge to green.", 
    "But you could make a case for both, and here's why.", 
    "When you say they're based on fewer assumptions about how the code works--", 
    "if you're watching the customer do an action and it's repeatable, and it's", 
    "repeatable, and it's repeatable--", 
    "at some point you can get confidence that there's a set of assumptions that", 
    "you're able to make about the customer's action being repeatable.", 
    "But how do we know it isn't, for example, dependent on the phase of the", 
    "moon, or some other quasi-deterministic thing that you", 
    "haven't thought of?", 
    "Or maybe it behaves differently on leap years, foreshadowing an example", 
    "that we're going to talk about in just a little while from now.", 
    "So the truth is, both of these are potential pitfalls.", 
    "I would say green is a little bit more of the answer.", 
    "Because if you've been able to create the scenario, which as we said before,", 
    "in a real staging environment, you often have to modify the production", 
    "database by injecting stuff into it when you create your scenario.", 
    "You can't poke values in like you can when everything's on one platform.", 
    "You actually have to manually set things up.", 
    "So if you've actually been able to reproduce the action that way, you", 
    "probably have done as much as you can to try to isolate yourself from", 
    "dependency on the production database.", 
    "That's not a 100% guarantee.", 
    "But it's as much as you can reasonably do in some cases.", 
    "So green is probably the best answer in this case.", 
    "They're somewhat less likely, if you've done your job, to be", 
    "unexpectedly dependent on the production database.", 
    "But both orange and green here could be issues that you", 
    "want to think about.", 
    "This is not a precise science.", 
    "We're dealing with legacy code and we're trying to improve--", 
    "We're trying to infer what the designer's intent was and then try to", 
    "capture that in a bunch of tests.", 
    "So let's talk about bad code, in case you don't get to do that enough.", 
    "And the easiest way to do this is just to launch in with an example.", 
    "Happily, I've prepared some.", 
    "What's wrong with this?", 
    "Would you be proud to have written it?", 
    "No.", 
    "So, let's start shooting at it, shall we?", 
    "Variable names.", 
    "And at a time when disk space is free, there's no reason for having single", 
    "letter variable names.", 
    "That's a punishable offense.", 
    "What else?", 
    "The variable names are uncommunicative.", 
    "And by the way, because you're seeing numbers like 366 and d and y, probably", 
    "some of you already made some inferences about what those variables", 
    "might mean.", 
    "But if English wasn't your main language or if this was dealing with,", 
    "let's say, the Hebrew calendar instead of the Gregorian calendar, then maybe", 
    "the constants wouldn't be so obvious.", 
    "So don't fall into that trap.", 
    "What else?", 
    "What other things might we poke holes at, sir?", 
    "There's no comments.", 
    "Now, one could say, the problem is there's no comments.", 
    "Or one could equally well say, the code is so convoluted.", 
    "And if it were better structured, maybe it wouldn't be such a big deal", 
    "to have no comments.", 
    "That's a controversial remark.", 
    "And neither extreme is the truth.", 
    "But you're absolutely right.", 
    "The code is certainly not self-documenting, whether that's", 
    "through the use of comments or through other things.", 
    "What else could we say about it?", 
    "What else is wrong?", 
    "There's a subtle thing.", 
    "Yes?", 
    "Deeply nested \"if\" statements.", 
    "Very good.", 
    "Try to play Mr. Computer and in your head go through the sequence of", 
    "different combinations of these nested \"ifs.\" No fun.", 
    "It's making you work.", 
    "You shouldn't have to work to understand the intent of the code, if", 
    "the code is well-written.", 
    "So there's a bunch of things.", 
    "We could take potshots at it.", 
    "But we could also ask, is there a set of guidelines that's a little more", 
    "concrete for figuring out, can I tell if this piece of code is good or not?", 
    "Usually you have a spidey sense about whether it's good.", 
    "Spiderman is a registered trademark of Marvel Comics used for educational", 
    "purposes only.", 
    "What could we actually do?", 
    "Well, we could go at it just as we did with test coverage.", 
    "There's a qualitative aspect and there's a quantitative aspect.", 
    "From the quantitative aspect, we could ask, are there metrics", 
    "that we could use?", 
    "Could we analyze the code and come out with numbers that tell us something", 
    "about code quality?", 
    "Now that's a loaded statement.", 
    "There's certainly a lot of things you can analyze and quantify.", 
    "The extent to which those correlate with code quality is a subject about", 
    "which there's a lot of controversy.", 
    "But nonetheless, there are some metrics and some general guidelines", 
    "that it's worth knowing, because they at least give you a tip off of when", 
    "things are heading in the wrong direction.", 
    "Now you already saw code-to-test-ratio.", 
    "And you've already had some experience with statement coverage like, C0", 
    "coverage, which is what SimpleCov measures.", 
    "Two other metrics that are reasonable proxies for complexity--", 
    "how hard is it to understand this code and therefore probably", 
    "to test this code--", 
    "are the Assignment-Branch-Condition score, where a weighted score of the", 
    "number of assignments, the number of if branches, and the number of", 
    "different conditions evaluated in a branch is used to compute at the level", 
    "of each method an overall score.", 
    "And there's some examples, as well as a nice tool called flog, that will", 
    "calculate a version of the score for you.", 
    "So we won't do an example in lecture.", 
    "But a rough guideline is, if you're under a score of about 20 per method", 
    "for ABC, you're in the right ballpark.", 
    "Cyclomatic complexity is one of the best known software metrics.", 
    "And again, whenever we tell you about a metric or technique, we try to also", 
    "suggest a tool that will help you compute it.", 
    "In this case, there's one called saikuro that computes the cyclomatic", 
    "complexity, which we'll see an example of in just a moment.", 
    "And there's actually a National Institutes of Standards and Technology", 
    "guideline for government contracts that they look for a score of less", 
    "than 10 per method.", 
    "And in a minute, we'll compute what it was for that bad method that we just", 
    "saw and confirm our intuition that it's not a good method.", 
    "So, like with tests, the goal of metrics is not to obsess over them and", 
    "get to 100% or get to a really low score on any one of these.", 
    "It's to look for places where clearly something's wrong with your code,", 
    "because multiple metrics are telling you this code is problematic.", 
    "And in fact, there's a nice tool called metric_fu that runs a bunch of", 
    "different metrics and point out places where multiple metrics are heading off", 
    "scale in the wrong direction.", 
    "But like everything else, take the metrics with a grain of salt.", 
    "They're better for pointing you to places that need some attention, as", 
    "opposed to places that something is definitely wrong.", 
    "Now what I said is, we could actually confirm our intuition here.", 
    "I'm going to compute.", 
    "I'm going to flog.", 
    "So I copied and pasted the original code from Pastebin.", 
    "And module, a few warnings here.", 
    "We get a flog score of 23.", 
    "What is that?", 
    "Well, according to our NIST guidelines, we were looking for a", 
    "score of 10 or under per method.", 
    "OK, so pretty bad.", 
    "Yep, sorry.", 
    "Less than 20 per method.", 
    "We're still pretty bad though.", 
    "But 20 is high.", 
    "You ought to be able to do a lot better than that.", 
    "So in a moment, we're going to do a few things that hopefully will bring", 
    "that number down.", 
    "And also, as we look at the code, it'll make the code get better.", 
    "How else do we know it's getting better besides that", 
    "number is going down?", 
    "We'll talk in a moment about design smells, which is the qualitative part.", 
    "I said that I would talk about one metric that's pretty well known.", 
    "This is cyclomatic complexity.", 
    "It's been around for a long time.", 
    "Software engineer Frank McCabe is given credit for inventing it.", 
    "So some people call it McCabe complexity as well.", 
    "But basically the idea is you look at your code as a graph in which any", 
    "individual node doesn't have any branches in or out of it.", 
    "It's called the basic block.", 
    "And the idea is you take the number of edges in that graph, the number of", 
    "nodes in the graph, and the number of connected components.", 
    "So here's a connected component.", 
    "In this example, we've got a really simple piece of Ruby code.", 
    "And we've mapped it onto one of these graphs.", 
    "And you can compute a cyclomatic complexity of 3, which is pretty good.", 
    "That's well within the bound of 10 per module or per method, which is what", 
    "NIST recommends.", 
    "So again, the goal is not to obsess when one of your methods goes outside", 
    "this range.", 
    "It's to look for multiple things being wrong.", 
    "Cyclomatic complexity's too high.", 
    "ABC score is too high.", 
    "And maybe it even has a couple of design smells.", 
    "So we're going to talk about those next.", 
    "So what are smells?", 
    "Like a real smell, or like most real smells, a code smell alerts you to the", 
    "fact that something might be wrong.", 
    "It's something that should make you suspicious.", 
    "It doesn't mean that something necessarily is wrong.", 
    "And there's a catalog--", 
    "Depending on which catalog you consult, there's anywhere between 20", 
    "and 60 different code smells that you could identify.", 
    "And yes, there's a tool that will help you find them.", 
    "The Ruby tool is reek, aptly named.", 
    "It finds code smells.", 
    "In fact, we could run that tool on our original bad code as well, so that we", 
    "know our starting point.", 
    "And after a few warnings, let's see.", 
    "There's no descriptive comment in my class.", 
    "There's a duplicated expression.", 
    "There's a method that doesn't depend on its own instance state.", 
    "We'll talk more about that.", 
    "We have uncommunicative variable names, as somebody", 
    "correctly pointed out.", 
    "And it's a long method.", 
    "It didn't seem that long, but the idea is once you try to understand it with", 
    "all the nested ifs and stuff, a small amount of Ruby code", 
    "actually goes a long way.", 
    "So subjectively, what makes a method too long?", 
    "If you look at the method and you can't figure out in a short time what", 
    "the method does at a high level, it's probably too long.", 
    "So let's go back to those concepts now and take a look at each one a little", 
    "more closely.", 
    "We could spend several lectures just talking about code smells, but of", 
    "course we won't.", 
    "However, I will point out that there's a way to recognize a small group of", 
    "symptoms that are often indicators of a variety of code smells.", 
    "That is to say there's a whole bunch of different codes smells that in some", 
    "way or another will manifest as some combination of these four things.", 
    "The SOFA acronym says that good methods should be short.", 
    "They should do one thing.", 
    "They should have few arguments.", 
    "And they should stick to a consistent level of abstraction.", 
    "Now again, one reason that we wrote the book is so we wouldn't have to", 
    "explain each one of these in detail in lecture.", 
    "But I am going to focus on the last one, consistent level of abstraction,", 
    "because it's one of the more interesting ones that most rapidly", 
    "makes your code start to get ugly.", 
    "And it tends to correlate well with the other three.", 
    "Now by the way, what does it mean that a method should be short?", 
    "Could you quantify how short?", 
    "That depends a lot on the language you're using.", 
    "It also depends on the fact that back in the day, people used to program on", 
    "text only terminals.", 
    "Typically, you'd get 80 characters per line and maybe order of", 
    "24 lines on a terminal.", 
    "So if it was more than one screen full of code, that was definitely too long.", 
    "Today, one screen full of code is 100 times that amount, because monitors", 
    "are ginormous.", 
    "So, short really is a matter of, does it try to do one thing?", 
    "And can you quickly grasp what that one thing is?", 
    "And that one thing may be stated at a high level of abstraction.", 
    "And the only thing that this method does is call a bunch of substeps that", 
    "do the actual work, but that's OK.", 
    "As we'll see in a moment, that's how a good news story is written as well.", 
    "So let's take a look at this idea of a single level of abstraction.", 
    "If you're trying to do a complex task, you don't put the", 
    "whole task in one method.", 
    "Everybody knows that.", 
    "You have a bunch of helper methods that do different pieces of the work.", 
    "And you divide and conquer the task up.", 
    "Then you have methods that call those methods.", 
    "And then you have one high level entry point that orchestrates all the work.", 
    "This is intuitively how you would think to organize your code anyway.", 
    "But it turns out that if you don't do this, it results in all kinds of other", 
    "symptoms as well.", 
    "An easy symptom that you can look for, that says you might be violating a", 
    "single level of abstraction, is that you've got a function in which one", 
    "line of code says what to do, but there's other lines around it that say", 
    "how to do something.", 
    "And instead of using the examples from the book, which you can very well look", 
    "at yourself, I will use a different example from a real application.", 
    "So this is from the same real application that I've given some", 
    "examples from before.", 
    "The idea is that if you're an arts organization, the most valuable thing", 
    "you can have is somebody's email address, because then you can email", 
    "them stuff and hopefully they'll buy things.", 
    "Of course, you also need to be respectful and allow them to opt out.", 
    "But there's nothing wrong with once in awhile when they have to relog back in", 
    "saying, hey, you want to come back to our mailing list?", 
    "We promise to be nice.", 
    "So, my job was to put in a piece of code that would do this.", 
    "The idea is that when the user first logs in, or if it's been two weeks and", 
    "their password isn't remembered so they have to re-login, they would see", 
    "a friendly reminder that if they've opted out of email in the past, would", 
    "you like to be invited to opt back in.", 
    "That was the goal.", 
    "So this was the original version that I came up with.", 
    "And this is real code.", 
    "This is the equivalent of pulling one's pants down in public, showing", 
    "one's own bad code.", 
    "Not that I'm going to do either those things again.", 
    "But here's my initial version.", 
    "It's not horribly, horribly bad.", 
    "But it does commit the sin of mixing saying what to do with", 
    "saying how to do it.", 
    "So OK, this seems reasonable enough.", 
    "Blacklist is probably some sort of a flag that means the user has opted", 
    "themselves out.", 
    "But then there's some stuff in here about options and values.", 
    "And there's a very specific message in here.", 
    "I'm mixing something that is clearly an intent with something that is", 
    "implementation.", 
    "So, what will be a better way to do this?", 
    "And this is mixing the levels of abstraction.", 
    "It's pretty nice that I have a method called blacklist and I have a method", 
    "called valid email address.", 
    "Who knows what's inside those methods?", 
    "But it's clear from the names what they're intended to do.", 
    "But then here, I have to know what class option is for, what this value", 
    "method does, what it means for something to be blank.", 
    "So now I'm mixing in implementation details with intention.", 
    "And that's a yellow flag that something might be wrong here.", 
    "And there's another problem.", 
    "It turns out that if you put this into the controller method, which is what I", 
    "did here, I put it into one of the earliest methods that gets called", 
    "after you login.", 
    "Well, I don't want to show it to you every time.", 
    "I only want to show it to you when you have to re-login.", 
    "Otherwise, I'd be slapping you in the face with it every time", 
    "you come to the site.", 
    "That would be rude.", 
    "This method doesn't actually do that.", 
    "There's nothing in here.", 
    "This is going to fire every time the show action is called, which is the", 
    "user's landing page, badness.", 
    "So after a fair amount of refactoring, which we're going to do in a minute, I", 
    "got to this.", 
    "I created a separate helper called login_message, which basically, this", 
    "is a place that's going to get called only when the user re-logs in.", 
    "And this couldn't be clearer.", 
    "This is 100% intention.", 
    "Encourage opt in message if current user has opted out of email.", 
    "You could almost read that like a sentence.", 
    "And you immediately know what it does.", 
    "Now, who knows how these messages work?", 
    "But I've achieved my goal of code clarity, which is the intention of", 
    "this is much more clear than it was in the previous example.", 
    "And now it's just a matter of drilling down and seeing what", 
    "each of these does.", 
    "Now, notice that just by naming this method and pulling it out, I've", 
    "actually made it more clear.", 
    "Before I was asking, wait a minute, what's an option?", 
    "What does it mean for its value to be blank?", 
    "Ah, this must be what it means.", 
    "I'm encouraging the opt in message.", 
    "Well, something about this option must be determining whether I should be", 
    "using this behavior or not.", 
    "So just by essentially naming a method in a better way and pulling it out as", 
    "a helper, I've improved the documentation without actually adding", 
    "any comments.", 
    "And then finally this last piece, the part about if somebody has", 
    "opted out of email.", 
    "Again, the idea that somebody has opted out of email, that's clearly a", 
    "design intent.", 
    "The specific way that I represent that in my application, that's an", 
    "implementation detail, which now has been pulled out into its own method.", 
    "So someone has opted out of email if they're on the blacklist.", 
    "That the blacklist is what you put yourself on when it says", 
    "don't send me email.", 
    "And you have a valid email address.", 
    "We don't want to invite somebody to opt back in if they don't even have an", 
    "email address on file with us.", 
    "So all of the same logic appears--", 
    "I haven't saved any code.", 
    "In fact, I've added code.", 
    "Because now I have more methods.", 
    "Where there were just one method before, there's now", 
    "three different ones.", 
    "But the design intention of each one of them is much more clear.", 
    "And that's really the goal of refactoring.", 
    "It's to improve the way that the code appears without changing its", 
    "functionality.", 
    "So, that was a real life example.", 
    "I mentioned that single level of abstraction is also sometimes an", 
    "indicator that you might have done some other things wrong as well.", 
    "One of the other SOFA guidelines is it should have few arguments.", 
    "Methods should have few arguments.", 
    "So why is it bad to have lots of arguments?", 
    "Well, for one thing, it's hard to get good testing coverage.", 
    "Because if the behavior of the method really depends on a lot of arguments,", 
    "there's a lot of different combinations of ways", 
    "that it could behave.", 
    "That means it might also be hard or mock or stub everything, because", 
    "you've got to figure out what all those interactions are so you can", 
    "isolate just the behaviors you care about.", 
    "If you have a Boolean argument, that's a super yellow flag.", 
    "If you've got a method that basically does two totally different things,", 
    "depending on whether a flag is true or false, sorry buddy,", 
    "but that's two methods.", 
    "You didn't save anything by putting them in one method.", 
    "In fact, you made one method whose behavior is ambiguous and it's harder", 
    "to assess gratuitously.", 
    "And if the arguments seem to travel in a herd, maybe you need to", 
    "extract a new class.", 
    "So what does this mean, arguments traveling in a herd?", 
    "Once again, although you could read the example in the textbook, and I", 
    "encourage you to do so, let me give another example based on real code.", 
    "The example is from the same application.", 
    "It's the concept of a seat being available.", 
    "Pretty straightforward.", 
    "You come to the website.", 
    "You want to see a show.", 
    "Are there seats available for that show?", 
    "It turns out that actually depends on more factors than you might imagine.", 
    "So in our world, in the theater that I work at, each show has a number of", 
    "seats that are available for sale.", 
    "So there's a number of chairs, some number of people who can physically be", 
    "accommodated.", 
    "But there's different prices in different sections.", 
    "Some seating sections are better than others.", 
    "Some seats are only available to VIP customers.", 
    "We don't want to sell more than 20 VIP seats, because that's how many chairs", 
    "we have in the premium section.", 
    "And then some types of seats are only sold during certain date ranges.", 
    "For example, there's early bird seats, that if you buy a certain amount of", 
    "time in advance, you can get a discount or there's limited inventory.", 
    "We're going to do a discount promotion, but we're only offering 20", 
    "tickets at this price and when they're gone, they're gone.", 
    "So in fact, when you come to the website and you want to know, I want", 
    "to buy a ticket.", 
    "Which ones are available and how much do they cost?", 
    "That's actually not trivial.", 
    "And the question is, which of these possible classes, each one of these", 
    "things in red seems like it might be a class?", 
    "Which one owns the responsibility for figuring this out?", 
    "And initially the answer was none of them did.", 
    "And there were a bunch of functions scattered around different classes,", 
    "each of which would have to take all these arguments.", 
    "What show is it?", 
    "So that it knows the inventory.", 
    "What kind of customer?", 
    "So that it knows if special high priced, high", 
    "privilege seats are available.", 
    "And is it a type of seat that has either limited inventory or limited", 
    "sales dates?", 
    "And depending on all of those variables, these methods would somehow", 
    "try to figure out what should be displayed on the list of choices in", 
    "the drop down menu.", 
    "As it turns out, the right solution to this was to create a new class.", 
    "When you've got pieces of information that all seem to participate in a", 
    "decision and nobody can decide who's decision it is, that's a tip-off that", 
    "maybe what you need is a new class.", 
    "Remember we talked about the idea of a class having responsibilities, which", 
    "are things that it knows and does.", 
    "Here's a classic example.", 
    "This is a new class whose responsibility is to know all of these", 
    "rules for availability.", 
    "But of course, that means it has to work with these other collaborator", 
    "classes in order to figure out the specific details, the inputs that go", 
    "into those roles.", 
    "And that's fine, because when we test the class, we can", 
    "mock each one of these.", 
    "These all have well-defined attributes.", 
    "We can stub them out and then we can test all these different", 
    "combinations of logic.", 
    "It also computes the availability of a seat by applying those rules.", 
    "And if some seat that you wanted to buy is not available, it's responsible", 
    "for telling you why.", 
    "Is it because the show's sold out, the date's expired, we already sold all", 
    "the discounted ones, you're a loser?", 
    "So, all of their responsibility is now in one place.", 
    "There's one class.", 
    "Of course it collaborates with the others, but the decision making logic", 
    "is now in one place.", 
    "So this is a real life example of how arguments traveling around in a pack,", 
    "and especially if they travel around across the boundaries of different", 
    "classes, is a surefire tip off that probably your design is missing an", 
    "important class.", 
    "And by the way, like I said, we could do an entire course just on", 
    "refactoring and smells and things like that.", 
    "But this is really one of the areas where it's incumbent on you to follow", 
    "up a little bit with the resources to learn more and stuff like that.", 
    "I'm going to try to steer you in the right direction with this analogy.", 
    "A good method is like a good news story.", 
    "If you read a good news story--", 
    "and a good news story is one in a reputable newspaper, not a blog.", 
    "OK?", 
    "A good news story starts out with a high level summary", 
    "in the first paragraph.", 
    "If you've taken a basic writing class, it's the who, what,", 
    "when, where, and why.", 
    "And that's it.", 
    "If all you do is read that paragraph, you at least have an idea of what the", 
    "rest of the story is going to be like.", 
    "And then the successive paragraphs each go into detail on", 
    "one of those things.", 
    "Who are the people?", 
    "Why did it happen or the analysis or whatever?", 
    "A bad news story which ramble on, going between levels of abstraction in", 
    "a single paragraph, in a run-on paragraph, rather than starting with a", 
    "high level and then progressively refining and drilling", 
    "down to each thing.", 
    "So should it be with your methods.", 
    "When you call a method, that method is going to do one thing and it probably", 
    "can do it in less than a dozen lines, hopefully a lot less", 
    "than a dozen lines.", 
    "Some of those lines are going to be calls to other methods that help out.", 
    "But again, you can recursively apply that same argument.", 
    "At each level of abstraction, you can pretty clearly see what the method is", 
    "trying to do.", 
    "And because it's only one thing, it shouldn't take a lot", 
    "of space to do it.", 
    "Try to follow that guideline and you'll be OK.", 
    "Having said those, which of the SOFA guidelines do you think is most", 
    "important in terms of unit testing?", 
    "That functions should be short?", 
    "That they should do only one thing?", 
    "That they should have few arguments?", 
    "Or that they should stick to one level of abstraction?", 
    "Strictly from the goal of dealing with unit testing, which do you believe is", 
    "most important?"
  ]
}