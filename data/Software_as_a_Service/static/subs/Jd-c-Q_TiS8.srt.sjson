{
  "start": [
    710, 
    4210, 
    5020, 
    8810, 
    12560, 
    15620, 
    19190, 
    21750, 
    23500, 
    26430, 
    29570, 
    33450, 
    36250, 
    37870, 
    41040, 
    44850, 
    49530, 
    51620, 
    54050, 
    54580, 
    60560, 
    64410, 
    67260, 
    69480, 
    72220, 
    76480, 
    78110, 
    78340, 
    80810, 
    83250, 
    88070, 
    90210, 
    94100, 
    96210, 
    100890, 
    106000, 
    109900, 
    114380, 
    116370, 
    120280, 
    122060, 
    124310, 
    127100, 
    129820, 
    134740, 
    139040, 
    141530, 
    143160, 
    145310, 
    146520, 
    150300, 
    153890, 
    155550, 
    158560, 
    160520, 
    164700, 
    168470, 
    170600, 
    173440, 
    174070, 
    177130, 
    178030, 
    179540, 
    181710, 
    185120, 
    188530, 
    190870, 
    195640, 
    200020, 
    202170, 
    205370, 
    208410, 
    211270, 
    213830, 
    216600, 
    220520, 
    223010, 
    225765, 
    231430, 
    234090, 
    235630, 
    240610, 
    242550, 
    244620, 
    245170, 
    246430, 
    250270, 
    254590, 
    255550, 
    262430, 
    265590, 
    267190, 
    268170, 
    270840, 
    272220, 
    273500, 
    277780, 
    279330, 
    283450, 
    286020, 
    289990, 
    292460, 
    295770, 
    297390, 
    302720, 
    304460, 
    307850, 
    308885, 
    312940, 
    314010, 
    317490
  ], 
  "end": [
    4210, 
    5020, 
    8810, 
    12560, 
    15620, 
    19190, 
    21750, 
    23500, 
    26430, 
    29570, 
    33450, 
    36250, 
    37870, 
    41040, 
    44850, 
    49530, 
    51620, 
    54050, 
    54580, 
    60560, 
    64410, 
    67260, 
    69480, 
    72220, 
    76480, 
    78110, 
    78340, 
    80810, 
    83250, 
    88070, 
    90210, 
    94100, 
    96210, 
    100890, 
    106000, 
    109900, 
    114380, 
    116370, 
    120280, 
    122060, 
    124310, 
    127100, 
    129820, 
    134740, 
    139040, 
    141530, 
    143160, 
    145310, 
    146520, 
    150300, 
    153890, 
    155550, 
    158560, 
    160520, 
    164700, 
    168470, 
    170600, 
    173440, 
    174070, 
    177130, 
    178030, 
    179540, 
    181710, 
    185120, 
    188530, 
    190870, 
    195640, 
    200020, 
    202170, 
    205370, 
    208410, 
    211270, 
    213830, 
    216600, 
    220520, 
    223010, 
    225765, 
    231430, 
    234090, 
    235630, 
    240610, 
    242550, 
    244620, 
    245170, 
    246430, 
    250270, 
    254590, 
    255550, 
    259040, 
    265590, 
    267190, 
    268170, 
    270840, 
    272220, 
    273500, 
    277780, 
    279330, 
    283450, 
    286020, 
    289990, 
    292460, 
    295770, 
    297390, 
    302720, 
    304460, 
    307850, 
    308885, 
    312940, 
    314010, 
    317490, 
    318740
  ], 
  "text": [
    "ARMANDO FOX: So we had just finished doing an introduction to through", 
    "associations.", 
    "And we had a pretty good discussion about the relationship between how", 
    "things are arranged in the database and how active record associations", 
    "actually gives you some pretty powerful ways to deal with it.", 
    "One thing that we didn't talk about, but that you'll see used in some", 
    "contexts, and I thought it was worth introducing you to is", 
    "has_and_belongs_to_many.", 
    "So last time one of the things we talked about was has_many :through", 
    "which is basically a way of having indirect associations between two", 
    "kinds of things where the association goes through an intermediate object.", 
    "has_and_belongs_to_many is kind of a lightweight version of that, if you", 
    "want to think of it that way.", 
    "And if you've heard the phrase \"join table\" in the context of people who", 
    "work with databases, there are sometimes when you want to express a", 
    "relationship between two tables or two kinds of models, in our case, but the", 
    "relationship is the only thing that matters.", 
    "In other words, there's no intermediate entity that defines the", 
    "relationship.", 
    "So before, when we talk about the idea of movies, moviegoers, and reviews,", 
    "and we said that the review is sort of this intermediate step, right?", 
    "It kind of links a movie and a moviegoer together.", 
    "But here's a different example.", 
    "Suppose we're talking about the genre that a movie is in.", 
    "In that case, there isn't really a separate need for a genre model,", 
    "because what would be in it?", 
    "Right?", 
    "Just kind of a string describing the name of the genre.", 
    "So that's not enough work for a model to do.", 
    "So another way to express a relationship that's many-to-many is by", 
    "using a join table.", 
    "The way it looks in the database is, it's a table that has no primary key.", 
    "It doesn't represent a kind of model.", 
    "All it represents is an association between two existing kinds of models.", 
    "So given that a movie might be in more than one genre, and any genre might", 
    "include several different movies, it's a many-to-many association.", 
    "We could have a table where each pair of entries in the table just has a", 
    "genre ID and a movie ID.", 
    "And you could see that you can have a movie belonging to many genres, a", 
    "movie having many genres, and vice versa.", 
    "Hence has_and_belongs_to_many.", 
    "So the difference between this and what we already saw with \"through\" is", 
    "that there's no intermediate object being represented.", 
    "The only thing being represented is the association itself.", 
    "And once you've used has_and_belongs_to_many, you can use", 
    "all of the same operations that would have worked in the", 
    "has_many :through example.", 
    "The only difference is that now there's no need to create an", 
    "intermediate object.", 
    "So in fact, this construction which we saw last time and said in a through", 
    "association, you can't really use this because it implies somehow the magical", 
    "creation of the intermediate model.", 
    "Well, with has_and_belongs_to_many, there is no intermediate model.", 
    "So actually this would work.", 
    "And as an aside, I won't click through to the pastebin code, but if you click", 
    "through to it on your own, it shows an example of the migration that would", 
    "create this intermediate table.", 
    "The only thing different about the migration is that you can omit the", 
    "primary key.", 
    "There's no need for an ID column, because there's no model being", 
    "represented here.", 
    "You don't have to omit the ID column.", 
    "It's not particularly harmful to have it in there.", 
    "But in fact, each table entry's already unique by virtue of having a", 
    "unique pair of genre ID and movie ID.", 
    "So when would you use one of these versus the other?", 
    "In general, if you can conceive of the thing that defines the relationship as", 
    "its own kind of object, then you should probably use a full-blown", 
    "association with has_many :through.", 
    "So in the case of reviews, clearly a review is its own object.", 
    "There's a lot of other data about it that's interesting, besides the fact", 
    "that it happens to link a movie and a moviegoer.", 
    "But in the rare case where the only thing that matters is the", 
    "relationship, and there's absolutely no other aspect of the relationship", 
    "besides the connection that you care about, then as a lightweight kind of a", 
    "shortcut you can use has_and_belongs_to_many.", 
    "You'll find that the vast majority of the times, you'll want to use has_many", 
    ":through, but now you know that there's more than one way to do it.", 
    "As with everything else in Rails, there's a convention around using", 
    "has_and_belongs_to_many.", 
    "So if you've got a bar model that has_and_belongs_to_many :foos, a foo", 
    "will then have_and_belong_to_many :bars.", 
    "It's got to be a reciprocal relationship, because it's", 
    "many-to-many.", 
    "There's no intermediate join model.", 
    "So you don't get to decide that the relationship is asymmetric.", 
    "Rails will expect that the database table will be the pluralized names in", 
    "alphabetical order.", 
    "So bar comes before foos, so it'll look for table called bars_foos.", 
    "Regardless of which model you think of as being the primary one, alphabetical", 
    "order defines the table name.", 
    "So pretty simple.", 
    "And as with all conventions you can override it, but you need a good", 
    "reason to do so.", 
    "So here's a question.", 
    "Let's see if you understand the idea of using has_and_belongs_to_many", 
    "versus has_many :through.", 
    "Suppose we want to model the idea that students can make appointments, like", 
    "outside of office hours with faculty members.", 
    "The way that we would model this would include which of these relationships?", 
    "And by the way, this is not complete, right?", 
    "Whichever one of these is the right answer is only one of the pieces of", 
    "the relationship you have to model.", 
    "So would our model include something like faculty has-many-appointments and", 
    "student has-many-appointments?", 
    "Would we use faculty has_and_belongs_to_many :students and", 
    "vice versa?", 
    "Would we have a faculty belongs-to an appointment and student belongs-to an", 
    "appointment?", 
    "Or faculty has-many appointments through students?", 
    "So think about that for a moment."
  ]
}