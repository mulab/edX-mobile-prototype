{
  "start": [
    1400, 
    4980, 
    6930, 
    7850, 
    12440, 
    16500, 
    19630, 
    21240, 
    24040, 
    25310, 
    30170, 
    34620, 
    36900, 
    40600, 
    42970, 
    46470, 
    47280, 
    52890, 
    56810, 
    60580, 
    63760, 
    67020, 
    68990, 
    72450, 
    76190, 
    79150, 
    81140, 
    84840, 
    87120, 
    90470, 
    94710, 
    98480, 
    99530, 
    104540, 
    106580, 
    109840, 
    111560, 
    116670, 
    120310, 
    122530, 
    126560, 
    129860, 
    132965, 
    134530, 
    136390, 
    137990, 
    139395, 
    142010, 
    145970, 
    148320, 
    151230, 
    155480, 
    159130, 
    159630, 
    161260, 
    163880, 
    164710, 
    168840, 
    172210, 
    174480, 
    175660, 
    176490, 
    177420, 
    180560, 
    183210, 
    185190, 
    189380, 
    192570, 
    194570, 
    196190, 
    199070, 
    203140, 
    205120, 
    206440, 
    209300, 
    210380, 
    212090, 
    213400, 
    216830, 
    219910, 
    223600, 
    226830, 
    230840, 
    234410, 
    236040, 
    239110, 
    242470, 
    246040, 
    247700, 
    250950, 
    253390, 
    255280, 
    259570, 
    260370, 
    263690, 
    264320, 
    268590, 
    272080, 
    274780, 
    277220, 
    281380, 
    283740, 
    288050, 
    291370, 
    293750, 
    295470, 
    300120, 
    303690, 
    304730, 
    308510, 
    310970, 
    312100, 
    316230, 
    319240, 
    321660, 
    322990, 
    327000, 
    330120, 
    334060, 
    336330, 
    338970, 
    342410, 
    343930, 
    348090, 
    353340, 
    355840, 
    359050, 
    361690, 
    365900, 
    369020, 
    372690, 
    375800, 
    378880, 
    382270, 
    386220, 
    391010, 
    394560, 
    395660, 
    398580, 
    400730, 
    402960, 
    405980, 
    410370, 
    413930, 
    417490, 
    419630, 
    421050, 
    422960, 
    426590, 
    429820, 
    430430, 
    432710, 
    434890, 
    438400, 
    440470, 
    444430, 
    447040, 
    448330, 
    451350, 
    452830, 
    455630, 
    459500, 
    463070, 
    465990, 
    470400, 
    473960, 
    479430, 
    480250, 
    483720, 
    486680, 
    489510, 
    490530, 
    494970, 
    498140, 
    502040, 
    505980, 
    510410, 
    514429, 
    518549, 
    522000, 
    526180, 
    530940, 
    532670, 
    535780, 
    536660, 
    540510, 
    543120, 
    546250, 
    549540, 
    552140, 
    553810, 
    558840, 
    562500, 
    567030, 
    568990, 
    572100, 
    573890, 
    576680, 
    580010, 
    582450, 
    586060, 
    589650, 
    594690, 
    598340, 
    600880, 
    601350, 
    604080, 
    606950, 
    609700, 
    612090, 
    615320, 
    618070, 
    622610, 
    625480, 
    628710, 
    631750, 
    635130, 
    639790, 
    643990, 
    646220, 
    649510, 
    653320, 
    656790, 
    658510, 
    659990, 
    663860, 
    667360, 
    671110, 
    674290, 
    676490, 
    680590, 
    685070, 
    689760, 
    692190, 
    696480, 
    699850, 
    703790, 
    706810, 
    708250, 
    711870, 
    713010, 
    715760, 
    717410, 
    718650, 
    723620, 
    726950, 
    729040, 
    731140, 
    734230, 
    737690, 
    740400, 
    745030, 
    747930, 
    751320, 
    754500, 
    760090, 
    764080, 
    764910, 
    767330, 
    769410, 
    773210, 
    775970, 
    782150, 
    786490, 
    788600, 
    793960, 
    797910, 
    801360, 
    805450, 
    810870, 
    814190, 
    818860, 
    821470, 
    825170, 
    828350, 
    832600, 
    833300, 
    838750, 
    840730, 
    844200, 
    845420, 
    848410, 
    851800, 
    855420, 
    859440, 
    862900, 
    865630, 
    868610, 
    871590, 
    876680, 
    881590, 
    883030, 
    886735, 
    889200, 
    893580, 
    895050, 
    898850, 
    901580, 
    904820, 
    905560, 
    910710, 
    913260, 
    917220, 
    919320, 
    922640, 
    925540, 
    930835, 
    932660, 
    937710, 
    941370, 
    946510, 
    948265, 
    950030, 
    952400, 
    957520, 
    958980, 
    963370, 
    965230, 
    967900, 
    971760, 
    975880, 
    977820, 
    979490, 
    982680, 
    987560, 
    988140, 
    990180, 
    995990, 
    997600, 
    1003380, 
    1005310, 
    1008610, 
    1010620, 
    1013330, 
    1018490, 
    1021110, 
    1024000, 
    1026880, 
    1029108, 
    1032319, 
    1033670, 
    1034990, 
    1037890, 
    1043990, 
    1046210, 
    1048960, 
    1051980, 
    1055920, 
    1059860, 
    1061180, 
    1063860, 
    1066530, 
    1068940, 
    1071030, 
    1072640, 
    1076180, 
    1080380, 
    1084310, 
    1085850, 
    1089700, 
    1092650, 
    1097110
  ], 
  "end": [
    4980, 
    6930, 
    7850, 
    12440, 
    16500, 
    19630, 
    21240, 
    24040, 
    25310, 
    30170, 
    34620, 
    36900, 
    40600, 
    42970, 
    46470, 
    47280, 
    52890, 
    56810, 
    60580, 
    63760, 
    67020, 
    68990, 
    72450, 
    76190, 
    79150, 
    81140, 
    84840, 
    87120, 
    90470, 
    94710, 
    98480, 
    99530, 
    104540, 
    106580, 
    109840, 
    111560, 
    116670, 
    120310, 
    122530, 
    126560, 
    129860, 
    132965, 
    134530, 
    136390, 
    137990, 
    139395, 
    142010, 
    145970, 
    148320, 
    151230, 
    155480, 
    159130, 
    159630, 
    161260, 
    163880, 
    164710, 
    168840, 
    172210, 
    174480, 
    175660, 
    176490, 
    177420, 
    180560, 
    183210, 
    185190, 
    189380, 
    192570, 
    194570, 
    196190, 
    199070, 
    203140, 
    205120, 
    206440, 
    209300, 
    210380, 
    212090, 
    213400, 
    216830, 
    219910, 
    223600, 
    226830, 
    230840, 
    234410, 
    236040, 
    239110, 
    242470, 
    246040, 
    247700, 
    250950, 
    253390, 
    255280, 
    259570, 
    260370, 
    263690, 
    264320, 
    268590, 
    272080, 
    274780, 
    277220, 
    281380, 
    283740, 
    288050, 
    291370, 
    293750, 
    295470, 
    300120, 
    303690, 
    304730, 
    308510, 
    310970, 
    312100, 
    316230, 
    319240, 
    321660, 
    322990, 
    327000, 
    330120, 
    334060, 
    336330, 
    338970, 
    342410, 
    343930, 
    348090, 
    353340, 
    355840, 
    359050, 
    361690, 
    365900, 
    369020, 
    372690, 
    375800, 
    378880, 
    382270, 
    386220, 
    391010, 
    394560, 
    395660, 
    398580, 
    400730, 
    402960, 
    405980, 
    410370, 
    413930, 
    417490, 
    419630, 
    421050, 
    422960, 
    426590, 
    429820, 
    430430, 
    432710, 
    434890, 
    438400, 
    440470, 
    444430, 
    447040, 
    448330, 
    451350, 
    452830, 
    455630, 
    459500, 
    463070, 
    465990, 
    470400, 
    473960, 
    479430, 
    480250, 
    483720, 
    486680, 
    489510, 
    490530, 
    494970, 
    498140, 
    502040, 
    505980, 
    510410, 
    514429, 
    518549, 
    522000, 
    526180, 
    530940, 
    532670, 
    535780, 
    536660, 
    540510, 
    543120, 
    546250, 
    549540, 
    552140, 
    553810, 
    558840, 
    562500, 
    567030, 
    568990, 
    572100, 
    573890, 
    576680, 
    580010, 
    582450, 
    586060, 
    589650, 
    594690, 
    598340, 
    600880, 
    601350, 
    604080, 
    606950, 
    609700, 
    612090, 
    615320, 
    618070, 
    622610, 
    625480, 
    628710, 
    631750, 
    635130, 
    639790, 
    643990, 
    646220, 
    649510, 
    653320, 
    656790, 
    658510, 
    659990, 
    663860, 
    667360, 
    671110, 
    674290, 
    676490, 
    680590, 
    685070, 
    689760, 
    692190, 
    696480, 
    699850, 
    703790, 
    706810, 
    708250, 
    711870, 
    713010, 
    715760, 
    717410, 
    718650, 
    723620, 
    726950, 
    729040, 
    731140, 
    734230, 
    737690, 
    740400, 
    745030, 
    747930, 
    751320, 
    754500, 
    760090, 
    764080, 
    764910, 
    767330, 
    769410, 
    773210, 
    775970, 
    782150, 
    786490, 
    788600, 
    793960, 
    797910, 
    801360, 
    805450, 
    810870, 
    814190, 
    818860, 
    821470, 
    825170, 
    828350, 
    832600, 
    833300, 
    838750, 
    840730, 
    844200, 
    845420, 
    848410, 
    851800, 
    855420, 
    859440, 
    862900, 
    865630, 
    868610, 
    871590, 
    876680, 
    881590, 
    883030, 
    886735, 
    889200, 
    893580, 
    895050, 
    898850, 
    901580, 
    904820, 
    905560, 
    910710, 
    913260, 
    917220, 
    919320, 
    922640, 
    925540, 
    930835, 
    932660, 
    937710, 
    941370, 
    946510, 
    948265, 
    950030, 
    952400, 
    957520, 
    958980, 
    963370, 
    965230, 
    967900, 
    971760, 
    975880, 
    977820, 
    979490, 
    982680, 
    987560, 
    988140, 
    990180, 
    995990, 
    997600, 
    1003380, 
    1005310, 
    1008610, 
    1010620, 
    1013330, 
    1018490, 
    1021110, 
    1024000, 
    1026880, 
    1029109, 
    1032319, 
    1033670, 
    1034990, 
    1037890, 
    1043990, 
    1046210, 
    1048960, 
    1051980, 
    1055920, 
    1059860, 
    1061180, 
    1063860, 
    1066530, 
    1068940, 
    1071030, 
    1072640, 
    1076180, 
    1080380, 
    1084310, 
    1085850, 
    1089700, 
    1092650, 
    1097110, 
    1100710
  ], 
  "text": [
    "ARMANDO FOX: And I think it's unanimous for green-- modulo", 
    "abstention.", 
    "So yeah.", 
    "If you're an app operator, slowest queries, or anything having to do with", 
    "response time, slowest views, those are all useful, because A, they tell", 
    "you something directly about the experience the customer's having, and", 
    "B, you can take action on them, right?", 
    "If you know what the three slowest views are, you can go in and figure", 
    "out what's making them slow.", 
    "If you know what the 99th percentile of response time is, you can go look", 
    "action by action and say which actions are the most egregious contributors to", 
    "having poorer response time than I want.", 
    "But the maximum CPU utilization, what would you do with that number?", 
    "It's not clear how you map that to some action you can take, and it's not", 
    "even clear that maximum CPU utilization will result in your app", 
    "being a lot slower.", 
    "For example, if the rendering time, or if the time to deliver a page in your", 
    "application is often being dominated by the database, usually the database", 
    "is running on a separate machine, so the maximum CPU utilization on your", 
    "server machine may not even be a major contributor to that.", 
    "So the question you should ask yourself with metrics is, if I had", 
    "this information, what would I do with it?", 
    "If you can use the information in some way to investigate how to fix a", 
    "problem, or if the information is telling you something directly about", 
    "the customer experience, that's usually what you should favor when", 
    "you're deciding what to collect.", 
    "So the goal of collecting metrics and examining your system is to understand", 
    "how to make it better, how to make it faster.", 
    "And there's two things we're going to talk about that will help you do that.", 
    "We've already mentioned that the only aspect of the three tier architecture", 
    "that you can't sort of replicate your way out of trivially is when it comes", 
    "to the database.", 
    "So once you have saturated your database, you need to start thinking", 
    "about more sophisticated strategies at the back end.", 
    "Therefore what you should do is don't get to that point, hold off getting to", 
    "that point for as long as you can.", 
    "And we'll talk about two techniques that are often overlooked and are easy", 
    "for you as a developer to put in place, that will greatly prolonged the", 
    "bang for the buck that you get out of your database.", 
    "Remember I said, by way of example, all of Pivotal Tracker is one big", 
    "database, all of SurveyMonkey is one big database.", 
    "So if your apps are outrunning the database, I hope you're as successful", 
    "as SurveyMonkey or Pivotal Tracker.", 
    "Otherwise you need to be doing these things.", 
    "So we'll talk first about caching.", 
    "The idea behind caching is simple.", 
    "A way to make the database fast is not to use it.", 
    "So if the answer to some query hasn't changed, there's no reason to go back", 
    "to the database to redo that query.", 
    "So any time you're talking about caching, whether it's in a database", 
    "situation, or whether like in 61C, you're talking about caching the", 
    "contents of part of DRAM, there's basically two different problems you", 
    "have to deal with.", 
    "You have to decide what are you going to cache?", 
    "And how do you name the things that you're caching, so that you can find", 
    "them later.", 
    "And how do you detect when the version that's in your cache is stale?", 
    "In other words, it's now out of date with what you think of as reality, and", 
    "what actions do you take to resolve that situation?", 
    "Do you update the cache version?", 
    "Do you blow it away?", 
    "What do you do?", 
    "So these two ideas about caching come up over and over again in computer", 
    "science, and we're going to show how you deal with them in the context of", 
    "database caching in a SaaS app.", 
    "In particular in terms of identifying what you can cache, the two obvious", 
    "things from the Rails point of view is you can cache an entire view, so the", 
    "result of essentially doing an entire action.", 
    "Or you can cache parts of a view.", 
    "And we've already seen as a preview, that you can put views together by", 
    "assembling partials, so even if you can't cache the whole view, sometimes", 
    "you can cache enough parts of the view that you get rid of the", 
    "most expensive parts.", 
    "So just to make clear, caching is an important enough concept that it", 
    "occurs all over the place.", 
    "This is my cache flow diagram.", 
    "Thank you, I'm here all week.", 
    "And the thing to take away from this is basically at every tier of the", 
    "system, including the tiers that we haven't directly programmed, which is", 
    "the browser and the database, there's some kind of caching that's occurring.", 
    "So if we actually do it from the user's point of view, when the user", 
    "first makes a request via their browser, if the browser has a cached", 
    "copy of the page and has reason to believe the page hasn't changed, then", 
    "this is as far as it goes, right?", 
    "The browser will never even attempt to communicate with the web server.", 
    "The slightly more efficient, or the slightly more general version of that", 
    "is the browser will check with the server and basically say, hey has the", 
    "following content changed?", 
    "And if the server says no it hasn't, then there's no need for the server to", 
    "do the work to regenerate the content, the browser will go ahead and use", 
    "whatever it has saved from the last time.", 
    "If you get past that point, the web server has a cache of pages that have", 
    "been served recently.", 
    "So you remember that the web server has no knowledge about how those pages", 
    "are generated, right?", 
    "That all happens back here, but the web server knows what the HTML is that", 
    "ultimately gets delivered back to the browser, and it can keep information", 
    "about how long that same HTML is valid.", 
    "Now this is the first place you run into the issue of naming, right?", 
    "If you've got two different users coming in with the same URL, does that", 
    "mean that they're being served the same page?", 
    "Well, if they're logged into the same site, the index action for that site", 
    "might look different for the two users, so maybe it's a combination of", 
    "the URL and what's in the cookie.", 
    "So down that path lies madness.", 
    "The easier thing to do is just let the web server know is this cachable or", 
    "not, when does it expire, and we'll see how to do this at the Rails level", 
    "momentarily.", 
    "Assuming the web server can't serve the request out of cache, now we start", 
    "hitting the rail stack and there's still a bunch of things we can do to", 
    "save some work.", 
    "As we'll see, the action cache is basically just like page caching", 
    "except that because it occurs as part of the controller, it can have", 
    "knowledge about the semantics of the application.", 
    "What does that mean?", 
    "It means, for example, that as the designers of the application, we know", 
    "of certain controller actions, for example, are protected by a before", 
    "filter the would require the user to log in, so when we're making a", 
    "decision about whether something can be served out of the cache, we can", 
    "take into account information about the app, right?", 
    "The information that is by definition absent once you get to the left of", 
    "this point.", 
    "If that's not possible, if there's no complete action whose results can be", 
    "stored and delivered later on, we can still cache parts of the view.", 
    "And remember that views consist of fragments.", 
    "The individual fragments can be put together inside of a layout template.", 
    "Maybe some of those fragments can be saved, and you can avoid the work of", 
    "regenerating them and then as a last resort, if that doesn't work, most", 
    "commercial databases keep a pretty substantial cache of queries they have", 
    "served recently, so if you repeat the same query and it has the same", 
    "results, the database may be able to avoid actually performing the query,", 
    "it will just give you the previous query result back, right?", 
    "If that happens often, you're probably not doing enough in your part of the", 
    "app, because you probably could have avoided recomputing that query too.", 
    "So the two places that we're going to look at are what happens when you want", 
    "to cache the results of an entire page view, and both page and action caching", 
    "actually do that.", 
    "And what if you can't do that, but you have the opportunity to cache only", 
    "part of a view, and the fragment cache helps with that.", 
    "So when would you use page or action caching?", 
    "The names are a little bit confusing because the truth is they both have", 
    "the same overall effect, which is they cache an entire view, the entire HTML", 
    "that would go back to the browser as the result of a controller action.", 
    "So these are only appropriate when the output of the entire action is", 
    "suitable for caching.", 
    "What would be an example of that?", 
    "Well if you have--", 
    "and let's go back to our Rotten Potatoes example, the listing of all", 
    "movies, in the absence of those little check boxes that let", 
    "you filter the view.", 
    "The listing of all movies is certainly cachable.", 
    "Now does that mean that it never changes?", 
    "No of course, when you add movies, or delete movies, or change stuff, then", 
    "the index view would have to be regenerated.", 
    "But if those changes are relatively rare compared to how often somebody", 
    "would request the index view, then it's probably worth catching the whole", 
    "view, right?", 
    "Why is page caching useful verses action caching, with", 
    "reference to our diagram?", 
    "Page caching can be handled entirely in the web server.", 
    "So if you designate something as being page cachable, and you actually hit in", 
    "the page cache, then Rails will never even see that request, right?", 
    "Your application will not log that anything has happened.", 
    "So action caching also delivers the entire cache content of the page, but", 
    "it runs in the controller which means that it takes care of running filters.", 
    "So the corollary of this is don't mix filtered and non filtered code paths", 
    "in the same action.", 
    "I'll show an example in a minute, but if you've got an action that behaves", 
    "differently depending on the result of a filter, what you really want to do", 
    "is break it into separate actions, one of which is protected by the filter,", 
    "and one of which is not.", 
    "We'll show an example of that in a moment, but just to give you a pitfall", 
    "here, remember I said one of the things you always have to deal with", 
    "any kind of caching is how do you name the things that are being cached?", 
    "Well, as we've seen, in software as a service generally, and certainly in", 
    "Rails, constructing RESTful URIs is the way that we name things, right?", 
    "Now technically, you could say that both of these URIs are RESTful, in the", 
    "sense that they both named the same resource, a listing of the movie index", 
    "where only the PG rated movies are shown, for example.", 
    "But from a caching point of view, these are actually different, in that", 
    "when Rails' built-in mechanisms for caching will look at the URL, but they", 
    "won't look at the parameters.", 
    "So from Rails' point of view, anything after the question mark is as if it", 
    "weren't there.", 
    "And if things after the question mark affect the way that the cached object", 
    "would be rendered, then you're going to be in trouble, because you're going", 
    "to have things that appear to Rails' point of view to be the same, because", 
    "the URL part matches, even though as far as you're concerned, they're not", 
    "the same, because the parameters have some effect on", 
    "how the action performs.", 
    "The solution is, if you've been using RESTful URIs of the sort that we've", 
    "recommended, then you have something that probably looks more like this,", 
    "and now indeed the same URI implies the same contents in the view, and", 
    "that makes it safe for page caching, right?", 
    "Now this again, this is important because page caching especially", 
    "happens entirely in the web server, right?", 
    "It can't rely on any application-specific knowledge.", 
    "So the idea that your routes actually would have different parameters and", 
    "stuff, Apache doesn't know about any of those things, right?", 
    "This has to be based on URLs knowing whether it's safe to do.", 
    "So about this idea that you could break up controller actions.", 
    "And here's a problematic example where I'm trying to enable page caching for", 
    "let's say the index action of one of my controllers, but inside the action,", 
    "I'm doing different things depending on whether the user's logged in or", 
    "not, right?", 
    "If they're logged in, I'm going to display something, otherwise, I'm", 
    "going to basically make them login before going any further.", 
    "This is bad, because now you can't cache the page at all, right?", 
    "Because if you cache it, then anybody who visits this, whether they're", 
    "logged in or not, is going to see the same thing, because page caching", 
    "completely bypasses the filters.", 
    "So a better way to do it is, I can cache the public index page-- assuming", 
    "the public index page really is the same for everybody and doesn't require", 
    "you to be logged in, it's perfectly fine to do page caching on that.", 
    "And remember page caching is sort of the best you can do on the server", 
    "side, because now you've delegated it all the way to the presentation tier.", 
    "Your app will never actually get to see this request, for the logged in", 
    "index, which is the one that's now protected by it's own before filter.", 
    "I'll turn on action caching for that, right?", 
    "I can't do page caching for that because the whole point of having the", 
    "separate action is I want the before filter to run before that action runs.", 
    "And the only way to run the before filter is to have the caching actually", 
    "be aware of what's happening in the controller.", 
    "So this is a pretty good compromise, right?", 
    "Now we can turn on page caching and just not even deal with this request.", 
    "And we can turn on action caching, which still lets us get most of the", 
    "benefit, but we capture all of the page content, but we correctly run the", 
    "before filter in case the before filter would want to stop the show.", 
    "What happens when you can't do these things?", 
    "In this case, you might say, well we can at least build up, since a view is", 
    "usually built up of a bunch of pieces, we can cache parts of those views.", 
    "And when you're rendering the HTML, you've got these instance variables", 
    "coming from the controller, you're going to turn that into HTML.", 
    "You could save the time required to do that, which could be nontrivial.", 
    "And an example of how you'd do this in a view, is you would use the cache", 
    "directive, which takes a do block, basically, you take whatever you had", 
    "before in your view, and you just put it inside of a cache", 
    "block with cache do.", 
    "You can give it an optional name that you can use to explicitly expire the", 
    "fragments later.", 
    "There's more detail on this in the book, but there's actually a number of", 
    "different granularities you can cache at.", 
    "You can cache individual objects.", 
    "You can cache collections where each object gets cached separately.", 
    "And in this case, the most important thing is to detect when the cache", 
    "versions no longer match the database.", 
    "We've already seen the structure of how this works.", 
    "When we talked about design patterns, one of the patterns that we talked", 
    "about was observer, which is, you want something off to the side that gets", 
    "notified when certain important events happen.", 
    "But without having to know the details of how the implementation of those", 
    "events occurs in the observed model.", 
    "We saw a diagram of what the observer design pattern looks like, and this is", 
    "exactly how caching is implemented in Rails.", 
    "There is a type of Rails model that is provided for you called a sweeper,", 
    "that observes individual models in your app and is where you put in your", 
    "caching logic.", 
    "So what's an example of one of these?", 
    "So it's just a new kind of model.", 
    "I mentioned during the design patterns discussion, that observer is one of", 
    "the design patterns that Rails actually has built-in support for.", 
    "In that there is an observe directive that is part of these sweepers.", 
    "So all I need to do is say which class I'm going to observe.", 
    "And I'm going to add some additional hooks.", 
    "These are in addition to anything the observed class already does.", 
    "So if I already had after-save and after-destroy hooks for my class,", 
    "these will be in addition to not replacing it.", 
    "So what I've done in this simple example is I've created a generic", 
    "invalidation method that will expire any action that might depend on new", 
    "movies being created or destroyed or edited.", 
    "And it will also expire, remember in my example, this is the name that I", 
    "gave to the fragment was cached inside my page, right?", 
    "And the idea was that I had a collection of movies and I was going", 
    "to cache the result of rendering the whole collection under the name movies", 
    "with ratings, so this invalidation is probably more coarse grained than it", 
    "needs to be.", 
    "What I'm saying is any time any movie is edited or any movie is destroyed, I", 
    "will invalidate the entire index view.", 
    "I'll invalidate all copies of the show view.", 
    "And this is--", 
    "invalidating all copies of the show view is probably needless.", 
    "What I really want to do is just invalidate the show view corresponding", 
    "to the particular movie that was deleted or modified.", 
    "So the Rails 3 documentation and an example in the book in a little more", 
    "detail shows how you do that on a per model basis.", 
    "So I'm kind of hitting this thing with a sledgehammer.", 
    "I'm also expiring the fragment that we had.", 
    "Let's go back to our code snippet.", 
    "So when I told Rails to cache the result of rendering this collection, I", 
    "did that by wrapping it in a cache do block, and I gave it a symbolic name.", 
    "I just called it movies with ratings.", 
    "So now, the result of caching this, the HTML responding doing this is, is", 
    "going to be cached under this name.", 
    "And then in my sweeper, I explicitly expire the fragment", 
    "that has that name.", 
    "So you could see the general pattern here, there's sort of two ways that", 
    "you can name cachable things in Rails.", 
    "One is you can name things at the level of the action", 
    "that produced them.", 
    "So if I'm caching the entire output of the index action or the show action, I", 
    "could say invalidate those, expire them.", 
    "A second way is I can explicitly say cache do, and I can give the cache", 
    "fragment a name that I pick.", 
    "And then when it's time to expire it, I expire it based on that name.", 
    "And although it's not in this example, a third way, which is discussed in the", 
    "book, is Rails has a convention for naming for example, the fragment of a", 
    "view associated with a particular movie ID.", 
    "So the less conservative way to do invalidate would be call invalidate,", 
    "or have a version of invalidate that when a movie is saved or destroyed, it", 
    "expires the index action as a whole, but only expires the show action for", 
    "that movie, and it leaves all the other ones cached.", 
    "Does everybody understand why the way that I'm doing", 
    "it is somewhat wasteful?", 
    "This has expired, the result of caching any show action, just because", 
    "a movie has changed, right?", 
    "So I'm sort of throwing away all that possibly cached show actions for the", 
    "movies that haven't changed.", 
    "So I did that keep the example simple.", 
    "And then at the top of movies controller, I declare that I'm going", 
    "to use this sweeper, and I'm going to turn on action caching for the index", 
    "action and for the show action.", 
    "So that's how the pieces work together.", 
    "So how much does this help if you do it?", 
    "We actually did a sort of micro benchmark for deploying Rotten", 
    "Potatoes on Heroku.", 
    "This is one of the really simple versions.", 
    "And if you look on the log files, you can get a sense of how long it takes", 
    "to do these different actions.", 
    "So these are timings in milliseconds, with page caching, with action", 
    "caching, and with no caching.", 
    "So we basically seeded the database with 1,000 movies, and about 100", 
    "reviews per movie.", 
    "And you can see the huge win with page caching, right?", 
    "Only 21 milliseconds to serve the index page and that's because, like I", 
    "said, when you're doing this, Rails doesn't even see these requests, these", 
    "are handled entirely in the presentation tier.", 
    "And you can see that in a log file, there's just not in the Rails log,", 
    "they're in the dynos log.", 
    "Action caching is almost as good because you get to Rails, but it", 
    "doesn't have to do any work.", 
    "And no caching at all.", 
    "This is the naive version, right, this probably what your app is doing now.", 
    "So your app is probably taking this long, but with a small amount of work", 
    "it could probably take this long.", 
    "So if you do the math, just multiplying the length of the bars,", 
    "with the same number of servers, or the case of Heroku, the same number of", 
    "dynos, because the dyno was sort of the unit of concurrency, you could get", 
    "8 to 21 times as much bang for the same buck, without really adding any", 
    "more resources.", 
    "So at this level, it's really just saving you money, but as you get", 
    "closer to what your database can handle, it's actually increasing the", 
    "number of users that you can serve without increasing", 
    "your database capacity.", 
    "So here's a question about caching.", 
    "Suppose you want to implement this new feature where if a visitor is under", 
    "17, and let's just assume that you can tell from something about when they", 
    "log in, if they're under 17, they should not see NC-17", 
    "movies in any listing.", 
    "So they shouldn't see it in the list of movies, they shouldn't be able to", 
    "directly submit a URL to view the details for it.", 
    "So what kinds of caching would help in terms of getting this functionality?", 
    "Page, action, fragment, or some combination of them?"
  ]
}