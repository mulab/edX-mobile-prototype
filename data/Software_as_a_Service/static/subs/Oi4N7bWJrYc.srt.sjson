{
  "start": [
    1450, 
    2230, 
    4500, 
    9320, 
    10950, 
    13030, 
    14210, 
    18560, 
    22940, 
    24970, 
    26590, 
    29450, 
    30610, 
    31600, 
    33740, 
    34610, 
    37140, 
    38990, 
    40090, 
    42100, 
    46680, 
    48000, 
    50550, 
    53660, 
    57070, 
    58780, 
    61570, 
    62330, 
    64819, 
    69480, 
    73720, 
    75720, 
    76020, 
    80110, 
    81390, 
    82900, 
    84520, 
    88080, 
    89890, 
    95110, 
    99960, 
    102530, 
    103000, 
    107340, 
    110320, 
    112710, 
    113540, 
    115050, 
    116690, 
    118140, 
    120590, 
    121360, 
    124720, 
    129160, 
    131140, 
    133550, 
    134710, 
    138680, 
    142290, 
    146410, 
    147700, 
    153940, 
    155880, 
    160580, 
    163300, 
    164330, 
    166240, 
    170290, 
    174000, 
    176480, 
    177030, 
    178240, 
    182390, 
    183225, 
    183500, 
    186920, 
    188400, 
    194600, 
    197360, 
    198990, 
    200710, 
    202360, 
    203820, 
    204890, 
    207970, 
    208800, 
    213590, 
    216820, 
    220060, 
    222680, 
    225140, 
    225780, 
    227240, 
    230520, 
    230750, 
    233310, 
    236850, 
    240070, 
    243130, 
    245660, 
    248330, 
    251840, 
    252540, 
    255330, 
    258589, 
    260500, 
    261940, 
    265200, 
    269000, 
    271100, 
    273670, 
    274380, 
    275230, 
    277220, 
    279740, 
    282320, 
    285290, 
    289820, 
    292330, 
    294950, 
    297150, 
    300200, 
    301900, 
    304820, 
    305930, 
    309540, 
    310790, 
    314030, 
    315170, 
    318370, 
    319760, 
    321840, 
    325060, 
    327990, 
    331030, 
    334300, 
    337060, 
    339640, 
    344500, 
    347520, 
    348980, 
    349230, 
    352630, 
    356400, 
    358850, 
    360200, 
    363550, 
    365650, 
    369320, 
    372840, 
    375840, 
    378990, 
    381680, 
    384080, 
    387530, 
    391790, 
    392530, 
    395760, 
    398590, 
    400700, 
    401410, 
    402140, 
    403250, 
    407180, 
    410410, 
    413250, 
    415260, 
    416430, 
    419460, 
    423580, 
    426220, 
    430390, 
    434130, 
    435030, 
    436480, 
    438410, 
    441750, 
    445510, 
    446070, 
    448690, 
    449290, 
    451870, 
    454730, 
    456660, 
    460170, 
    462080, 
    462870, 
    466420, 
    467470, 
    470130, 
    472530, 
    473730, 
    476480, 
    480780, 
    482590, 
    485530, 
    487060, 
    490200, 
    492760, 
    495720, 
    499160, 
    502230, 
    504250, 
    505520, 
    506310, 
    507210, 
    508430, 
    510090, 
    511030, 
    512179, 
    515299, 
    518190, 
    521299, 
    524120, 
    527230, 
    531140, 
    532500, 
    532710, 
    536360, 
    537410, 
    539610, 
    542070, 
    545710, 
    547870, 
    548510, 
    554890, 
    555620, 
    560240, 
    564210, 
    568840, 
    571760, 
    572760, 
    575890, 
    579790, 
    581480, 
    585090, 
    585290, 
    588280, 
    589400, 
    592310, 
    597680, 
    602120, 
    602320, 
    605400, 
    606790, 
    608260, 
    611130, 
    614720, 
    617980, 
    620930, 
    622580, 
    626210, 
    630910, 
    635430, 
    637530, 
    637660, 
    639190, 
    643710, 
    647950, 
    649840, 
    650090, 
    653980, 
    657580, 
    658490, 
    658700, 
    662650, 
    664290, 
    667550, 
    669080, 
    671280, 
    673190, 
    674010, 
    676940, 
    678630, 
    678840, 
    680190, 
    683660, 
    686680, 
    690680, 
    693500, 
    694460, 
    694820, 
    697940, 
    700750, 
    703160, 
    705740, 
    707460, 
    711460, 
    715090, 
    718480, 
    720040, 
    721340, 
    724020, 
    725100, 
    728520, 
    730470, 
    733240, 
    735780, 
    737420, 
    741850, 
    743360, 
    746720, 
    751150, 
    754360, 
    757400, 
    760010, 
    761870, 
    766800, 
    768890, 
    772350, 
    775060, 
    778560, 
    780730, 
    784740, 
    787820, 
    790450, 
    792240, 
    792780, 
    795940, 
    801040, 
    806270, 
    806670, 
    809510, 
    812180, 
    815000, 
    818730, 
    822830, 
    823670
  ], 
  "end": [
    2230, 
    4500, 
    9320, 
    10950, 
    13030, 
    14210, 
    18560, 
    22940, 
    24970, 
    26590, 
    29450, 
    30610, 
    31600, 
    33740, 
    34610, 
    37140, 
    38990, 
    40090, 
    42100, 
    46680, 
    48000, 
    50550, 
    53660, 
    57070, 
    58780, 
    61570, 
    62330, 
    64819, 
    69480, 
    73720, 
    75720, 
    76020, 
    80110, 
    81390, 
    82900, 
    84520, 
    88080, 
    89890, 
    95110, 
    99960, 
    102530, 
    103000, 
    107340, 
    110320, 
    112710, 
    113540, 
    115050, 
    116690, 
    118140, 
    120590, 
    121360, 
    124720, 
    129160, 
    131140, 
    133550, 
    134710, 
    138680, 
    142290, 
    146410, 
    147700, 
    153940, 
    155880, 
    160580, 
    161830, 
    164330, 
    166240, 
    170290, 
    174000, 
    176480, 
    177030, 
    178240, 
    182390, 
    183225, 
    183500, 
    186920, 
    188400, 
    190685, 
    197360, 
    198990, 
    200710, 
    202360, 
    203820, 
    204890, 
    207970, 
    208800, 
    213590, 
    216820, 
    220060, 
    222680, 
    225140, 
    225780, 
    227240, 
    230520, 
    230750, 
    233310, 
    236850, 
    240070, 
    243130, 
    245660, 
    248330, 
    251840, 
    252540, 
    255330, 
    258589, 
    260500, 
    261940, 
    265200, 
    269000, 
    271100, 
    273670, 
    274380, 
    275230, 
    277220, 
    279740, 
    282320, 
    285290, 
    289820, 
    292330, 
    294950, 
    297150, 
    300200, 
    301900, 
    304820, 
    305930, 
    309540, 
    310790, 
    314030, 
    315170, 
    318370, 
    319760, 
    321840, 
    325060, 
    327990, 
    331030, 
    332280, 
    337060, 
    339640, 
    344500, 
    347520, 
    348980, 
    349230, 
    352630, 
    356400, 
    358850, 
    360200, 
    363550, 
    365650, 
    369320, 
    372840, 
    375840, 
    378990, 
    381680, 
    384080, 
    387530, 
    391790, 
    392530, 
    395760, 
    398590, 
    400700, 
    401410, 
    402140, 
    403250, 
    407180, 
    410410, 
    413250, 
    415260, 
    416430, 
    419460, 
    423580, 
    426220, 
    430390, 
    434130, 
    435030, 
    436480, 
    438410, 
    441750, 
    445510, 
    446070, 
    448690, 
    449290, 
    451870, 
    454730, 
    456660, 
    460170, 
    462080, 
    462870, 
    466420, 
    467470, 
    470130, 
    472530, 
    473730, 
    476480, 
    480780, 
    482590, 
    485530, 
    487060, 
    490200, 
    492760, 
    495720, 
    499160, 
    502230, 
    504250, 
    505520, 
    506310, 
    507210, 
    508430, 
    510090, 
    511030, 
    512179, 
    515299, 
    518190, 
    521299, 
    524120, 
    527230, 
    531140, 
    532500, 
    532710, 
    536360, 
    537410, 
    539610, 
    542070, 
    545710, 
    547870, 
    548510, 
    554890, 
    555620, 
    560240, 
    564210, 
    568840, 
    571760, 
    572760, 
    575890, 
    579790, 
    581480, 
    585090, 
    585290, 
    588280, 
    589400, 
    592310, 
    597680, 
    602120, 
    602320, 
    605400, 
    606790, 
    608260, 
    611130, 
    614720, 
    617980, 
    620930, 
    622580, 
    626210, 
    630910, 
    635430, 
    637530, 
    637660, 
    639190, 
    643710, 
    647950, 
    649840, 
    650090, 
    653980, 
    657580, 
    658490, 
    658700, 
    662650, 
    664290, 
    667550, 
    669080, 
    671280, 
    673190, 
    674010, 
    676940, 
    678630, 
    678840, 
    680190, 
    683660, 
    686680, 
    690680, 
    693500, 
    694460, 
    694820, 
    697940, 
    700750, 
    703160, 
    705740, 
    707460, 
    711460, 
    715090, 
    718480, 
    720040, 
    721340, 
    724020, 
    725100, 
    728520, 
    730470, 
    733240, 
    735780, 
    737420, 
    741850, 
    743360, 
    746720, 
    751150, 
    754360, 
    757400, 
    760010, 
    761870, 
    766800, 
    768890, 
    772350, 
    775060, 
    778560, 
    780730, 
    784740, 
    787820, 
    790450, 
    792240, 
    792780, 
    795940, 
    801040, 
    806270, 
    806670, 
    809510, 
    812180, 
    815000, 
    818730, 
    822830, 
    823670, 
    826450
  ], 
  "text": [
    "ARMANDO FOX: So how about this one?", 
    "Let's suppose we say, we could create a review.", 
    "And we will explicitly assign a value to the movie_id column based on the", 
    "idea of a particular movie.", 
    "Will this work?", 
    "This is fine, right?", 
    "Remember, the only requirement for establishing the relationship in terms", 
    "of the database is that the movie_id field in the Reviews table has to be", 
    "filled in with the ID of the correct movie.", 
    "So, this will certainly do it, right?", 
    "It's arguably not the most beautiful way to do it because it kind of", 
    "violates the abstraction.", 
    "But it'll work.", 
    "We'll end up with a database having the right stuff in it.", 
    "How about this one?", 
    "Building a review, and then saving the review.", 
    "Who said no, and why?", 
    "Yes.", 
    "I applaud you for putting that point of view forward.", 
    "However, as it turns out, it's not quite correct.", 
    "You were heading in the right direction, though.", 
    "But let's examine why.", 
    "So the objection was this--", 
    "m.reviews will return an array, or at least some sort of collection.", 
    "And we shouldn't be calling Build on that.", 
    "We should be calling it with capital Review as the receiver, I think is", 
    "what you said.", 
    "OK, so let's start with the second part of that.", 
    "Remember, the difference between Build and plain old New is that Build has to", 
    "know something about the primary key of the thing that is ultimately going", 
    "to be associated to the review.", 
    "Right?", 
    "So we can't really call capital Review.build because we can't call", 
    "capital Review on a movie.", 
    "We can ask that--", 
    "we can say that a movie--", 
    "we can ask what its reviews are, and we can try to use the information", 
    "about that to build a new review.", 
    "But capital Review.build wouldn't make sense because there'd be no place for", 
    "Build to get the movie ID from.", 
    "And you could say, well how about m dot capital Review.build?", 
    "Well OK.", 
    "But then you're calling capital Review on a receiver which is an individual", 
    "movie, and that doesn't make sense because capital Review is a class.", 
    "So, I could see your line of reasoning, and it was a", 
    "sound line of reasoning.", 
    "But in this case, not quite correct.", 
    "This, in fact, will work.", 
    "You can build a new review.", 
    "The fact that you're using Build will populate it with the ID", 
    "of the correct movie.", 
    "And then you save the review, and you're off to the races.", 
    "How about adding a review on to the existing list of Review?", 
    "Notice that I've used New as opposed to Build.", 
    "Is that problematic?", 
    "No.", 
    "It's not problematic because what's the--", 
    "Yeah, it's true that at this point, when I call just Review.new, the thing", 
    "that is returned by this expression will not have the movie_id field", 
    "properly filled in.", 
    "But cleverly, the Active Record Reviews object defines the behavior of", 
    "this to say, aha, you're adding a new review.", 
    "So I will populate it with the idea of my receiver.", 
    "What?", 
    "No, it's true.", 
    "So again, your reasoning is sound, right?", 
    "Your reasoning was absolutely right in that you would think that you need for", 
    "this object to ultimately inherit the correct primary key ID.", 
    "And from this expression, it doesn't seem like there's any place that it", 
    "could get it.", 
    "But where is it going to get it?", 
    "Because the behavior of this operator is defined by whatever", 
    "its receiver is.", 
    "Right?", 
    "What is the class of-- what is the thing returned by m.reviews?", 
    "This is a great philosophical question.", 
    "Is it actually an array, as somebody earlier claimed?", 
    "All we know about it is that it responds to methods like each, right?", 
    "It quacks like an array.", 
    "You can iterate over it.", 
    "You can add things on to the end of it.", 
    "But in fact, it is not an array.", 
    "It isn't even a query.", 
    "It's an object representing the ability to get this information out of", 
    "the database.", 
    "And it defines this operation to say, ah.", 
    "What this operator's defined as doing is adding a new row to the database.", 
    "In the case of the red one--", 
    "in the case of the red one technically, the second line is", 
    "unnecessary because this is defined as a mutable operator.", 
    "So this will work.", 
    "It's just redundant.", 
    "In the case of Build, it actually happens here.", 
    "Right?", 
    "So here, the review is created in memory.", 
    "And here at the Save, it's actually added to the database.", 
    "In the red example, I technically could have omitted the second line", 
    "because if you look at the documentation for the Append operator,", 
    "it's defined as immediately mutating in the database.", 
    "But that's really just nit picking, right?", 
    "The more important consideration is, where does this one get the value of", 
    "the movie ID?", 
    "And the answer is that it redefines this operator so that it can", 
    "introspect the receiver of reviews.", 
    "Which is preferred, is Dave's question.", 
    "Well, let's see.", 
    "This one is certainly not preferred because it exposes a detail that we'd", 
    "rather not know about, which is the convention of how the foreign key", 
    "field and the primary key field are named.", 
    "Now if you've been following the Rails conventions, you might say, well", 
    "that's not a problem.", 
    "Those are the conventions.", 
    "I'm following them like I'm supposed to.", 
    "What's the problem with exposing it this way?", 
    "One problem is, again, you might be dealing with an application that has", 
    "to talk to a legacy database that doesn't follow that convention.", 
    "And in that case, you'd want to hide this behind something like Build,", 
    "which allows you to override what the column names are.", 
    "So Build is one of the preferred ways of doing it.", 
    "Probably among all the ways, the best one.", 
    "The reason that a lot of people shy away from this is because it", 
    "represents immediate mutation.", 
    "So as soon as this is executed, the review is immediately", 
    "added to the database.", 
    "And in fact, if it doesn't validate, then an exception could be thrown.", 
    "So you'd have to catch that.", 
    "So most people prefer the approach where you use Build to sort of build", 
    "up your object in phases.", 
    "And when you're ready, and you know it's valid, then you call Save and it", 
    "gets written to the database.", 
    "So, there's never just one way to do things.", 
    "But from the way it's listed in this example, the green one is probably the", 
    "one most people would say is preferred.", 
    "So, with the red example, what if you said Review.create instead of", 
    "Review.new?", 
    "That's a good question.", 
    "I think what would happen, but Richard or somebody may have to correct me if", 
    "I'm wrong, is the execution of Review.create would fail if you've", 
    "declared that your review, in order to pass validation, has to be associated", 
    "with a movie.", 
    "Right?", 
    "So one thing we haven't seen yet is typically when you define associations", 
    "like this, you might want to enforce the fact that you're not allowed to", 
    "save a review unless it has a valid movie and valid", 
    "moviegoer attached to it.", 
    "We haven't done that in this example, but typically in an app that actually", 
    "had this functionality, you would.", 
    "In that scenario, Review.create would immediately fail because you would be", 
    "creating a review that doesn't have a foreign key yet, right?", 
    "The foreign key is added by using this operator.", 
    "But if you're creating the review before the foreign key is added, your", 
    "validations will fail, and you'll get an exception.", 
    "That's what I would predict would happen.", 
    "In our example here, because we haven't separately said that a review", 
    "is only valid with the correct foreign key, in our example it would work.", 
    "It will be redundant.", 
    "What would happen is it would get created, but with no foreign key.", 
    "But then the append operator would--", 
    "well, I wonder if it'd get two reviews.", 
    "I'd have to look this up.", 
    "That's a good question.", 
    "Don't do that, is my answer.", 
    "But I think the real answer is you might get two reviews.", 
    "You'd get one resulting from Review.create, and then a second one", 
    "with a properly filled in foreign key resulting from", 
    "using the append operator.", 
    "I think that's what would happen.", 
    "I've never actually tried that, though.", 
    "So the question was, just to clarify, in the red example, indeed in any of", 
    "these examples, are we touching the Movies table?", 
    "We are not touching the Movies table because to represent the relationship", 
    "in the database, the only table the changes is the owned table, right?", 
    "Has many reviews.", 
    "Reviews is the owned table.", 
    "That's the one that carries the foreign key.", 
    "So yeah, in all of these examples, no matter which mechanism we use, or even", 
    "if we did it manually using Where, there's nothing we have to do to the", 
    "Movies table.", 
    "So it ends up not getting touched.", 
    "Good questions.", 
    "Wow, you guys are on the ball.", 
    "OK, we have a little bit of time to start talking about Through", 
    "associations, which are even cooler.", 
    "So hopefully you've got all that, because now it gets even better.", 
    "So let's talk about many to many associations.", 
    "Here's the scenario.", 
    "Moviegoers are going to rate movies by writing reviews that have some number", 
    "of potatoes.", 
    "So, a moviegoer has many reviews, clearly.", 
    "But a movie also has many reviews.", 
    "So, how do we represent this?", 
    "And how do we traverse these associations?", 
    "The first question is, why isn't it enough to use what we've already seen,", 
    "has_many and belongs_to?", 
    "So certainly a moviegoer has many reviews.", 
    "A movie has many reviews.", 
    "But if I want to ask a question like, what are all the movies that I've", 
    "rated, then there's a piece of information missing here.", 
    "We don't have a connection yet between moviegoers and movies.", 
    "So, the way we handle this traditionally, and this is extremely", 
    "common, is we're going to create a new model that models the", 
    "association, itself.", 
    "Does that make sense?", 
    "Let's take a look.", 
    "We have a moviegoer.", 
    "We have movies.", 
    "Sorry, that should be moviegoers plural.", 
    "Movies plural.", 
    "These are our tables.", 
    "So now, in the Reviews table, we're actually going to have two foreign", 
    "keys because each review has to belong to two different things.", 
    "It's going to belong to a particular moviegoer who wrote it, and it's going", 
    "to belong to a particular movie that it is about.", 
    "So, we already know how to say has_many: reviews.", 
    "A moviegoer has_many: reviews A movie has_many: reviews A review now belongs", 
    "to two different things.", 
    "Right?", 
    "Because for any given review, we could legitimately ask to traverse either of", 
    "those arrows.", 
    "The question is how would we now get all the movies", 
    "reviewed by some moviegoer?", 
    "And this is where has_many: through is a big help.", 
    "So, a moviegoer has many reviews.", 
    "We know that.", 
    "But a moviegoer also indirectly has many movies through reviews.", 
    "What does that mean?", 
    "It means that for a given moviegoer, one question I can ask is, what are", 
    "all of the reviews whose moviegoer ID matches that moviegoer?", 
    "And from that list of reviews, I can now ask for each one of those reviews,", 
    "what is the movie that its movie ID points to?", 
    "Does that make sense?", 
    "So what's happening here is again, you could imagine, and this is a good", 
    "exercise to do, to write down by hand the queries that you yourself would", 
    "use to traverse the association.", 
    "And this really is a join because now we're joining on three tables.", 
    "Right?", 
    "We're saying, we're going to take three tables, Moviegoers,", 
    "Reviews, and Movies.", 
    "We're going to take the Cartesian product of all three, but we're going", 
    "to filter out the rows where the moviegoers ID equals moviegoer_id.", 
    "And also movie_id equals the idea of some movie.", 
    "Right?", 
    "So we're going to do a three way join, but we're going to filter out all but", 
    "those rows.", 
    "We could do the same trick for movies.", 
    "It has many moviegoers through reviews.", 
    "And in reviews, we just say that it belongs to each one of these classes.", 
    "So now we could say, given a moviegoer, we could say", 
    "moviegoer.movies, and in fact--", 
    "I don't know if I have moviegoers in my models.", 
    "So I don't want to risk doing a live demo that won't work.", 
    "But we can ask for a movie, who are all the users who rated it.", 
    "We can also ask for all the movies that are rated R. So from all of my", 
    "reviews, which is an innumerable.", 
    "Right?", 
    "It quacks like a collection.", 
    "So I can do a selection over it, which is like a filtering operation, to pick", 
    "only those reviews whose movie has a rating of R. So, oops, oops.", 
    "Sorry about the braces there.", 
    "Right.", 
    "So, basically what I can do is even though the association's going through", 
    "an intermediate table, I can traverse the association", 
    "with a single statement.", 
    "Right?", 
    "I don't have to first say, for a given moviegoer, first say", 
    "moviegoer dot reviews.", 
    "And then for each review, say review dot movie.", 
    "I could just say moviegoer dot movies.", 
    "And essentially I get a single query that does all that for me.", 
    "And by the way, is a lot faster.", 
    "Why?", 
    "Because as you might imagine, relational databases are optimized for", 
    "doing exactly these kinds of queries.", 
    "Right?", 
    "This is what they do well.", 
    "They join tables with Cartesian products, and they filter the results", 
    "based on conditions like equality between foreign keys.", 
    "So it's much faster to ask the database to do this operation than it", 
    "is for you to manually retrieve the intermediate results and do the", 
    "operation yourself.", 
    "Right?", 
    "If you do that, what you're doing is reimplementing part of the database in", 
    "Ruby, a very bad idea from a performance standpoint.", 
    "Although that doesn't stop a lot of people from doing it.", 
    "Is there a question back there?", 
    "Yes, so the question is, could you set up-- let's see.", 
    "In terms of our diagram here, the question was, could I also add another", 
    "table called Things I Watched, or something like that?", 
    "And there would be a relationship that goes from Moviegoers through that", 
    "table over to Movies.", 
    "Yes, you could certainly do that.", 
    "In fact, it's not uncommon to have multiple relationships that touch", 
    "common sets of tables.", 
    "You just have to make sure you declare the has manys and belongs tos in the", 
    "right places, and that the foreign keys are right.", 
    "And then you can decide to traverse the association through either one,", 
    "whichever one makes more sense for that piece of the code.", 
    "So, yes.", 
    "So the question was, if there's two different pathways from a moviegoer to", 
    "a movie, one of them goes through Reviews.", 
    "But let's say, another one goes through Things Watched.", 
    "Then when I say, user.movies, which pathway is it going to follow?", 
    "The short answer to the question is that the association's module lets you", 
    "extend association behaviors with your own methods.", 
    "So from what you're describing, you would probably want to do a separate", 
    "extension, and you give it a different name.", 
    "You would give it like user dot movies by watchness, or some--", 
    "you'd have to make up some name that's meaningful to you, right?", 
    "But there's a way for you essentially leverage the same functionality of", 
    "associations, but define an alternate pathway, yourself.", 
    "But yes, your observation is correct that when I say \"through,\" it has to", 
    "be an unambiguous.", 
    "Having chosen to represent my Through association in this particular way,", 
    "then user.movies is always going to go through that middle one.", 
    "So you can implement what you want, but you have to do it manually, is", 
    "basically the answer.", 
    "So OK.", 
    "Let's close our day with one last question.", 
    "In the previous example, can I say, using the append operator, given a", 
    "user and the movies that that user has reviewed, can I add onto it another", 
    "movie object?", 
    "Assume movie is a valid active record movie object.", 
    "Is this statement legal, and will it do the right thing?", 
    "Yes, because movies quacks like a collection.", 
    "Yes, because the user is the owning side of this association.", 
    "Yes, as long as the movies table has a user_id field or a moviegoer ID, as", 
    "the case may be.", 
    "Or no, for some reason not shown on the slide."
  ]
}