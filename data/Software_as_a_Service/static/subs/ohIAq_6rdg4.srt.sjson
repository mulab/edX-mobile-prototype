{
  "start": [
    700, 
    5250, 
    10880, 
    13380, 
    16480, 
    20200, 
    25920, 
    27820, 
    31670, 
    35740, 
    39380, 
    39850, 
    41440, 
    46100, 
    49520, 
    52850, 
    54910, 
    56010, 
    60270, 
    61620, 
    66660, 
    67470, 
    69010, 
    71690, 
    75190, 
    77900, 
    82320, 
    84100, 
    87970, 
    92110, 
    92640, 
    99840, 
    101270, 
    105630, 
    107720, 
    109290, 
    111750, 
    115690, 
    118300, 
    119320, 
    122500, 
    125610, 
    127500, 
    130090, 
    135570, 
    137570, 
    141200, 
    142700, 
    145980, 
    149140, 
    150440, 
    154740, 
    156170, 
    161190, 
    162170, 
    166160, 
    169850, 
    172830, 
    178420, 
    181100, 
    183330, 
    184730, 
    186310, 
    189660, 
    193370, 
    196730, 
    198040, 
    200590, 
    202880, 
    205330, 
    206800, 
    209840, 
    212270, 
    214560, 
    218370, 
    221750, 
    226410, 
    227110, 
    231890, 
    234210, 
    238740, 
    240170, 
    244210, 
    247490, 
    250060, 
    251660, 
    254740, 
    256630, 
    260940, 
    262500, 
    266390, 
    267470, 
    269350, 
    270260, 
    273430, 
    278400, 
    283410, 
    286270, 
    292190, 
    294990, 
    296000, 
    298420, 
    301340, 
    302450, 
    306850, 
    310960, 
    315040, 
    317840, 
    321760, 
    325500, 
    327180, 
    330470, 
    333330, 
    336270, 
    338080, 
    341270, 
    345100, 
    348440, 
    353320, 
    355480, 
    356740, 
    360690, 
    365190, 
    367390, 
    369090, 
    372000, 
    375110, 
    378960, 
    380250, 
    383560, 
    388870, 
    392400, 
    395220, 
    398870, 
    400920, 
    403420, 
    406360, 
    408740, 
    413700, 
    417250, 
    419650, 
    422770, 
    426830, 
    428880, 
    433090, 
    434730, 
    438240, 
    442130, 
    445480, 
    447570, 
    451130, 
    454200, 
    458300, 
    464430, 
    465220, 
    467100, 
    473040, 
    475790, 
    477340, 
    479710, 
    483160, 
    485630, 
    490000, 
    493530, 
    495990, 
    497510, 
    499360, 
    500560, 
    501280, 
    501910, 
    503220, 
    506650, 
    509580, 
    512210, 
    514150, 
    516490, 
    518539, 
    521700, 
    526160, 
    530730, 
    535560, 
    538610, 
    541440, 
    543290, 
    545480, 
    547540, 
    548290, 
    551350, 
    554970, 
    558250, 
    562870, 
    564150, 
    567840, 
    571770, 
    573610, 
    577240, 
    581500, 
    585200, 
    588620, 
    593100, 
    594380, 
    597100, 
    600260, 
    603830, 
    607560, 
    609870, 
    614090, 
    616620, 
    618180, 
    621370, 
    624490, 
    625860, 
    629240, 
    632550, 
    635810, 
    639400, 
    642390, 
    645290, 
    646300, 
    649880, 
    653390, 
    653930, 
    657130, 
    658430, 
    661920, 
    665790, 
    669020, 
    672520, 
    675530, 
    678910, 
    681050, 
    683900, 
    685700, 
    689350, 
    693220, 
    695860, 
    699210, 
    700330, 
    703810, 
    707900, 
    711050, 
    713730, 
    715880, 
    719720, 
    720350, 
    724610, 
    726890, 
    727800, 
    733000, 
    735660, 
    736990, 
    741050, 
    744800, 
    747420, 
    752060, 
    754300, 
    757180, 
    758940, 
    760990, 
    764230, 
    765530, 
    769230, 
    771990, 
    775090, 
    776030, 
    779550, 
    783560, 
    785730, 
    789180, 
    793220, 
    796000, 
    799010, 
    801970, 
    805090, 
    806270, 
    806640, 
    808910, 
    810390, 
    813110, 
    817890, 
    821300, 
    825510, 
    831820, 
    834020, 
    837430, 
    840240, 
    844400, 
    846480, 
    848660, 
    849800, 
    853140, 
    857690, 
    859860, 
    862330, 
    864200, 
    868170, 
    872620, 
    875240, 
    878930, 
    883330, 
    884730, 
    887170, 
    889360, 
    894240, 
    898070, 
    900620, 
    902120, 
    906680, 
    911010, 
    912300, 
    916580, 
    918860, 
    923020, 
    926030
  ], 
  "end": [
    5250, 
    10880, 
    13380, 
    16480, 
    20200, 
    25920, 
    27820, 
    31670, 
    35740, 
    39380, 
    39850, 
    41440, 
    46100, 
    49520, 
    52850, 
    54910, 
    56010, 
    60270, 
    61620, 
    66660, 
    67470, 
    69010, 
    71690, 
    75190, 
    77900, 
    82320, 
    84100, 
    87970, 
    92110, 
    92640, 
    99840, 
    101270, 
    105630, 
    107720, 
    109290, 
    111750, 
    115690, 
    118300, 
    119320, 
    122500, 
    125610, 
    127500, 
    130090, 
    135570, 
    137570, 
    141200, 
    142700, 
    145980, 
    149140, 
    150440, 
    154740, 
    156170, 
    161190, 
    162170, 
    166160, 
    169850, 
    172830, 
    178420, 
    181100, 
    183330, 
    184730, 
    186310, 
    189660, 
    193370, 
    196730, 
    198040, 
    200590, 
    202880, 
    205330, 
    206800, 
    209840, 
    212270, 
    214560, 
    218370, 
    221750, 
    226410, 
    227110, 
    231890, 
    234210, 
    238740, 
    240170, 
    244210, 
    247490, 
    250060, 
    251660, 
    254740, 
    256630, 
    260940, 
    262500, 
    266390, 
    267470, 
    269350, 
    270260, 
    273430, 
    278400, 
    283410, 
    286270, 
    292190, 
    294990, 
    296000, 
    298420, 
    301340, 
    302450, 
    306850, 
    310960, 
    315040, 
    317840, 
    321760, 
    325500, 
    327180, 
    330470, 
    333330, 
    336270, 
    338080, 
    341270, 
    345100, 
    348440, 
    353320, 
    355480, 
    356740, 
    360690, 
    365190, 
    367390, 
    369090, 
    372000, 
    375110, 
    378960, 
    380250, 
    383560, 
    388870, 
    392400, 
    395220, 
    398870, 
    400920, 
    403420, 
    406360, 
    408740, 
    413700, 
    414950, 
    419650, 
    422770, 
    426830, 
    428880, 
    433090, 
    434730, 
    438240, 
    442130, 
    445480, 
    447570, 
    451130, 
    454200, 
    455450, 
    464430, 
    465220, 
    467100, 
    473040, 
    475790, 
    477340, 
    479710, 
    483160, 
    485630, 
    490000, 
    493530, 
    495990, 
    497510, 
    499360, 
    500560, 
    501280, 
    501910, 
    503220, 
    506650, 
    509580, 
    512210, 
    514150, 
    516490, 
    518539, 
    521700, 
    526160, 
    530730, 
    535560, 
    538610, 
    541440, 
    543290, 
    545480, 
    547540, 
    548290, 
    551350, 
    554970, 
    558250, 
    562870, 
    564150, 
    567840, 
    571770, 
    573610, 
    577240, 
    581500, 
    585200, 
    588620, 
    593100, 
    594380, 
    597100, 
    600260, 
    601510, 
    607560, 
    609870, 
    614090, 
    616620, 
    618180, 
    621370, 
    624490, 
    625860, 
    629240, 
    632550, 
    635810, 
    639400, 
    642390, 
    645290, 
    646300, 
    649880, 
    653390, 
    653930, 
    657130, 
    658430, 
    661920, 
    665790, 
    669020, 
    672520, 
    675530, 
    678910, 
    681050, 
    683900, 
    685700, 
    689350, 
    693220, 
    695860, 
    699210, 
    700330, 
    703810, 
    707900, 
    711050, 
    713730, 
    715880, 
    719720, 
    720350, 
    724610, 
    726890, 
    727800, 
    733000, 
    735660, 
    736990, 
    741050, 
    744800, 
    747420, 
    752060, 
    754300, 
    757180, 
    758940, 
    760990, 
    764230, 
    765530, 
    769230, 
    771990, 
    775090, 
    776030, 
    779550, 
    783560, 
    785730, 
    789180, 
    793220, 
    796000, 
    799010, 
    801970, 
    805090, 
    806270, 
    806640, 
    808910, 
    810390, 
    813110, 
    817890, 
    821300, 
    825510, 
    831820, 
    834020, 
    837430, 
    840240, 
    844400, 
    846480, 
    848660, 
    849800, 
    853140, 
    857690, 
    859860, 
    862330, 
    864200, 
    868170, 
    870070, 
    875240, 
    878930, 
    883330, 
    884730, 
    887170, 
    889360, 
    894240, 
    898070, 
    900620, 
    902120, 
    906680, 
    911010, 
    912300, 
    916580, 
    918860, 
    923020, 
    926030, 
    928240
  ], 
  "text": [
    "ARMANDO FOX: OK, so last time we very briefly started talking about", 
    "JavaScript, we gave a big picture overview of what the different moving", 
    "parts are in the JavaScript universe.", 
    "So today, we're going to do a little bit more about JavaScript.", 
    "A lot of JavaScript, because it's mostly an imperative language and it's", 
    "superficially similar syntactically to Java and C++ and some other languages,", 
    "there's a lot you could sort of pick up by osmosis.", 
    "So as usual, I'm going to try to focus on the elements of the language that", 
    "might be unfamiliar, based on what other languages you come from.", 
    "One of which is prototype inheritance, which is a little weird because most", 
    "other [INAUDIBLE]", 
    "languages don't use it.", 
    "And we'll also do a simple walk through of a client-side only piece of", 
    "JavaScript, just so you get a sense of how the moving parts work together", 
    "when you're using JavaScript to work on web pages.", 
    "As with a lot of languages, the language itself is", 
    "actually not bad to learn.", 
    "It's all the things you can do with it and the libraries and stuff like that", 
    "make it tricky.", 
    "So what are some salient features of JavaScript from a Ruby programmer's", 
    "point of view?", 
    "The good news is--", 
    "stop me if you've heard some of the stuff before-- but as Ruby", 
    "programmers, you actually know a lot of what you need to know to tackle", 
    "what's in JavaScript now.", 
    "JavaScript is object-oriented, but not really in the way that, say, Ruby or", 
    "even Java are.", 
    "The basic object type is a hash, just like a Ruby hash.", 
    "Sometimes in JavaScript speak, the hash keys will be called slots or", 
    "properties.", 
    "So here's a simple example of a hash whose slots or properties are title", 
    "and releaseInfo.", 
    "Notice that usually if the slot name is a string that doesn't contain any", 
    "special characters, you don't need to put quotes around it.", 
    "But it's legal to do so.", 
    "So this could have been quote \"title\" quote.", 
    "And in fact, the names of slots are allowed to have characters in them", 
    "like hyphens which would cause a parse error if you didn't", 
    "surround it with quotes.", 
    "So sometimes you'll see a hash where the keys are enclosed in quotes.", 
    "If the quotes are absent, it just means that there are strains that have", 
    "normal, non-special characters in them.", 
    "And you can assume the quotes would have been there.", 
    "You could see that as with Ruby, the values of the hash don't have to be", 
    "the same type.", 
    "Here's a hash where the value associated with the", 
    "title slot is a string.", 
    "But the value associated with the releaseInfo slot is another object,", 
    "another hash that's nested inside of it.", 
    "So you'll see hashes a lot.", 
    "And in fact, if you've heard of JSON, the JavaScript Object Notation, to a", 
    "first order, this is what it is.", 
    "It's a way of representing JavaScript objects in a way that can be ingested", 
    "directly by the language.", 
    "So we'll talk more about that in Chapter 12.", 
    "Functions in JavaScript are really important for a couple of reasons.", 
    "Unlike Ruby, functions are first class objects.", 
    "Because everybody here remembers CS-61-A, and in Scheme, functions are", 
    "first class objects, which means you can pass them around.", 
    "You can assign them to things.", 
    "The same is true in JavaScript.", 
    "And that really hasn't been true in Ruby.", 
    "So in Ruby, there are certain constructs like each where you can", 
    "effectively pass an anonymous lambda to the block.", 
    "But you can't pass a function around in Ruby the way that you can, for", 
    "example, in Scheme or JavaScript.", 
    "You can't assign it to another variable.", 
    "You can't pass it into a function in a general sense.", 
    "You can do it with certain constructs that are specifically", 
    "designed to take a block.", 
    "But in JavaScript, you can pass a function anywhere that you would pass", 
    "a normal nonfunctional variable.", 
    "And this turns out to be really important, because passing functions", 
    "around is one of the main ways that interesting things get done in", 
    "JavaScript when it's used to build SaaS applications, in particular when", 
    "it's used to animate or to supplement the client side of one", 
    "of these web pages.", 
    "So we'll see some examples of this during the rest of today.", 
    "There's a var keyword.", 
    "I don't know if anybody takes Pascal anymore, but var introduces a variable", 
    "that has restricted scope.", 
    "So for example, inside the body of a function, putting var in front of the", 
    "variable means that the variable will be scoped locally to that function.", 
    "And it won't have collisions with variables that occur", 
    "outside of that scope.", 
    "If you don't use the word var, your variable is assumed to be global.", 
    "That's almost never what you want.", 
    "So expect questions of a difficult nature, if I see variable declarations", 
    "without var.", 
    "And speaking of global, global has a sort of interesting meaning within", 
    "JavaScript.", 
    "There is a concept of a global object.", 
    "Remember, what's an object?", 
    "It's really just a hash with keys and values.", 
    "The global object is a necessary chunk of the JavaScript ecosystem, because", 
    "it defines some constants that make part of JavaScript's environment, like", 
    "the constants for NaN and infinity and things like that.", 
    "But it also defines functions, and constants, and other constructs that", 
    "are appropriate to that embedding of JavaScript.", 
    "What do I mean by that?", 
    "Well, when you're doing JavaScript programming in the context of SaaS", 
    "applications, you're using a JavaScript interpreter that's embedded", 
    "in the browser.", 
    "The last time we mentioned that part of what the browser gives you is an", 
    "API to manipulate the document object model, the DOM, of an HTML page.", 
    "And that part of the JavaScript API that the browser provides is to give", 
    "access to those things from JavaScript code.", 
    "So part of what the JavaScript global object defines in the case where", 
    "JavaScript is embedded in the browser, is the functions that are necessary to", 
    "take advantage of that glue.", 
    "If you were embedding JavaScript in another environment, for example,", 
    "there's a version of JavaScript you can embed into a server.", 
    "If you've heard of the framework NodeJS, it's a framework for writing", 
    "server-side code in JavaScript.", 
    "And there's a different set of global functions that provide, for example,", 
    "useful interfaces between server-side JavaScript and OS functions that have", 
    "to do with networking and IO and stuff like that.", 
    "So the reason this is important is because the keyword this, which you'll", 
    "see all over the place in JavaScript, it works kind of the", 
    "way it works in Java.", 
    "It refers to whoever received a particular function call or a message.", 
    "But in JavaScript, if you use the keyword this in global scope, then", 
    "it's referring to whatever the global object is.", 
    "And we'll see a couple of examples of that in a moment.", 
    "We start to muck around with a web browser.", 
    "Just to take a look at some of the basic syntax, for example for", 
    "functions, so just for the sake of example, I've defined a couple of", 
    "simple JavaScript functions.", 
    "And the first thing to notice is the notation that I'm using.", 
    "The notation you may be more familiar with seeing is something like this,", 
    "where there's a function keyword, then there's the name of the function, the", 
    "arguments, and the body of the function embraces.", 
    "And that will work, but in JavaScript, that's really syntactic sugar.", 
    "What it really means is this--", 
    "ok_for_kids is just a regular old variable.", 
    "And because I'm using the keyword var to introduce it, it's going to be", 
    "limited to whatever scope I'm at this point.", 
    "But the value of that variable is a function of one argument whose body is", 
    "this stuff.", 
    "Again, why is this important in terms of syntax?", 
    "One shortcut we've probably gotten really used to in Ruby is if you're", 
    "calling a function with no arguments, you can leave the parentheses off.", 
    "Remember, that's part of the poetry mode.", 
    "In JavaScript, it doesn't work that way, because what is ok_for_kids?", 
    "It's actually a function.", 
    "It has a value in and of itself, which is that its value is a function.", 
    "If you want to evaluate it, then you could call it with parentheses and the", 
    "parentheses could be empty if you really mean pass no arguments to it.", 
    "Let's actually take a look at this in real life.", 
    "I'm using Safari right now, but in a minute we'll switch over to using", 
    "Firebug for some of our examples.", 
    "Don't worry about those errors.", 
    "So if I just grab some of this code, OK so if I execute that, so why did I", 
    "get undefined?", 
    "Well, all I did here was declare a variable.", 
    "But if I inspect it now, and note the nice auto-completion, OK, this is just", 
    "a variable whose value is a function.", 
    "That's a function call.", 
    "Of course, it's a function call that doesn't work in this case.", 
    "Because inside the body of my function, I'm actually trying to", 
    "de-reference an element of this hash.", 
    "But we'll make a legal call.", 
    "OK, and this at least worked as design, right?", 
    "So what's the moral of the story here?", 
    "Functions are first class objects.", 
    "In fact, here's a great example of that.", 
    "I'm going to grab that.", 
    "What did I do?", 
    "I didn't call it.", 
    "I just made a copy of it, right?", 
    "I actually made a copy of the reference, and now I should be able to", 
    "call my copied function and get the same effect.", 
    "So all I did was assign the value of a variable to another variable.", 
    "It's just they happen to be function valued.", 
    "Get used to this, because you're going to pass functions around", 
    "all over the place.", 
    "We'll go down to the second example in just a moment there.", 
    "OK, so more about functions being first class objects and closures.", 
    "Again, think back to CS-61-A. This is something very much like one of the", 
    "first problem set exercises, as I recall in 61-A, which is we've defined", 
    "a function, which returns another function.", 
    "This is the point at which in 61-A most people's brains began to hurt.", 
    "And then after a while, they got it.", 
    "But, guess what, it's back.", 
    "This is extremely common in JavaScript.", 
    "Why?", 
    "Because remember, we mentioned earlier when we talked about the introduction", 
    "of JavaScript, that as a language, JavaScript is single threaded.", 
    "That means that at any given time when JavaScript is running, its model of", 
    "the world is the interpreter has complete control, and you can't do", 
    "things concurrently.", 
    "Now in some sense, there's concurrency in the fact that if you have multiple", 
    "web browser windows open, each window has its own copy of the interpreter.", 
    "And those can certainly be doing things in parallel.", 
    "But within any one window, everything is strictly sequential.", 
    "That means that if you're going to have a piece of JavaScript that wants", 
    "to wait for something to happen, it can't actually block and wait, because", 
    "then the user interface of that browser window would freeze.", 
    "Instead, it basically has to pass a function, saying what to do if the", 
    "event ever occurs.", 
    "And we're about to walk through a simple example of doing this.", 
    "So for that reason, the fact that you can pass a function around and that", 
    "it's a closure.", 
    "Anything that's in scope at the time that you're defining the function", 
    "becomes part of that function's closure.", 
    "In this case, we can multiply our functions for different constants and", 
    "the value of arg the gets passed in is basically being", 
    "captured in this closure.", 
    "This is really useful in JavaScript, because what you really want is at the", 
    "moment you're setting up to wait for a user event, there's a certain amount", 
    "of state you're going to want to have handy.", 
    "So that when that event occurs, you can decide how to react to it.", 
    "So this pattern is going to be extremely common in JavaScript.", 
    "Every loaded HTML page gets its own global object.", 
    "That means that effectively every literate HTML page is pretty much", 
    "firewalled off from every other one.", 
    "You've probably seen examples where the browser really behaves as if", 
    "that's not true.", 
    "The exception to the rule is that if JavaScript itself is used to open a", 
    "new window, then it can retain a reference to the new window that it", 
    "just opened.", 
    "But when you open new windows on your own, every one of those gets its own", 
    "copy of the global objects.", 
    "So for all practical purposes, they're completely separate interpreters.", 
    "That means that every page in your app that wants to use JavaScript has to on", 
    "its own make sure that it loads the necessary JavaScript files.", 
    "And the way that most people do this with software as a service is they", 
    "have one enormous file with all of their JavaScript in it.", 
    "And that one file is referenced by every page in their app.", 
    "Now why isn't that a brain dead thing to do?", 
    "Well for the most part, unless your JavaScript code is changing", 
    "frequently, those files aren't going to change.", 
    "So once your browser has paid the cost of loading that page on the first", 
    "visit, most browsers will keep that in a local cache on the client side.", 
    "And on future page references, they won't have to reload it.", 
    "So it's usually considered acceptable to sort of take the hit up front and", 
    "load a big file.", 
    "And, by the way, there's a number of techniques that come under the general", 
    "name of \"minifying,\" which you can use to essentially pack a JavaScript file,", 
    "change all the variables to have short names, take out all the unnecessary", 
    "white space and so forth, that has the effect of making a", 
    "file overall smaller.", 
    "So the most unobtrusive technique is to create a single file that includes", 
    "all your code.", 
    "And within that file, as we'll see, we'll create a single global object", 
    "that holds everything related to our app.", 
    "So why would we do that?", 
    "Remember that in a language like JavaScript, we don't want to pollute", 
    "the global scope with a whole bunch of little variables and functions that", 
    "have to do with our app.", 
    "But because functions are first class objects, that means we can have a", 
    "hash, some of whose values are functions.", 
    "We could have a hash where one of the values is a function.", 
    "So the way that we're going to keep our app's footprint small is we'll", 
    "create just a single object in global scope.", 
    "And we'll give that object some obvious name like rp or rotten", 
    "potatoes, or something like that.", 
    "That object will be a hash.", 
    "Some of the slots of that hash could be important constants, having to do", 
    "with the JavaScript in our app.", 
    "But a lot of the slots in the hash will actually be functions that", 
    "correspond to whatever JavaScript code we've written for our app.", 
    "So to call those functions, we explicitly de-reference our single", 
    "global object.", 
    "That's how we keep our name space pretty pure.", 
    "And how does this look when you reference it in a web browser?", 
    "Let's take a quick look over here.", 
    "So how do you associate JavaScript functions with a page?", 
    "The clean way to do it is to use script source.", 
    "So the script tag says a script follows.", 
    "These days JavaScript is almost always the language of choice, but it doesn't", 
    "have to be.", 
    "We're going to talk about jQuery in just a moment, but I've chosen to load", 
    "jQuery from Google.", 
    "Why?", 
    "Because that's probably faster than loading it from whatever", 
    "server my app is on.", 
    "Google serves a lot of copies of the jQuery library.", 
    "So here I am externally loading the jQuery source from Google servers.", 
    "And I'm putting some scripts in line on my page.", 
    "Now usually what we would do is rather than putting a script in line, I would", 
    "encourage you to put the script in its own file like rottenpotatoes.js.", 
    "I've just done this here for the purpose of showing that there's more", 
    "than one way to associate JavaScript code with the page.", 
    "And in this case, we've just got the script being in line--", 
    "so everything until the close script tag.", 
    "I'm using Firefox as an example.", 
    "So here's the version of rotten potatoes that has been", 
    "JavaScript-enhanced.", 
    "I'll show you the very awesome enhancements in just a moment.", 
    "But all of this is really generated by a single line in the Haml template,", 
    "which is the JavaScript include tag.", 
    "That will actually load jQuery which we're going to use for a lot of our", 
    "JavaScript interactions.", 
    "And it will load a file called applicationJS, which is put there by", 
    "the framework when you create a new Rails app.", 
    "And I encourage you to take a look at some point, by the way-- it's actually", 
    "not JavaScript, it's a CoffeeScript file that causes all the JavaScript", 
    "files in your app assets JavaScript directory to be automatically loaded.", 
    "So basically, what does that mean?", 
    "As long as you put all of your JavaScript files in that same", 
    "directory, app/assets/Javascript.", 
    "You can pretty much ensure that by having JavaScript include tag in your", 
    "application level template application/layout.haml, then pretty", 
    "much your JavaScript will always be loaded for every page.", 
    "So that's easy enough to do.", 
    "All right, so let's ask a quick self-check question about JavaScript", 
    "and functions before we move on to an interesting behavior that you probably", 
    "haven't seen in other languages.", 
    "So which of these is not true about JavaScript functions?", 
    "They can be anonymous.", 
    "They always return a value even without an explicit return statement.", 
    "They can be passed a function as an argument.", 
    "Or they can execute concurrently with other functions."
  ]
}