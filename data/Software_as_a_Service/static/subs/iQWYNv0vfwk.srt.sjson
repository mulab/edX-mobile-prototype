{
  "start": [
    0, 
    2750, 
    5440, 
    9870, 
    13400, 
    14790, 
    17400, 
    19060, 
    22500, 
    23350, 
    26620, 
    28110, 
    31430, 
    34700, 
    36580, 
    37200, 
    40490, 
    44160, 
    46390, 
    48170, 
    51180, 
    52670, 
    55490, 
    56580, 
    58380, 
    58610, 
    59400, 
    64069, 
    67690, 
    72040, 
    75580, 
    77830, 
    79660, 
    83160, 
    86160, 
    87930, 
    91570, 
    94920, 
    97040, 
    99370, 
    104580, 
    109930, 
    114340, 
    116710, 
    118830, 
    119010, 
    123990, 
    126720, 
    129550, 
    134140, 
    134560, 
    136140, 
    140740, 
    143370, 
    145910, 
    148280, 
    151680, 
    154890, 
    159730, 
    161130, 
    164320, 
    164960, 
    167670, 
    169640, 
    173530, 
    176320, 
    176880, 
    177020, 
    179960, 
    182140, 
    186320, 
    188730, 
    191840, 
    195520, 
    198090, 
    203240, 
    206445, 
    209720, 
    212030, 
    214940, 
    217960, 
    220900, 
    222130, 
    225270, 
    226110, 
    228650, 
    230420, 
    232910, 
    235480, 
    239560, 
    240490, 
    242460, 
    243460, 
    246440, 
    248180, 
    249360, 
    250770, 
    254960, 
    256850, 
    260310, 
    263620, 
    264660, 
    268630, 
    269530, 
    272620, 
    274880, 
    276590, 
    280360, 
    284670, 
    286870, 
    292000, 
    296290, 
    300050, 
    302410, 
    303590, 
    305780, 
    306820, 
    309610, 
    313590, 
    316690, 
    320260, 
    321240, 
    325270, 
    326680, 
    329260, 
    332620, 
    336010, 
    339500, 
    343180, 
    345380, 
    348240, 
    351630, 
    352890, 
    357580, 
    358270, 
    361200, 
    362850, 
    363920, 
    367180, 
    370510, 
    371750, 
    374410, 
    375580, 
    381220, 
    384950, 
    388020, 
    390720, 
    395490, 
    399030, 
    404090, 
    407700, 
    411060, 
    413830, 
    414910, 
    419220, 
    422780, 
    426180, 
    427750, 
    431080, 
    434310, 
    436890, 
    440200, 
    442820, 
    446190, 
    450160, 
    451770, 
    455960, 
    458485, 
    461240, 
    462240, 
    466300, 
    469140, 
    472310, 
    476170, 
    479450, 
    481170, 
    485650, 
    488730, 
    493870, 
    496810, 
    498350, 
    501720, 
    503370, 
    505280, 
    507610, 
    510870, 
    514150, 
    515580, 
    518490, 
    520620, 
    523360, 
    525800, 
    527480, 
    531310, 
    534940, 
    538790, 
    542910, 
    545380, 
    548540, 
    552610, 
    555180, 
    557650, 
    561580, 
    562150, 
    565290, 
    567250, 
    571670, 
    573210, 
    574940, 
    578450, 
    581110, 
    585090, 
    586740, 
    590620, 
    591920, 
    595320, 
    598700, 
    600380, 
    601720, 
    602710, 
    605640, 
    609570, 
    610780, 
    614130, 
    617880, 
    621140, 
    622380, 
    624770, 
    625650, 
    626950, 
    631560, 
    634330, 
    635910, 
    639440, 
    642160, 
    645570, 
    648610, 
    651510, 
    654610, 
    655900, 
    658300, 
    661240, 
    663730, 
    666830, 
    669530, 
    670480, 
    672550, 
    676420, 
    679360, 
    682180, 
    685500, 
    687900, 
    690890, 
    694290, 
    697470, 
    701160, 
    703810, 
    708850, 
    710910, 
    714000, 
    717060, 
    720080, 
    722310, 
    724990, 
    727850, 
    730580, 
    734900, 
    735770, 
    738860, 
    742180, 
    745680, 
    748380, 
    751740, 
    753480, 
    757240, 
    761370, 
    763010, 
    765310, 
    768110, 
    769310, 
    770960, 
    773810, 
    775990, 
    777680, 
    777880, 
    781810, 
    785210, 
    787260, 
    788850, 
    792660, 
    796460, 
    800220, 
    803990, 
    805630, 
    808900, 
    811880, 
    814960, 
    816140, 
    821150, 
    824150, 
    828370, 
    830980, 
    834640, 
    837326, 
    839820, 
    843120, 
    846910, 
    849720, 
    853040, 
    856790, 
    857630, 
    860640, 
    863570, 
    865870, 
    867520, 
    871290, 
    873220, 
    877360, 
    878630, 
    881770, 
    886810, 
    888240, 
    890250, 
    895170, 
    898340, 
    902450, 
    905860, 
    911110, 
    913860, 
    917060, 
    920790, 
    924710, 
    926850, 
    929440, 
    933733, 
    937490, 
    941100, 
    942140, 
    945320, 
    946670, 
    949240, 
    952350, 
    954130, 
    959860, 
    962420, 
    966270, 
    968010, 
    972310, 
    974170, 
    977180, 
    980750, 
    983150, 
    984260, 
    987120, 
    989530, 
    994230, 
    996990, 
    998470, 
    1003270, 
    1007135, 
    1011240, 
    1016800
  ], 
  "end": [
    2750, 
    5440, 
    9870, 
    13400, 
    14790, 
    17400, 
    19060, 
    22500, 
    23350, 
    26620, 
    28110, 
    31430, 
    34700, 
    36580, 
    37200, 
    40490, 
    44160, 
    46390, 
    48170, 
    51180, 
    52670, 
    55490, 
    56580, 
    58380, 
    58610, 
    59400, 
    64069, 
    67690, 
    72040, 
    75580, 
    77830, 
    79660, 
    83160, 
    86160, 
    87930, 
    91570, 
    94920, 
    97040, 
    99370, 
    104580, 
    109930, 
    114340, 
    116710, 
    118830, 
    119010, 
    123990, 
    126720, 
    129550, 
    134140, 
    134560, 
    136140, 
    140740, 
    143370, 
    145910, 
    148280, 
    151680, 
    154890, 
    159730, 
    161130, 
    164320, 
    164960, 
    167670, 
    169640, 
    173530, 
    176320, 
    176880, 
    177020, 
    179960, 
    182140, 
    186320, 
    188730, 
    191840, 
    195520, 
    198090, 
    203240, 
    206445, 
    209720, 
    212030, 
    214940, 
    217960, 
    220900, 
    222130, 
    225270, 
    226110, 
    228650, 
    230420, 
    232910, 
    235480, 
    239560, 
    240490, 
    242460, 
    243460, 
    246440, 
    248180, 
    249360, 
    250770, 
    254960, 
    256850, 
    260310, 
    263620, 
    264660, 
    268630, 
    269530, 
    272620, 
    274880, 
    276590, 
    280360, 
    284670, 
    286870, 
    292000, 
    296290, 
    300050, 
    302410, 
    303590, 
    305780, 
    306820, 
    309610, 
    313590, 
    316690, 
    320260, 
    321240, 
    325270, 
    326680, 
    329260, 
    332620, 
    336010, 
    339500, 
    343180, 
    345380, 
    348240, 
    351630, 
    352890, 
    357580, 
    358270, 
    361200, 
    362850, 
    363920, 
    367180, 
    370510, 
    371750, 
    374410, 
    375580, 
    381220, 
    384950, 
    388020, 
    390720, 
    395490, 
    399030, 
    404090, 
    407700, 
    411060, 
    413830, 
    414910, 
    419220, 
    422780, 
    426180, 
    427750, 
    431080, 
    434310, 
    436890, 
    440200, 
    442820, 
    446190, 
    450160, 
    451770, 
    455960, 
    458485, 
    461240, 
    462240, 
    466300, 
    469140, 
    472310, 
    476170, 
    479450, 
    481170, 
    485650, 
    488730, 
    493870, 
    496810, 
    498350, 
    501720, 
    503370, 
    505280, 
    507610, 
    510870, 
    514150, 
    515580, 
    518490, 
    520620, 
    523360, 
    525800, 
    527480, 
    531310, 
    534940, 
    538790, 
    542910, 
    545380, 
    548540, 
    552610, 
    555180, 
    557650, 
    561580, 
    562150, 
    565290, 
    567250, 
    571670, 
    573210, 
    574940, 
    578450, 
    581110, 
    585090, 
    586740, 
    590620, 
    591920, 
    595320, 
    598700, 
    600380, 
    601720, 
    602710, 
    605640, 
    609570, 
    610780, 
    614130, 
    617880, 
    621140, 
    622380, 
    624770, 
    625650, 
    626950, 
    631560, 
    634330, 
    635910, 
    639440, 
    642160, 
    645570, 
    648610, 
    651510, 
    654610, 
    655900, 
    658300, 
    661240, 
    663730, 
    666830, 
    669530, 
    670480, 
    672550, 
    676420, 
    679360, 
    682180, 
    685500, 
    687900, 
    690890, 
    694290, 
    697470, 
    701160, 
    703810, 
    708850, 
    710910, 
    714000, 
    717060, 
    720080, 
    722310, 
    724990, 
    727850, 
    730580, 
    734900, 
    735770, 
    738860, 
    742180, 
    745680, 
    748380, 
    751740, 
    753480, 
    757240, 
    761370, 
    763010, 
    765310, 
    768110, 
    769310, 
    770960, 
    773810, 
    775990, 
    777680, 
    777880, 
    781810, 
    785210, 
    787260, 
    788850, 
    792660, 
    796460, 
    800220, 
    803990, 
    805630, 
    808900, 
    811880, 
    814960, 
    816140, 
    821150, 
    824150, 
    828370, 
    830980, 
    834640, 
    837326, 
    839820, 
    843120, 
    846910, 
    849720, 
    853040, 
    856790, 
    857630, 
    860640, 
    863570, 
    865870, 
    867520, 
    871290, 
    873220, 
    877360, 
    878630, 
    881770, 
    886810, 
    888240, 
    890250, 
    895170, 
    898340, 
    902450, 
    905860, 
    911110, 
    913860, 
    917060, 
    920790, 
    924710, 
    926850, 
    929440, 
    933733, 
    937490, 
    941100, 
    942140, 
    945320, 
    946670, 
    949240, 
    952350, 
    954130, 
    959860, 
    962420, 
    966270, 
    968010, 
    972310, 
    974170, 
    977180, 
    980750, 
    983150, 
    984260, 
    987120, 
    989530, 
    994230, 
    996990, 
    998470, 
    1003270, 
    1007135, 
    1011240, 
    1016800, 
    1018700
  ], 
  "text": [
    "Armando Fox: A bug that depends on the behavior of external services.", 
    "We already talked about different levels at which you can effectively", 
    "stub about the internet, all the way from the methods in your model that", 
    "call that external API, all the way out to, essentially, mocking the", 
    "network sec itself.", 
    "So certainly, either of those things could be used to", 
    "achieve the first goal.", 
    "The green, bugs that depend on the time of day, well, there's a couple of", 
    "ways to do this.", 
    "One way to do this is to define your own time class that's just a wrapper", 
    "around Ruby's time class.", 
    "But by now, since you all have experience surgically putting seams", 
    "into tests whatever you need them, you could just stub the time class and", 
    "have Time.now return whatever you want.", 
    "Right?", 
    "So, if you could figure out what's the behavior of the time of day or the day", 
    "of the week that causes the bug to trigger, you could certainly use", 
    "surgical seams like we've seen before.", 
    "Therefore, the green one is also possible.", 
    "Now, between the last two, the third one is tricky, bugs that are", 
    "statistical in nature.", 
    "But in fact, most of the time you can create regression tests that will", 
    "actually do this.", 
    "Anybody have a suggestion how?", 
    "Yes.", 
    "That's basically it.", 
    "If it's really a statistical outcome, then you should be able to reproduce a", 
    "statistical outcome in a test by running the test lots of times.", 
    "So if 50% of the time the coin's supposed to come up heads, you do the", 
    "equivalent of running the test 100 times and keeping track of did you get", 
    "50%, plus or minus some margin of error?", 
    "Because it's not going to be perfectly 50%.", 
    "So again, as with a lot of these questions, I'm sure if you guys", 
    "thought hard enough, you could come up with some specific statistical case", 
    "that would be really, really hard to test.", 
    "But the goal is to get you to think creatively about what can be tested.", 
    "And things that are non-deterministic but can be described statistically", 
    "actually are amenable to this kind of testing.", 
    "So, good on you for voting blue.", 
    "So, just to wrap up a little bit what we've done in this chapter, we talked", 
    "about a bunch of different things that have to do with working well in teams.", 
    "Closing out bugs, actually, I think fits into this category, because when", 
    "your team is relying on you to close out a bug, that's a different", 
    "responsibility than you closing out the bug yourself.", 
    "Right?", 
    "In part, that's where the no bug closure without a test comes from, is", 
    "that's sort of the proof to the rest of the world that you've", 
    "managed to do this.", 
    "One of the things we talked about is how do you allocate responsibilities", 
    "within the team?", 
    "How do teams work together?", 
    "There is more than one team that I have seen in industry where the", 
    "division of labor is really along the lines of this person works on the", 
    "front end, this person works on the back end, this person works on", 
    "business logic.", 
    "There's not a huge problem with doing that, but at the end of the day, in a", 
    "smaller team, there's some benefit to be gained by spreading the knowledge", 
    "around, which is why the Agile approach really focuses on doing it at", 
    "the level of stories.", 
    "It's probably also arguably better for your career if you acquire a variety", 
    "of skills, right?", 
    "You don't want to be stuck as the back end person or the front end", 
    "person all the time.", 
    "And having some expertise in doing each of the tools and doing each of", 
    "the parts of the application will probably, also, be better for the", 
    "whole project.", 
    "Right?", 
    "Because it gives more people on the project visibility into different", 
    "parts of the project.", 
    "And as well, if you take pair programming seriously--", 
    "and early in the semester we talked about this idea of promiscuous", 
    "pairing, where you're switching off several times a day, and you're trying", 
    "all different combinations of pairs within the team, that's another way to", 
    "naturally spread some of the knowledge around the project.", 
    "So, whereas one person in the pair might initially be the front end", 
    "specialist or the back end specialist, as the teams work together, as the", 
    "pairs work together, and that information gets spread around, you", 
    "actually find that everybody sort of gets a little bit better at what", 
    "they're doing, because they have a view of the overall app.", 
    "So, I think our summary of this is pretty straightforward.", 
    "The idea of these 2-pizza teams means management doesn't have to be a", 
    "painful process.", 
    "Even code reviews don't have to be a painful process.", 
    "Scrum--", 
    "not used by everybody, but increasingly by a lot of colleagues of", 
    "mine-- just meet for 10 minutes a day.", 
    "And it's a forcing function for everybody to say not only what they've", 
    "been up to but what obstacles they run into.", 
    "I've been to a lot of stand up Scrum meetings, where somebody will say, I", 
    "had trouble with x.", 
    "And spontaneously, someone will also say, oh, I know the", 
    "problem you're having.", 
    "And immediately, there's a little bit of knowledge sharing that now, not", 
    "only is the problem solved, but everybody else has", 
    "heard about it as well.", 
    "So it's a pretty good system.", 
    "We've seen some tools like Tracker and so forth that make it easier to manage", 
    "these processes, simple as they are.", 
    "And people forget to do this, but when you finish your project or even when", 
    "you finish an iteration, think about what worked and what didn't during", 
    "that iteration.", 
    "We screw up all the time, but the bad thing is if you screw up in the same", 
    "way repeatedly.", 
    "That suggests that you're not absorbing knowledge.", 
    "You can't have a software engineering class without talking", 
    "about design patterns.", 
    "This is some kind of conservation law that we figured out.", 
    "So the question is, what's the best way to talk about design patterns in a", 
    "class that's focused like this one is?", 
    "And just as when we talked about refactoring and code smells a week or", 
    "two ago, rather than giving you a laundry list of refactorings, of which", 
    "you can look those up in many of the fine books on factoring, we tried to", 
    "give some examples that motivate why you'd want to do it", 
    "in the first place.", 
    "So the way we're going to approach talking about design", 
    "patterns is very similar.", 
    "Rather than giving you a catalogue of design patterns and sort of going", 
    "through all of them, we'll try to show some scenarios that hopefully will", 
    "make it clear why some of these design patterns exist.", 
    "How do you detect places in your code just like we talked about with code", 
    "smells and code metrics.", 
    "Are there places where the code is clearly crying out for a design", 
    "pattern and you haven't used one?", 
    "So we're going to follow a very similar approach in talking about", 
    "patterns as we did in talking about code smells and refactoring.", 
    "And just like we had a very clever acronyms SOFA, for which I take 100%", 
    "credit, when we talk about refactoring, there's an acronym SOLID,", 
    "for which I do not take credit, and it's actually a much better acronym", 
    "because it gives you confidence.", 
    "We're going to build solid software, as opposed to we're going to build", 
    "sofa software, like loungey software or something.", 
    "But SOLID is a real thing.", 
    "And as you'll see, it's a list of five characteristics that are desirable to", 
    "have in your code.", 
    "We'll look at ways that you can detect when you might be off track in not", 
    "having them.", 
    "So what are design patterns?", 
    "The original idea actually came out of architecture, not a field that", 
    "software engineers are usually familiar with.", 
    "And I don't mean software architecture.", 
    "I mean the kind where they build buildings and plan cities and towns", 
    "and stuff like that.", 
    "In the early '70s, Chris Alexander noticed that there were various", 
    "problems that arose in urban architecture that had been solved over", 
    "and over again in pretty similar ways in a lot of different settings.", 
    "So he came up with the idea of a pattern language as a way of", 
    "collecting solutions to a family of problems that are similar to each", 
    "other, and to which a good proven solution had emerged.", 
    "So he identified 253 patterns at scales all the way from the creation", 
    "of entire cities, like how do you lay out zones of the city, to particular", 
    "problems in buildings, like how do you design a certain type of roof, or", 
    "what's the best spacing for windows relative to offices,", 
    "and things like that.", 
    "So it's an organized way of tackling originally an architectural problem.", 
    "But this idea has now proliferated to other fields, including our own.", 
    "So in software, the idea's become so popular there's actually multiple", 
    "different kinds of patterns.", 
    "One kind of pattern we've already seen some example of.", 
    "And we could call those software architectural patterns to distinguish", 
    "them from architecture architectural patterns.", 
    "But things like model-view-controller that tell you about the macroscopic", 
    "structure of a piece of software.", 
    "If you've used Unix, the idea of hooking together programs using pipes,", 
    "the pipe and filter architecture is another example of an", 
    "architectural pattern.", 
    "Event-based programming is an example of an architectural pattern.", 
    "This is where the structure of your application is to basically sit", 
    "around, wait for something interesting to happen, and then react to that", 
    "interesting thing.", 
    "So a lot of interactive games, for example, fit this pattern, because", 
    "what the game spends most of its time doing in the main loop is waiting for", 
    "the user to take some action, possibly doing some game computation.", 
    "But really what happens in the game is driven a lot by the user actions.", 
    "So those examples we've seen a little bit of.", 
    "There's also patterns of computation.", 
    "We won't talk about them too much in this class, but one of the founding", 
    "observations of the Parallel Computing Lab, which I work in and which Dave", 
    "Patterson works in, is that there's a handful, order of a dozen, computation", 
    "families that occur in all different problem domains.", 
    "You see them in computer graphics.", 
    "You see them in biological modeling and physical modeling.", 
    "So here's three or four examples of it.", 
    "If you're familiar with the Fast Fourier Transform, a", 
    "signal processing technique.", 
    "Grid algorithms, which is when you essentially impose a grid over the", 
    "world so you can discretize it for the purposes of simulation or doing some", 
    "other computation.", 
    "Dense and sparse linear algebra, if you took 61c and you worked on", 
    "optimizing parallel matrix multiply.", 
    "There's a good reason people who work on matrix multiply.", 
    "It's used in hundreds of different applications and dozens", 
    "of different domains.", 
    "So this is another area where if you could focus on what's the best", 
    "solution, let's say, for a given type of computer to do dense linear", 
    "algebra, that solution would benefit a wide number of problems.", 
    "The kind of patterns that we're mostly going to talk about are broken down to", 
    "a few different categories, but they're collectively known as the Gang", 
    "of Four patterns, or the GoF patterns, if you will.", 
    "And this is because of the people who wrote what's considered the canonical", 
    "book in software design patterns.", 
    "So this is Gamma, Helm, Johnson and Vlissides.", 
    "So they identified 23 design patterns that collectively we'll call them", 
    "structural.", 
    "They refer to the way that classes in an application interact with one", 
    "another, and how they collaborate.", 
    "So each pattern tries to capture a common solution to some category of", 
    "related problems.", 
    "But the pattern is not fixed.", 
    "The pattern is not actually something that is expressed in terms of code.", 
    "It's usually expressed in a more general kind of a structural form,", 
    "because you have to adapt it somewhat each individual situation.", 
    "So, what is it not?", 
    "You won't find, for example, a specific library that implements the", 
    "XYZ pattern.", 
    "In a few specific cases, you'll find a particular instances of a pattern that", 
    "are well supported by a library or a module or something like that, but the", 
    "pattern isn't the end of the design.", 
    "It's the beginning of the design.", 
    "So think of it as a template.", 
    "It's a way of thinking about the structure of the problem saying, aha,", 
    "I already know in structural terms how the classes that solve this problem", 
    "should really be collaborating.", 
    "And it's because the problem is similar to this family of problems", 
    "where this technique has been used successfully in the past.", 
    "So I promise that we won't walk through a laundry list, but I", 
    "have to show it.", 
    "I'm sort of required by law to make sure that you see a", 
    "list of all the patterns.", 
    "So here they all are.", 
    "But again, as with the refactorings, there's books that you can buy that do", 
    "a much better job than we're going to do of covering every pattern in depth,", 
    "giving you multiple examples.", 
    "What we're going to do is give an example of a subset of these.", 
    "Most of the ones that are in bold italic we're going to try to give at", 
    "least a motivation of why you'd want to use them, and show a problem that", 
    "they solve in Ruby or in Rails.", 
    "And you can go off and read about the rest of them yourselves.", 
    "As practicing software engineers in the fullness of time, you're going to", 
    "be familiar with all of these.", 
    "But rather than going through a laundry list, we thought it would be", 
    "better to motivate a few of them with specific examples.", 
    "So that's what we're going to do.", 
    "As we talk about design patterns, there's a few things you might want to", 
    "keep in mind, which are sort of the principles behind the patterns", 
    "themselves.", 
    "So, I sort of call them meta-patterns.", 
    "They're the patterns that underlie how you think about design patterns.", 
    "The biggest one is sort of pretty obvious.", 
    "The idea of a design pattern is to capture commonality.", 
    "So that means in terms of your code, you want to make it easy to separate", 
    "things that change from things that stay the same.", 
    "And as we go through a handful of these design patterns and show how", 
    "they relate to the SOLID guidelines, we'll keep coming back to this again", 
    "and again, that at the end of the day, what we're trying to do is minimize", 
    "the cost of change by keeping the things that changed separate so that", 
    "we don't have to modify stuff that stays the same all the time.", 
    "And two specific instances of this thinking that, again, as we go through", 
    "the design patterns we'll see how they apply.", 
    "One of them is programming to an interface, not to an implementation.", 
    "This sounds like motherhood and apple pie, that of course we should do this.", 
    "But you would be amazed at how often we fail to do it.", 
    "The times that we fail to do it are actually pretty subtle.", 
    "And we have some good examples that we're going to show.", 
    "The second principle is a little bit more subtle.", 
    "And this one really requires examples to show.", 
    "The idea behind software engineering was how much can we do in terms of", 
    "code reuse?", 
    "How can we minimize the effort of building new things by being able to", 
    "reuse existing pieces of code that other people have written?", 
    "And for a long time, and I think maybe still for a lot of people, the way", 
    "they think about reuse today is they think about inheritance.", 
    "If I inherited from another class, I get all of the things that it does", 
    "plus I can add my own new things.", 
    "What we'll see is that a lot of times, reuse is enabled much more", 
    "effectively, not by using inheritance, but by using some combination of", 
    "composition and delegation.", 
    "This is an enormously powerful idea.", 
    "And for now, just think of it like a mantra.", 
    "It will come back--", 
    "As we do the examples, it will become more clear.", 
    "But delegation is about interface sharing.", 
    "Inheritance is about implementation sharing.", 
    "So these two sort of reflect each other.", 
    "Right?", 
    "If what we want to do is programmed to an interface, then what we want to use", 
    "is mechanisms that allow us to capture and reuse interfaces not", 
    "implementation, because patterns aren't the solution.", 
    "They're the beginning of thinking about the solution.", 
    "The last term that I'll use from time to time is anti-pattern.", 
    "Basically, an anti-pattern is code that once you take a good look at it,", 
    "it becomes obvious that it should use some design pattern, but it doesn't.", 
    "And a lot of times, the way the code gets this way is not because the", 
    "person who wrote it is an idiot.", 
    "It's because it started out being a perfectly adequate solution to the", 
    "problem that that piece of code originally solved, but as the code's", 
    "responsibilities grew and evolved over time, it essentially outgrew its", 
    "original design.", 
    "So anti-patterns occur at least as often in code that started out with", 
    "the best of intentions, but just got a little bit too big.", 
    "And some symptoms of this in your own code is sometimes you'll find that you", 
    "know what the right thing is to do, you know what would be the right way", 
    "to make a change, but it's actually much easier to do it in a hacky way.", 
    "Some people call that viscosity.", 
    "You know that there's places in your code where there's repetition.", 
    "And you know that you really ought to dry it out, but it's difficult to pull", 
    "out the parts that you want to dry out, isolate them somewhere and reuse", 
    "them, because the parts that are repetitive are wired into the code", 
    "surrounding them in such a way that you can't yank them out cleanly.", 
    "The corollary is then you end up with needless repetition and needless", 
    "complexity.", 
    "So you're designing something and you think sometime in the future somebody", 
    "might want to use it in a slightly different way, so you sort of try to", 
    "design a facility that would allow it to be reused.", 
    "Most of the time, that's superfluous.", 
    "And there's some design patterns that you can use from the get-go that will", 
    "avoid having to do that.", 
    "So, with those definitions out of the way, here are a preview of the", 
    "principles that we're going to go through.", 
    "They're the SOLID principles for object-oriented programming.", 
    "And probably the most well known exposition of these is Uncle Bob", 
    "Martin's exposition.", 
    "He's one of the co-authors of the Agile Manifesto.", 
    "And he's got a great website slash blog called butunclebob.com.", 
    "So the Single Responsibility principle, the Open/Closed principle,", 
    "Liskov substitution, injection of dependencies and Demeter.", 
    "And I want to call your attention to the fact that if you look up the SOLID", 
    "principles online, usually the I stands for Interface Segregation, and", 
    "the D is used to stand for Dependency Injection.", 
    "Dependency injection is important, and we're going to talk about it.", 
    "Interface segregation, not to say that it's unimportant, but it becomes less", 
    "important in Ruby and dynamically typed or in duck type languages than", 
    "it would be in statically typed languages.", 
    "The book has a pretty good elaboration of why that's the case.", 
    "But in view of that fact, I have I've taken some artistic license, and I'm", 
    "going to use I to mean Injection of Dependencies, and D for the Demeter", 
    "principle, which is kind of a wannabe SOLID principle, but isn't officially", 
    "part of the SOLID family.", 
    "But it's important enough and arises all the time in Ruby code, so I", 
    "thought it was important cover.", 
    "So this is our slightly modified version of SOLID.", 
    "I mentioned that our approach to addressing these is going to be really", 
    "similar to the way we did refactoring.", 
    "So just as with refactoring, there's code smells at the level of a class", 
    "that tell us that something might need our attention.", 
    "There's also designed smells that tell us when our relationships among", 
    "classes might need to be restructured.", 
    "In both cases, there's definitive catalogs that contain many more smells", 
    "than we're going to talk about.", 
    "Just as we saw that some refactorings aren't necessary in Ruby because they", 
    "exist to workaround issues that arise in statically typed languages, we're", 
    "going to find some design patterns that are superfluous in Ruby for the", 
    "same reason.", 
    "We're going to look at some quantitative metrics that are tip-offs", 
    "that our code might be headed in a bad direction.", 
    "Whereas before we refactored largely within a class, refactoring in this", 
    "world is now about moving code between classes, extracting", 
    "one class from another.", 
    "And the very memorable SOFA acronym has its counterpart in the at least as", 
    "memorable SOLID acronym, but with our modification that I is for Injection", 
    "of Dependencies and D is for the principle of Demeter.", 
    "So here are some statements about design patterns.", 
    "One of them is false."
  ]
}