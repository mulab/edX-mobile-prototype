{
  "start": [
    120, 
    2770, 
    4730, 
    7450, 
    10460, 
    11890, 
    15390, 
    17550, 
    19590, 
    22300, 
    24980, 
    28470, 
    29970, 
    34200, 
    37220, 
    40130, 
    41230, 
    43200, 
    47520, 
    51010, 
    54230, 
    55790, 
    59920, 
    63920, 
    65400, 
    69000, 
    73170, 
    75060, 
    75770, 
    79620, 
    83160, 
    85400, 
    88070, 
    89350, 
    92710, 
    93680, 
    97730, 
    100410, 
    102310, 
    105560, 
    108980, 
    113510, 
    116220, 
    118980, 
    122010, 
    125960, 
    128710, 
    130080, 
    133510, 
    137590, 
    142490, 
    143386, 
    144690, 
    147240, 
    151130, 
    154830, 
    157320, 
    159980, 
    160350, 
    162670, 
    163950, 
    164650, 
    167020, 
    171410, 
    174810, 
    179100, 
    181180, 
    185290, 
    188510, 
    190130, 
    191370, 
    194980, 
    196950, 
    199200, 
    200740, 
    203940, 
    206720, 
    210500, 
    211190, 
    213910, 
    215190, 
    217290, 
    217660, 
    218960, 
    222110, 
    227000, 
    230080, 
    232250, 
    236190, 
    240500, 
    244140, 
    246080, 
    246470, 
    249120, 
    250420, 
    253210, 
    254890, 
    256079, 
    259050, 
    260029, 
    262560, 
    265780, 
    269690, 
    272730, 
    274580, 
    278440, 
    283650, 
    288475, 
    291080, 
    292950, 
    298560, 
    304250, 
    308480, 
    310340, 
    313910, 
    317090, 
    319100, 
    322540, 
    323590, 
    327310, 
    330530, 
    333420, 
    335330, 
    336310, 
    340360, 
    341800, 
    345980, 
    351200, 
    354800, 
    360300, 
    362170, 
    365720, 
    368570, 
    369830, 
    374280, 
    376080, 
    377040, 
    380250, 
    385120, 
    386430, 
    391200, 
    392410, 
    394420, 
    396240, 
    398630, 
    400840, 
    404460, 
    405180, 
    406970, 
    409620, 
    413930, 
    417930, 
    421200, 
    424490, 
    427570, 
    431010, 
    435170, 
    438170, 
    442050, 
    445200, 
    447480, 
    449940, 
    452860, 
    454330, 
    458910, 
    461770, 
    463110, 
    465070, 
    465940, 
    470430, 
    473150, 
    476510, 
    479980, 
    484220, 
    486570, 
    489640, 
    491220, 
    493540, 
    496750, 
    498560, 
    501020, 
    505220, 
    508960, 
    510650, 
    513770, 
    514789, 
    519440, 
    522960, 
    525740, 
    528880, 
    530810, 
    531860, 
    534550, 
    538010, 
    539230, 
    544010, 
    545250, 
    547700, 
    551740, 
    553510, 
    555700, 
    559300, 
    563190, 
    566390, 
    569250, 
    571830, 
    572700, 
    573730, 
    575450, 
    578530, 
    579550, 
    583070, 
    585030, 
    588680, 
    592660, 
    593420, 
    597520, 
    598780, 
    600070, 
    601170, 
    603720, 
    606420, 
    608310, 
    611710, 
    615560, 
    618790, 
    619820, 
    623250, 
    626430, 
    626820, 
    630540, 
    634780, 
    638610, 
    639710, 
    641000, 
    644246, 
    645190, 
    647890, 
    652900, 
    654400, 
    656410, 
    659720, 
    662700, 
    663850, 
    668290, 
    673200, 
    676340, 
    679240, 
    681390, 
    683060, 
    686560, 
    689590, 
    691880, 
    694260, 
    695670, 
    698930, 
    701550, 
    705100, 
    707060, 
    710010, 
    714130, 
    717690, 
    719570, 
    722520, 
    726030, 
    727490, 
    730290, 
    732250, 
    733700, 
    736800, 
    739770, 
    743410, 
    746250, 
    749290, 
    752060, 
    758330, 
    762010, 
    764270, 
    765720, 
    768750, 
    771190, 
    777390, 
    781070, 
    783680, 
    785090, 
    787780, 
    788740, 
    790820, 
    794670, 
    798090, 
    800820, 
    804510, 
    805230, 
    809790, 
    812410, 
    816470, 
    818500, 
    820250, 
    820980, 
    823140, 
    825390, 
    829270, 
    832960, 
    835120, 
    837630, 
    840230, 
    842460, 
    845000, 
    848630, 
    850290, 
    853040, 
    854400, 
    858860, 
    863190, 
    863620, 
    864630, 
    865930, 
    868900, 
    871110, 
    873020, 
    873850, 
    875360, 
    876930, 
    879230, 
    882550, 
    886910, 
    891150, 
    894430, 
    896040, 
    897660, 
    899520, 
    900700, 
    904060, 
    907630, 
    913720, 
    916160, 
    918140, 
    919370, 
    919970, 
    922120, 
    925370, 
    928290, 
    931710, 
    934620, 
    939340, 
    944090, 
    947750, 
    950400, 
    951800, 
    957170, 
    959890, 
    963790, 
    966250, 
    967660, 
    967900, 
    972260, 
    973780, 
    975470, 
    978180, 
    979780, 
    983170, 
    984720, 
    987920, 
    990110, 
    992580, 
    995560, 
    1000050, 
    1003250, 
    1004520, 
    1006200, 
    1008140, 
    1010630, 
    1011390, 
    1014160, 
    1016510, 
    1016840, 
    1020400, 
    1021610, 
    1023710, 
    1027040, 
    1030108, 
    1032730, 
    1036060, 
    1037618, 
    1041040, 
    1043598, 
    1046849, 
    1050070, 
    1052140, 
    1055190, 
    1058700, 
    1059910, 
    1063920, 
    1065870, 
    1069200, 
    1072370, 
    1074940, 
    1079820, 
    1082870, 
    1084270, 
    1088650, 
    1093570, 
    1095450, 
    1096660, 
    1098060, 
    1099500, 
    1102010, 
    1105360, 
    1109330, 
    1113320, 
    1116670, 
    1119630, 
    1121580, 
    1122780, 
    1123270, 
    1126320, 
    1130040, 
    1133140, 
    1134800, 
    1136400, 
    1138020, 
    1139900, 
    1143060, 
    1144740, 
    1148350, 
    1150270, 
    1152360, 
    1153990, 
    1157830, 
    1160510, 
    1164650, 
    1165630, 
    1168850, 
    1173080, 
    1176400, 
    1178750, 
    1180880, 
    1184640, 
    1185850, 
    1189140, 
    1193390, 
    1194730, 
    1195860, 
    1198790, 
    1199820, 
    1204660, 
    1207920, 
    1209690, 
    1213050, 
    1215450, 
    1217260, 
    1221640, 
    1225320, 
    1227430, 
    1231020, 
    1233010
  ], 
  "end": [
    2770, 
    4730, 
    7450, 
    10460, 
    11890, 
    15390, 
    17550, 
    19590, 
    22300, 
    24980, 
    28470, 
    29970, 
    34200, 
    37220, 
    40130, 
    41230, 
    43200, 
    47520, 
    51010, 
    54230, 
    55790, 
    59920, 
    63920, 
    65400, 
    69000, 
    73170, 
    75060, 
    75770, 
    79620, 
    83160, 
    85400, 
    88070, 
    89350, 
    90600, 
    93680, 
    97730, 
    100410, 
    102310, 
    105560, 
    108980, 
    113510, 
    116220, 
    118980, 
    122010, 
    125960, 
    128710, 
    130080, 
    133510, 
    137590, 
    142490, 
    143386, 
    144690, 
    147240, 
    151130, 
    154830, 
    157320, 
    159980, 
    160350, 
    162670, 
    163950, 
    164650, 
    167020, 
    171410, 
    174810, 
    179100, 
    181180, 
    185290, 
    188510, 
    190130, 
    191370, 
    194980, 
    196950, 
    199200, 
    200740, 
    203940, 
    206720, 
    210500, 
    211190, 
    213910, 
    215190, 
    217290, 
    217660, 
    218960, 
    222110, 
    227000, 
    230080, 
    232250, 
    236190, 
    240500, 
    244140, 
    246080, 
    246470, 
    249120, 
    250420, 
    253210, 
    254890, 
    256079, 
    259050, 
    260029, 
    262560, 
    265780, 
    269690, 
    272730, 
    274580, 
    278440, 
    283650, 
    288475, 
    291080, 
    292950, 
    298560, 
    304250, 
    308480, 
    310340, 
    313910, 
    317090, 
    319100, 
    322540, 
    323590, 
    327310, 
    330530, 
    333420, 
    335330, 
    336310, 
    340360, 
    341800, 
    345980, 
    351200, 
    354800, 
    360300, 
    362170, 
    365720, 
    368570, 
    369830, 
    374280, 
    376080, 
    377040, 
    380250, 
    385120, 
    386430, 
    391200, 
    392410, 
    394420, 
    396240, 
    398630, 
    400840, 
    404460, 
    405180, 
    406970, 
    409620, 
    413930, 
    417930, 
    421200, 
    424490, 
    427570, 
    431010, 
    435170, 
    438170, 
    442050, 
    445200, 
    447480, 
    449940, 
    452860, 
    454330, 
    458910, 
    461770, 
    463110, 
    465070, 
    465940, 
    470430, 
    473150, 
    476510, 
    479980, 
    484220, 
    486570, 
    489640, 
    491220, 
    493540, 
    496750, 
    498560, 
    501020, 
    505220, 
    508960, 
    510650, 
    513770, 
    514789, 
    519440, 
    522960, 
    525740, 
    528880, 
    530810, 
    531860, 
    534550, 
    538010, 
    539230, 
    544010, 
    545250, 
    547700, 
    551740, 
    553510, 
    555700, 
    559300, 
    563190, 
    566390, 
    569250, 
    571830, 
    572700, 
    573730, 
    575450, 
    578530, 
    579550, 
    583070, 
    585030, 
    588680, 
    592660, 
    593420, 
    597520, 
    598780, 
    600070, 
    601170, 
    603720, 
    606420, 
    608310, 
    611710, 
    615560, 
    618790, 
    619820, 
    623250, 
    626430, 
    626820, 
    630540, 
    634780, 
    638610, 
    639710, 
    641000, 
    644246, 
    645190, 
    647890, 
    652900, 
    654400, 
    656410, 
    659720, 
    662700, 
    663850, 
    668290, 
    673200, 
    676340, 
    679240, 
    681390, 
    683060, 
    686560, 
    689590, 
    691880, 
    694260, 
    695670, 
    698930, 
    701550, 
    705100, 
    707060, 
    710010, 
    714130, 
    717690, 
    719570, 
    722520, 
    726030, 
    727490, 
    730290, 
    732250, 
    733700, 
    736800, 
    739770, 
    743410, 
    746250, 
    749290, 
    752060, 
    758330, 
    762010, 
    764270, 
    765720, 
    768750, 
    771190, 
    777390, 
    781070, 
    783680, 
    785090, 
    787780, 
    788740, 
    790820, 
    794670, 
    798090, 
    800820, 
    804510, 
    805230, 
    809790, 
    812410, 
    816470, 
    818500, 
    820250, 
    820980, 
    823140, 
    825390, 
    829270, 
    832960, 
    835120, 
    837630, 
    840230, 
    842460, 
    845000, 
    848630, 
    850290, 
    853040, 
    854400, 
    858860, 
    863190, 
    863620, 
    864630, 
    865930, 
    868900, 
    871110, 
    873020, 
    873850, 
    875360, 
    876930, 
    879230, 
    882550, 
    886910, 
    891150, 
    894430, 
    896040, 
    897660, 
    899520, 
    900700, 
    904060, 
    907630, 
    913720, 
    916160, 
    918140, 
    919370, 
    919970, 
    922120, 
    925370, 
    928290, 
    931710, 
    934620, 
    939340, 
    944090, 
    947750, 
    950400, 
    951800, 
    957170, 
    959890, 
    963790, 
    966250, 
    967660, 
    967900, 
    972260, 
    973780, 
    975470, 
    978180, 
    979780, 
    983170, 
    984720, 
    987920, 
    990110, 
    992580, 
    995560, 
    1000050, 
    1003250, 
    1004520, 
    1006200, 
    1008140, 
    1010630, 
    1011390, 
    1014160, 
    1016510, 
    1016840, 
    1020400, 
    1021610, 
    1023710, 
    1027040, 
    1030109, 
    1032730, 
    1036060, 
    1037619, 
    1038869, 
    1043599, 
    1046850, 
    1050070, 
    1052140, 
    1055190, 
    1058700, 
    1059910, 
    1063920, 
    1065870, 
    1069200, 
    1072370, 
    1074940, 
    1079820, 
    1082870, 
    1084270, 
    1088650, 
    1093570, 
    1095450, 
    1096660, 
    1098060, 
    1099500, 
    1102010, 
    1105360, 
    1109330, 
    1113320, 
    1116670, 
    1119630, 
    1121580, 
    1122780, 
    1123270, 
    1126320, 
    1130040, 
    1133140, 
    1134800, 
    1136400, 
    1138020, 
    1139900, 
    1143060, 
    1144740, 
    1148350, 
    1150270, 
    1152360, 
    1153990, 
    1157830, 
    1160510, 
    1164650, 
    1165630, 
    1168850, 
    1173080, 
    1176400, 
    1178750, 
    1180880, 
    1184640, 
    1185850, 
    1189140, 
    1193390, 
    1194730, 
    1195860, 
    1198790, 
    1199820, 
    1204660, 
    1207920, 
    1209690, 
    1213050, 
    1215450, 
    1217260, 
    1221640, 
    1225320, 
    1227430, 
    1231020, 
    1233010, 
    1235960
  ], 
  "text": [
    "Let's walk through all the answers, shall we?", 
    "An object representing a database.", 
    "Now, in principle, you'd think it could be that.", 
    "But if it was an object representing a database, remember a database consists", 
    "of a number of tables.", 
    "So when I say something like t.datetime, how would I be able to", 
    "tell which table I meant?", 
    "So, it's not that one.", 
    "An object representing an instance of a model.", 
    "Well, you could imagine this being almost right.", 
    "If I had said an object representing a model, then you could imagine this", 
    "being possibly right.", 
    "A movie is a kind of model and it has a datetime, but it doesn't really make", 
    "sense to say that it represents an instance of a model, because we're", 
    "talking about making changes to the database to represent movies", 
    "generally, right?", 
    "So it's not the green one.", 
    "An object representing a table actually is correct.", 
    "And it should have been a tip off that I'm giving the name of the table.", 
    "And now I'm yielding an object, and the object is going to allow me to do", 
    "operations on that table.", 
    "Now in this simple example, the only operation that I've shown is adding", 
    "columns based on what the column types are, but the create_table method", 
    "allows you to do a bunch of other stuff too.", 
    "You can rename columns, and you can do all kinds of exciting things.", 
    "So hopefully it's clear why, in this code, even though I didn't give you", 
    "any other information about it, and you haven't looked at the", 
    "source code, right?", 
    "This is a sort of trying to get inside the designer's intent.", 
    "The object being yielded by this create_table method represents the", 
    "actual table and things that I'm going to do to it.", 
    "In this case, creating new columns for it.", 
    "Coolio?", 
    "Yes sir?", 
    "I think I see what you mean.", 
    "So think of create_table, and this is an example of using yield, which we", 
    "didn't unfortunately have time to cover in lecture, although it's", 
    "represented some on homework one.", 
    "Think of create_table as really taking two arguments.", 
    "The first argument is the name of the table to be created.", 
    "The second argument is really a piece of code that says, here is what to do", 
    "with the object representing the newly created table.", 
    "So that's really what's going on here, right?", 
    "Whenever you see a do block in Ruby, this is really what it means.", 
    "The last argument to the method is like an anonymous function that says,", 
    "whatever thing you're going to produce, here is a piece of code to", 
    "apply to that thing.", 
    "In this case, the thing in question is the newly created table.", 
    "And on that newly created table, I'm going to call a method that creates a", 
    "datetime column, a method that creates a string type of column, and so forth.", 
    "Sir.", 
    "Ah, thank you.", 
    "OK let me see if I got that right.", 
    "In most previous examples where we've seen do with yielding, it's been in", 
    "the context of the thing that is being yielded.", 
    "Well, we're calling it on a collection, and the thing being", 
    "yielded is one at a time, each element of a collection.", 
    "OK.", 
    "Great question and I'm glad you asked it.", 
    "Although it's going to put us a segment behind.", 
    "But that's OK.", 
    "This is really important.", 
    "So when we looked at examples like you have an array, and then you call each", 
    "on the array, what's the analogy?", 
    "Each is a method that takes an anonymous lambda saying, here's what", 
    "you're going to do on each element of the collection.", 
    "But it's really just a special case of this more general mechanism which is,", 
    "I'm going to pass you a function.", 
    "Whatever object you create, you're going to do", 
    "something with that function.", 
    "Each is a special case where the function is something that's going to", 
    "return elements successively out of a collection.", 
    "And then I'm going to apply some code to it.", 
    "But you don't have to use it that way, right?", 
    "That is one of many uses of this yield functionality.", 
    "And one of the things, indeed, that people get hung up on when they see", 
    "Ruby is, they see the examples with each, and they go, oh yeah, I get it.", 
    "It's like an iterator.", 
    "I'm going to get back one object at a time and pass the", 
    "object to this function.", 
    "But then they don't realize that you don't have to iterate over a", 
    "collection.", 
    "You could use this for anything.", 
    "And in fact, I'll try to do an example when we get a little further into the", 
    "course where you can write your own functions that yield something back.", 
    "And it turns out to be a really nice way to do code reuse that is much more", 
    "awkward when you don't have blocks.", 
    "So I think the short version of the answer to your question is, using", 
    "yield to iterate over a collection is only one way that you can use yield.", 
    "This is a more general example where you're yielding exactly one thing and", 
    "then you're done forever.", 
    "Very good.", 
    "Thank you for clarifying that, that was great.", 
    "OK.", 
    "So let's move on to models.", 
    "So far, we have a place to put the model.", 
    "We created a table.", 
    "But we haven't defined, in the programming language, what the model", 
    "is going to look like.", 
    "So let's take a look at that.", 
    "We mentioned last time that the basic things you can do to a piece of", 
    "persistent storage is you can create something, you can read things that", 
    "you've put in there, you can update them with new values, and you can", 
    "destroy them or delete them.", 
    "And in SQL, the Structured Query Language that forms the basis of", 
    "relational databases, that is the method that we're going to use", 
    "involves doing those operations, CRU and D, for a relational database.", 
    "An idea that is so powerful that somebody won the Turing", 
    "award for it, Ted Codd.", 
    "So the idea, if you have done any web programming in primitive frameworks", 
    "like PHP or, heaven help you, in Perl, you're probably used to writing simple", 
    "SQL statements to do Select this, Insert that, Update that.", 
    "The Rails way is quite different.", 
    "And it's different for ways that you might have to take my word for a", 
    "little bit now, but are going to become very, very obvious once you", 
    "start dealing with multiple tables.", 
    "In Rails, the SQL statements are generated at run time based", 
    "on your Ruby code.", 
    "So this is another example of code generation at work.", 
    "And if you've seen basic SQL before, this won't look new.", 
    "If you have not seen basic SQL don't worry about it.", 
    "There is a small amount of information in the book.", 
    "It is a lot of tutorials.", 
    "You don't need to know a lot of SQL to get most of the way through the first", 
    "half of this class.", 
    "But an example of things I can do in SQL is I can create objects by saying", 
    "Insert into some table, and here's the columns that correspond to that table", 
    "and some values that I'm going to associate with that new row.", 
    "I can Select, which means, from the Users table, find all the ones where", 
    "the birth date is between these two dates.", 
    "And for all the ones that you find, return asterisk, which means all", 
    "attributes of those users, select star.", 
    "I can say Update.", 
    "So for all users where they have the username Fox, I want to update them", 
    "and set their email to be something else.", 
    "And you'd expect this.", 
    "It'd probably only update one row in the common case.", 
    "And I can say delete from users where, in this case, the primary key, the id,", 
    "happens to be one.", 
    "So this is the most simple possible imaginable ways to do CRUD in SQL is", 
    "these four statements.", 
    "You're not going to have to know a whole lot more than this", 
    "for a little while.", 
    "As Homer Simpson says, \"all your problems will soon be over for a", 
    "couple of months.\"", 
    "So with this very basic piece of it in mind, what does the Ruby", 
    "side of it look like?", 
    "This is what the database side looks like.", 
    "What does it look like on the Ruby side?", 
    "Well, we get a lot of power from if we subclass from ActiveRecord::Base.", 
    "Remember we said that Ruby, or Rails, uses the ActiveRecord design pattern?", 
    "It's a particular way of thinking about how models in the programming", 
    "language are related to the place that they're stored.", 
    "So, ActiveRecord is what's going to connect the model to the database.", 
    "And remember from the previous lecture when we talked about the ActiveRecord", 
    "pattern, that the way that design pattern works is every kind of model", 
    "has built-in knowledge of how to interact with the database.", 
    "Now, since the database is one thing, right, there's only one database here,", 
    "all those models really have that behavior in common, and most of it is", 
    "provided in ActiveRecord::Base.", 
    "So that's why we inherit from it, we get a lot of this for free.", 
    "And it provides a lot of these basic CRUD operations.", 
    "Let's take a look.", 
    "These two lines, class movie, inherits from ActiveRecord::Base, end.", 
    "That is my entire class definition.", 
    "OK?", 
    "Now that's not really true, because I'm inheriting from", 
    "ActiveRecord::Base.", 
    "What I really should say is, my class doesn't provide any new functionality", 
    "beyond what's already in ActiveRecord::Base.", 
    "But as we'll see, ActiveRecord::Base actually has a lot of stuff in it.", 
    "So, having defined our class, what can we say?", 
    "We can create a new movie instance, which doesn't save it, it just creates", 
    "an in-memory object representing a movie.", 
    "And we can say, movie.title and movie.rating.", 
    "We can assign things to them.", 
    "Now, where did these methods come from?", 
    "Remember when we did an introduction to Ruby object oriented programming,", 
    "and we saw things like attribute accessor?", 
    "And we could have said, hey, even though really everything is an", 
    "instance variable, there's this quick way to create built-in accessors and", 
    "built-in setters using attr_accessor so that you don't have to write all", 
    "this boiler plate code.", 
    "Well, what we're seeing here is sort of the moral equivalent of that for", 
    "ActiveRecord.", 
    "When I say class movie inherits from ActiveRecord::Base, there's a lot more", 
    "going on here than just your plain vanilla Java style of inheritance,", 
    "which is, oh, you get a bunch of functions, knock yourself out.", 
    "Another thing that's going on here is that the name of the class that I'm", 
    "declaring is introspected.", 
    "Remember, what does that mean?", 
    "It means that objects can ask questions about themselves, right?", 
    "If I am a class, I can ask, what is the string representation of my name?", 
    "It's movie.", 
    "Rails will lowercase it and pluralize it, and look for a database table with", 
    "that same name, right?", 
    "This is an example of convention over configuration.", 
    "There's no separate file that says, the class movie consists of objects", 
    "that are going to be stored in the movies table.", 
    "Rails just infers that from the name of the class.", 
    "Now, as with all convention over configuration, you can override this.", 
    "There's ways to override every default behavior but the observation is, in", 
    "most cases, you don't really have a strong reason to do it.", 
    "And if you can work with the built-in conventions you end up having to write", 
    "and therefore test a lot less code.", 
    "So, what's going on?", 
    "One more time.", 
    "The name of the class I'm declaring is movie.", 
    "Therefore, Rails will look for movies, plural, as a database table.", 
    "What else will it do?", 
    "It will query the database and say, what are the columns and the types of", 
    "those columns in the movies table?", 
    "Well, there was a column called title that I declared as being a string, so", 
    "ActiveRecord will arrange for there to be an accessor for that column, and a", 
    "setter, right?", 
    "Because title = is actually a setter, like we manually constructed when we", 
    "introduced Ruby.", 
    "There's a column called rating.", 
    "That appears to be a string.", 
    "So it will create a setter and a getter for me based on", 
    "that, and so on.", 
    "And the setters can be quite sophisticated.", 
    "For example, if you declared a database column that is a datetime,", 
    "which is the way that SQL databases represent a date and a time,", 
    "conversion between that and Ruby's built-in date and time", 
    "types will be automatic.", 
    "And it will do the right thing if you have an integer versus a day of the", 
    "week, versus a time object, versus a bunch of other stuff.", 
    "Right?", 
    "So, another way to create a movie.", 
    "I can pass new an optional second argument, which is a do block.", 
    "Again, another example of using do not to go through a collection but to", 
    "yield one thing.", 
    "What's being yielded?", 
    "The brand new movie object just created, which has no values on any of", 
    "its attributes.", 
    "And then I can set the values on its attributes.", 
    "So, what's the high order bit that I want you to notice here?", 
    "It's the bottom thing in red.", 
    "That's why it's in red, for those of you who see red.", 
    "The getters and setters are not just modifying instance variables.", 
    "So now hopefully you begin to see the logic behind the way Ruby", 
    "and Rails do things.", 
    "When we were defining our own, plain old regular Ruby objects or POROs,", 
    "Plain Old Ruby Objects, we made getters and setters initially by hand,", 
    "and then later using the shortcut of attr_accessor.", 
    "And the only thing that those getters and setters did was modify or return", 
    "the value of the corresponding instance variable, right?", 
    "So it seemed like really simple code.", 
    "Here, the getters and setters actually interact with the database.", 
    "And they interact with the in-memory representation of an object that", 
    "you've pulled out of the database and you now want to manipulate.", 
    "But from the programming point of view, what do they look like?", 
    "They still look like attributes, right?", 
    "It looks like you're doing the same kind of code as if it was a Plain Old", 
    "Ruby Object.", 
    "So, I just showed some examples of creating a new movie, but I also", 
    "pointed out that doesn't mean you saved it.", 
    "All you've done is created an in-memory object representing it.", 
    "If you then call save on that object, or if you also call save!", 
    "on that object, that will actually cause the changes to be", 
    "pushed to the database.", 
    "As with many functions, and I mentioned this when we talked about", 
    "Ruby, when there's a version that has a bang on the end of it, it means", 
    "Danger, Will Robinson.", 
    "And what it means in the case of save!", 
    "is that, if anything goes wrong with save!", 
    "you'll get an exception.", 
    "Whereas, if you just call plain old save, you have to check the return", 
    "value to make sure it isn't nil, and make sure something didn't go wrong.", 
    "So you'll see a number of active record methods that have both a safe", 
    "version and an exception throwing version, and it's up to you which", 
    "one's more appropriate to use.", 
    "Once the object is created, it acquires a primary key.", 
    "Remember we said that every table in the database, by convention in Rails,", 
    "has a column called id, which is an integer, and that the id of the object", 
    "is unique in the universe, or unique within that table.", 
    "Same thing.", 
    "Again, you don't have to call the primary key id.", 
    "There's ways to override all these things, but unless you have a good", 
    "reason to, Rails makes it less work for you to do the built-in thing.", 
    "Now of course, why wouldn't the object have an id before you", 
    "call save or save!", 
    "Because it doesn't exist yet, right?", 
    "It only exists as an in-memory representation of a", 
    "newly created object.", 
    "You haven't actually saved it to anywhere.", 
    "So until you save it, the id field will look like it's nil.", 
    "In fact, that's one way to check if the object has ever been saved or if", 
    "it's a brand new object that has never been persisted.", 
    "You can also call new record on it, and if new record is true, it's never", 
    "been saved.", 
    "So all of these behaviors we've seen come from ActiveRecord::Base, right?", 
    "This is not like the Plain Old Ruby Objects that we were doing now.", 
    "These are built-in, more sophisticated behaviors that come from the", 
    "ActiveRecord design pattern.", 
    "So that's the C in CRUD.", 
    "How about Read?", 
    "How do you find things in the database?", 
    "There's a very nice class method called where.", 
    "Again, if you have done any programming where you had to create", 
    "your own SQL queries, it should be obvious what this means.", 
    "And if you haven't, it should also be obvious.", 
    "Find movies where the rating is PG.", 
    "What you get back from this is an Enumerable collection.", 
    "Notice I didn't say that you get back an array, right?", 
    "I'm trying to train all of you to think in Ruby terms.", 
    "The important thing about a collection is not whether it's an array, whether", 
    "it's a range, or whether it's a hash.", 
    "The only thing you should care about is, can I iterate over it using", 
    "something like each.", 
    "What we'll see when we talk about some more advanced topics is that you can", 
    "create very complex database queries that the result of them behaves like a", 
    "collection.", 
    "You can iterate over it.", 
    "But it isn't really a collection.", 
    "In fact, until you actually de-reference some element in the", 
    "collection, it doesn't technically exist.", 
    "It's very cool lazy loading behavior.", 
    "But that's for later.", 
    "For now, where.", 
    "We can see how it works.", 
    "We can actually provide multiple conditions.", 
    "And here's an example providing two conditions.", 
    "Release date is less than some cutoff, and rating equals some rating.", 
    "And then I provide a hash to map the actual values that I want.", 
    "Now, why am I doing it this way rather than just putting all this stuff", 
    "inside the string quotes?", 
    "There's at least two very good reasons.", 
    "There may be more than two very good reasons, but here's the", 
    "two I can think of.", 
    "One of them, which we'll talk more about when we talk about basic", 
    "security and not sticking your foot where doesn't belong when you create a", 
    "SAS application is, if the values for cutoff and rating came from a user,", 
    "and users by definition are evil and cause trouble.", 
    "If only we didn't have users, our applications would be", 
    "much easier to test.", 
    "OK?", 
    "But we do have users, and some of them are evil.", 
    "And they will try to provide values for things like the rating that will", 
    "cause this query to actually do something destructive.", 
    "So you should never interpolate the values directly into a string.", 
    "Rails instead gives us this nice mechanism of saying, ah, I'll just", 
    "match up the tokens in your query with the keys in the hash that you pass me.", 
    "And that has the nice second benefit that when I say, cutoff one year ago.", 
    "By the way, tell me that isn't cool, that you can just say that.", 
    "When you're in the shower tonight, think about how that's implemented.", 
    "It's mind blowing.", 
    "But the return value of 1.year.ago is a datetime object, right?", 
    "Ruby has a datetime class, and that's an instance of it.", 
    "But, because you're putting it into a query, where is going to take care of", 
    "automatically formatting it in the right way that your particular", 
    "database expects.", 
    "Right?", 
    "So there's all kinds of good reasons to use this syntax where you're using", 
    "basically keywords.", 
    "And you can call these whatever you want, right?", 
    "I just tried to pick names that were suggestive.", 
    "This is the bad way to do it.", 
    "This is probably the way that if, like me, you ever wrote PHP, you probably", 
    "did stuff like this.", 
    "If you do this on the final exam quiz, I'll fail you.", 
    "No, I really won't, but don't do it.", 
    "What is less obvious is that you can chain these together.", 
    "So for example, I could say kiddie movies are those where the rating", 
    "equals G. And old kiddie movies are kiddie movies where the release date", 
    "is earlier than 30 years ago.", 
    "And yes, there are such movies.", 
    "I know you weren't alive then, but there really are.", 
    "Some of them are very good.", 
    "But what's neat here is you can see that I've basically nested both of", 
    "these, right?", 
    "So once again, what is the thing that is returned from where?", 
    "Well, it wears many hats, so to speak.", 
    "Right?", 
    "It's a collection in that you could iterate over and say, OK, now for each", 
    "one of those, do something.", 
    "Print it out, look at it, whatever.", 
    "But, it also lets you call where on itself.", 
    "It also responds to the where method, so you can chain these together.", 
    "And as we'll see, this provides a really nice way to essentially build", 
    "up a complicated query over time, and then pull the trigger at the last", 
    "minute to actually execute it.", 
    "Very cool.", 
    "It wouldn't be Rails and it wouldn't be Ruby if we didn't do some", 
    "metaprogramming, so let's do some.", 
    "You can always try to find something if you know its primary key.", 
    "And this is not as unusual as you might think.", 
    "Because, for example, if you just displayed a web page with, let's say,", 
    "all of the movies in the database, at the time you generated that page you", 
    "knew all of the ids.", 
    "So it would be easy to generate links that include the primary key id for", 
    "showing any specific one.", 
    "But, you could also do stuff like this, right?", 
    "And now, those of you are racing ahead of me, which I hope is most of you", 
    "because I'm really tired, can figure out what's going on here.", 
    "When I say, find by rating, this is just like when we use method missing", 
    "to add new currencies to our currency converter class.", 
    "The rule is pretty simple.", 
    "If the method name starts with find by, and if the word or words following", 
    "find by are attributes of the model, then it will be converted into the", 
    "equivalent call using where.", 
    "Right?", 
    "This is all done using method missing.", 
    "So you guys have already seen how to do this.", 
    "You could probably implement this yourselves.", 
    "And it's also smart enough to say things like, find by rating and", 
    "release date and title, and to parse out, split it at the word and, make a", 
    "conjunction, and do the query that looks like it should do what you want.", 
    "And the difference between find by rating and find all by rating is that,", 
    "this one will give me back the first one that happens to match.", 
    "Find all by rating will give me back an Enumerable", 
    "collection of all of them.", 
    "OK?", 
    "So again, all of this comes from ActiveRecord::Base.", 
    "And you can start to see that inheriting from ActiveRecord::Base", 
    "actually gives you a lot of stuff, and it's because of metaprogramming that", 
    "you get a lot of that power.", 
    "Pretty neat.", 
    "How about updating stuff?", 
    "There's at least two ways to do it.", 
    "One way you can do it is, you can load an object from the database.", 
    "You can modify some attribute on it.", 
    "But of course, remember that you still have to explicitly say, OK, I'm done", 
    "with the object, now persist it.", 
    "So I can call save or save!", 
    "to persist the object.", 
    "A shortcut is I can use the update attributes call, which again has both", 
    "a safe version and not safe version.", 
    "And in this case, I just pass a hash of attribute names and new values for", 
    "the attributes.", 
    "And again, I'm taking advantage of the fact that because ActiveRecord can", 
    "figure out that release_date is a datetime, it will convert more or less", 
    "anything reasonable that I provide into the right format for the database", 
    "that I'm using.", 
    "Happily, update is transactional.", 
    "So in both of these cases, if the operation succeeds, then all of your", 
    "changes get persisted.", 
    "If the operation fails, then none of your changes get persisted.", 
    "There's a reason you win Turing awards for stuff like that.", 
    "OK.", 
    "Are we going too slow?", 
    "Because we could go a little faster.", 
    "Let's try this.", 
    "Let's see if we can drill home the difference between what we did when we", 
    "were creating basic Plain Old Ruby Objects with methods versus what", 
    "ActiveRecord is giving us.", 
    "Here is a hypothetical table called Fortune Cookies.", 
    "And that table has a column, which means an object", 
    "attribute fortune text.", 
    "And the question is, which of these instance methods of fortune cookie", 
    "would not work, would not return your silly fortune?", 
    "I'm sure you've all seen the fortune gag before.", 
    "But basically, I've got three different candidates here.", 
    "It could be that they all would work.", 
    "Or it could be that at least one of them will not work."
  ]
}