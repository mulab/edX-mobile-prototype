{
  "start": [
    300, 
    3350, 
    6530, 
    8300, 
    10130, 
    10920, 
    13840, 
    14680, 
    16540, 
    18420, 
    20420, 
    22600, 
    23740, 
    24570, 
    28140, 
    30460, 
    33430, 
    35210, 
    35870, 
    38040, 
    39890, 
    40540, 
    44920, 
    46990, 
    47560, 
    48990, 
    52270, 
    55600, 
    56940, 
    59970, 
    61310, 
    64459, 
    66740, 
    69400, 
    71330, 
    74890, 
    78920, 
    81830, 
    85220, 
    87560, 
    92070, 
    94450, 
    96010, 
    97750, 
    100790, 
    103440, 
    106180, 
    107840, 
    112700, 
    117710, 
    122220, 
    127440, 
    132060, 
    132700, 
    138150, 
    142180, 
    144920, 
    152030, 
    154170, 
    156570, 
    159880, 
    162090, 
    163430, 
    168040, 
    169080, 
    171640, 
    174040, 
    174260, 
    178050, 
    181420, 
    182960, 
    184240, 
    186320, 
    187750, 
    189580, 
    191630, 
    195630, 
    199530, 
    201210, 
    204190, 
    207850, 
    209700, 
    214640, 
    218100, 
    220350, 
    224840, 
    228170, 
    229350, 
    231280, 
    233860, 
    236090, 
    236960, 
    240050, 
    244660, 
    245730, 
    249460, 
    252170, 
    256230, 
    257810, 
    260820, 
    263230, 
    265810, 
    269240, 
    270920, 
    274670, 
    278790, 
    282850, 
    284990, 
    288790, 
    290190, 
    293730, 
    294880, 
    298170, 
    300340, 
    304360, 
    307650, 
    309820, 
    312750, 
    313850, 
    317900, 
    319060, 
    322090, 
    323030, 
    324440, 
    328650, 
    331890, 
    334980, 
    341790, 
    344940, 
    348330, 
    352960, 
    354190, 
    354360, 
    357260, 
    361250, 
    363710, 
    365980, 
    367670, 
    370990, 
    373630, 
    374890, 
    378170, 
    383120, 
    386480, 
    390390, 
    392020, 
    394430, 
    395630, 
    399390, 
    402290, 
    403250, 
    406420, 
    409960, 
    412520, 
    414190, 
    417690, 
    420650, 
    420940, 
    427550, 
    431270, 
    434150, 
    437030, 
    440210, 
    440970, 
    442970, 
    447200, 
    449520, 
    450280, 
    453290, 
    455150, 
    458160, 
    460810, 
    464670, 
    468210, 
    471000, 
    476100, 
    479810, 
    484460, 
    488380, 
    491580, 
    492280, 
    495130, 
    500130, 
    504110, 
    506710, 
    509240, 
    512090, 
    513740, 
    515120, 
    519000, 
    522350, 
    523880, 
    524880, 
    525850, 
    529460, 
    531720, 
    535360, 
    537170, 
    538540, 
    542430, 
    543830, 
    546800, 
    548170, 
    548370, 
    549800, 
    551490, 
    553910, 
    554420, 
    555370, 
    558250, 
    560120, 
    562860
  ], 
  "end": [
    3350, 
    6530, 
    8300, 
    10130, 
    10920, 
    13840, 
    14680, 
    16540, 
    18420, 
    20420, 
    22600, 
    23740, 
    24570, 
    28140, 
    30460, 
    33430, 
    35210, 
    35870, 
    38040, 
    39890, 
    40540, 
    41790, 
    46990, 
    47560, 
    48990, 
    52270, 
    55600, 
    56940, 
    59970, 
    61310, 
    64459, 
    66740, 
    69400, 
    71330, 
    74890, 
    78920, 
    81830, 
    85220, 
    87560, 
    92070, 
    94450, 
    96010, 
    97750, 
    100790, 
    103440, 
    106180, 
    107840, 
    112700, 
    117710, 
    122220, 
    127440, 
    132060, 
    132700, 
    138150, 
    142180, 
    144920, 
    152030, 
    154170, 
    156570, 
    159880, 
    162090, 
    163430, 
    168040, 
    169080, 
    171640, 
    174040, 
    174260, 
    178050, 
    181420, 
    182960, 
    184240, 
    186320, 
    187750, 
    189580, 
    191630, 
    195630, 
    199530, 
    201210, 
    204190, 
    207850, 
    209700, 
    214640, 
    218100, 
    220350, 
    224840, 
    228170, 
    229350, 
    231280, 
    233860, 
    236090, 
    236960, 
    240050, 
    244660, 
    245730, 
    249460, 
    252170, 
    256230, 
    257810, 
    260820, 
    263230, 
    265810, 
    269240, 
    270920, 
    274670, 
    278790, 
    282850, 
    284990, 
    288790, 
    290190, 
    293730, 
    294880, 
    298170, 
    300340, 
    304360, 
    307650, 
    309820, 
    312750, 
    313850, 
    317900, 
    319060, 
    322090, 
    323030, 
    324440, 
    328650, 
    331890, 
    334980, 
    341790, 
    344940, 
    348330, 
    352960, 
    354190, 
    354360, 
    357260, 
    361250, 
    363710, 
    365980, 
    367670, 
    370990, 
    373630, 
    374890, 
    378170, 
    379420, 
    386480, 
    390390, 
    392020, 
    394430, 
    395630, 
    399390, 
    402290, 
    403250, 
    406420, 
    409960, 
    412520, 
    414190, 
    417690, 
    420650, 
    420940, 
    427550, 
    431270, 
    434150, 
    437030, 
    440210, 
    440970, 
    442970, 
    447200, 
    449520, 
    450280, 
    453290, 
    455150, 
    458160, 
    460810, 
    464670, 
    468210, 
    471000, 
    476100, 
    479810, 
    484460, 
    488380, 
    491580, 
    492280, 
    495130, 
    500130, 
    504110, 
    506710, 
    509240, 
    512090, 
    513740, 
    515120, 
    519000, 
    522350, 
    523880, 
    524880, 
    525850, 
    529460, 
    531720, 
    535360, 
    537170, 
    538540, 
    542430, 
    543830, 
    546800, 
    548170, 
    548370, 
    549800, 
    551490, 
    553910, 
    554420, 
    555370, 
    558250, 
    560120, 
    562860, 
    566080
  ], 
  "text": [
    "And let's start talking more about Ruby, a language that we're using in", 
    "the course, not because it's the best language or because we have some", 
    "religious conviction about Ruby.", 
    "There's a set of points that we want you all to come away", 
    "from this course with.", 
    "And our experience has been that Ruby's the language that helps us do", 
    "this the best.", 
    "So if you know Ruby, great.", 
    "Help your colleagues out who are new to the language.", 
    "If you are new to the language, remember that you learn", 
    "programming by doing.", 
    "OK.", 
    "So let's jump right in.", 
    "You got a little bit of an intro to the language from Dave last time.", 
    "Remember, my goal in here is not to teach you the language.", 
    "It's to cover and do some different examples compared to what's in the", 
    "book, which I know many of you have bought.", 
    "Keep buying it.", 
    "Dave and I have put the down payment on a yacht already.", 
    "I'm totally kidding.", 
    "Seriously.", 
    "I'm really, really kidding.", 
    "The only way you're going to learn this stuff is by kind of struggling", 
    "through the material.", 
    "That's why the homeworks are there.", 
    "And as I'll point out, you'll have multiple chances with the auto-grader", 
    "to resubmit the homework multiple times and keep improving on stuff that", 
    "you got wrong the first time.", 
    "So, with that in mind, if you remember only one thing from", 
    "today, remember this.", 
    "Everything in Ruby is an object, and pretty much everything you can do is", 
    "done by making a method call on an object.", 
    "Now having said that, please remember more than one thing from today.", 
    "But this is the most important thing.", 
    "So let's see some concrete examples of what I mean by that.", 
    "So unlike some languages like Java where numbers are kind of objects (but", 
    "they aren't really because you have to box them before you can do anything to", 
    "them), in Ruby, even things like numbers are true objects.", 
    "I can call 57.methods.", 
    "I'm calling the method called \"the methods\" on 57, and 57 is an object.", 
    "I'm asking it what methods do you respond to?", 
    "I mean you're an object, you respond to methods.", 
    "That's what objects do.", 
    "57.heinz_varieties is a reference that probably goes over the heads of", 
    "everybody in this room because you're all too young but that's OK.", 
    "People in TV land might appreciate the reference.", 
    "Even nil is an object.", 
    "I can ask nil whether it responds to a method called (: to_s).", 
    "As Dave showed you in the last example the symbol, (: to_s).", 
    "And in fact, to hammer home the fact that these are all really just", 
    "syntactic sugar for calls on an object, we could rewrite each one of", 
    "these calls as a call that uses the Ruby primitive send.", 
    "OK?", 
    "So send is a Ruby primitive that sends a particular method which we name by", 
    "symbolizing the name of the method to the object which is the receiver,", 
    "that's the thing to the left of the period.", 
    "So really when we write 1 + 2, we're sending the plus operator and a single", 
    "argument to the object 1.", 
    "Right now if this seems weird, remember once you internalize this", 
    "concept, everything else in Ruby is going to be very straightforward.", 
    "Even things to look like array references right.", 
    "What is my array?", 
    "My array is an object that responds to the method which is dereference, the", 
    "brackets method.", 
    "And it takes an argument, which is, which index you want to dereference.", 
    "So this really is just syntactic sugar.", 
    "Right?", 
    "Syntactic sugar is a more convenient or more conventional way of writing", 
    "things that we use all the time, but at the end of the day, this is what it", 
    "gets translated into.", 
    "Same thing with assignments.", 
    "This is something that probably is new to you if you", 
    "haven't used Ruby before.", 
    "Assignment is just a method.", 
    "This turns out to have some deep implications, right?", 
    "But when I assign something to an array element, what I'm doing is I'm", 
    "actually sending it a method which is not the same as the bracket method,", 
    "but it's the bracket assignment method.", 
    "So methods whose name ends in an equal sign are special in Ruby.", 
    "They're assignment methods, but it's still the same thing, syntactic sugar", 
    "for a plain old method call.", 
    "When I do a comparison again, I'm sending the object X, the comparison", 
    "operator method, and an argument which is the thing to compare it to.", 
    "Now in a minute we'll see why is this important?", 
    "If you're coming from a language like C for example, there's all kinds of", 
    "rules in C about what happens if you try to add, let's say a floating point", 
    "number and an integer.", 
    "And those rules are built into the language, right?", 
    "There are rules about type conversion, type casting.", 
    "There's really no comparable concept to that in Ruby.", 
    "Why not?", 
    "Because when we're comparing two objects, what we're really doing is", 
    "sending the first object the comparison operator and an argument to", 
    "compare against.", 
    "It's up to the receiver object, in this case x, to decide how to handle", 
    "the call to equals or double equals in this case.", 
    "In particular, if x is a string, it has to decide what to do when somebody", 
    "hands it an integer argument.", 
    "It could choose to try to convert the integer to a string representation.", 
    "It could choose to throw up its hands in despair.", 
    "But the point is, this is nothing that's built into the language.", 
    "It's really just syntactic sugar for a method call.", 
    "And we can override in any way we want.", 
    "And we'll see many, many examples of this throughout the rails framework.", 
    "Similarly when we call a function, what we're doing is sending self,", 
    "which is in any given contact, self is the default object that receives a", 
    "message if you haven't put anything...", 
    "If you haven't put a period next to a variable name, self is", 
    "the implicit receiver.", 
    "And as we'll see, there are certain cases where self has a pretty well", 
    "defined special meaning.", 
    "For example, if you're in an instance method of a class, self is whatever", 
    "object received that call.", 
    "So when you see something like a bare function call, there's always some", 
    "value of self that's the receiver at that point in time and that's who's", 
    "getting the message to call this method.", 
    "And again, what we're sending is the name of the method and any arguments", 
    "that we're passing along.", 
    "So remember, whenever you see a.b, that's what it's talking about, right.", 
    "Everything you do--", 
    "even things that look like operators, they look like comparisons, they look", 
    "like array references--", 
    "everything is a method call.", 
    "And an implication of that is that when you define your own classes, you", 
    "could override those methods to do things that make sense for that class.", 
    "And we're going to see examples of this all over the place.", 
    "So, to sum that up, when you see a.b, a is the receiver, b is a method call.", 
    "You're trying to send the method call b to the receiver a.", 
    "Hopefully, a will respond to that method call.", 
    "And it specifically doesn't mean that b is an instance variable of a, where", 
    "a is an object of some kind.", 
    "Right?", 
    "This is sort of what you would see in a notation like Java.", 
    "It doesn't mean that b is a member of some kind of data structure, which is", 
    "something like what it would mean in C or C++.", 
    "And if you keep this distinction in mind, it will save you", 
    "much grief and confusion.", 
    "When you're looking at some construct in Ruby that you can't parse or you", 
    "haven't seen before, come back to this rule, right.", 
    "Everything is an object.", 
    "And whatever you're seeing, in some way, is going to resolve to being a", 
    "method call on that object.", 
    "So a few more examples just to drive the point home.", 
    "So I have a simpler array of a couple of elements and I try to add another", 
    "array to it, what does this mean?", 
    "Does it mean that you have to look up what plus does in", 
    "the presence of arrays?", 
    "No, it means that there's an array class and hopefully that class", 
    "attaches some behavior to the plus operator so that you", 
    "can add arrays together.", 
    "In this case what it does is just concatenate them.", 
    "You could also destructively modify an array in place.", 
    "This is this double less than or as I call it, the slap on", 
    "to the end of operator.", 
    "This is an important distinction because in Ruby most operations that", 
    "look like they're destructive are really creating a copy of something.", 
    "Right?", 
    "So when I add, for example, y plus this other literal array, there's a", 
    "new object being created that is the concatenation of these two.", 
    "And I'm just choosing to overwrite y with that value.", 
    "But in particular, when we see things like regular expression substitution", 
    "in strings and stuff like that, keep in mind that most of those methods are", 
    "not destructive.", 
    "They don't modify their argument in place.", 
    "One of the few exceptions is the slap on the end of method.", 
    "And again, these are nearly all instance methods of", 
    "a particular class.", 
    "In this case, the array class, which is one of the built in classes.", 
    "They're not operators in the language, right?", 
    "So when you see these three expressions, all of which use the plus", 
    "sign, they're all referring to different methods.", 
    "And a notation that you should get used to seeing is whenever you see the", 
    "name of a class, a pound sign, and the name of the method, that means the", 
    "instance method defined on that class.", 
    "So in this case, because 5 and 3 are instances of the class numeric, which", 
    "is one of the ancestor classes of most numbers, there's an instance method", 
    "plus that allows you to apply that method to instances of that class.", 
    "Whereas in this case, a and b are strings so whatever the plus method is", 
    "as defined in the string class is what's going to be called, with a as", 
    "the receiver.", 
    "By the way, this implies, some of you may have already drawn this", 
    "conclusion, because these syntactic sugar notations--", 
    "when you say a + b, a is the receiver as opposed to b being the receiver.", 
    "Normally you think of methods like plus being commutative.", 
    "Right? a + b should be the same as b + a.", 
    "Happily, all of the methods in Ruby that look like they should be", 
    "commutative are in fact commutative.", 
    "They do what you would expect.", 
    "But if somebody, you know, held your feet to the fire and say, well does", 
    "that mean that you could actually define plus in a way that its behavior", 
    "is not commutative?", 
    "Actually yes.", 
    "You could do that.", 
    "You could define plus on numerics such that 5 + 3 doesn't give the same", 
    "thing as 3 + 5.", 
    "One reaction to that statement is, oh my God, why would anybody design a", 
    "language that allows you to do that?", 
    "Please no.", 
    "Another reaction is you're responsible adults and we expect to use all this", 
    "power responsibly.", 
    "Don't drink and drive and don't redefine methods in ways that violate", 
    "what the programmer expects.", 
    "OK?", 
    "So we're going to see a lot of examples of this.", 
    "And this is my standard reaction.", 
    "Ruby gives you enough rope to hang yourself.", 
    "Right?", 
    "Just like a lot of--", 
    "you know, UNIX has had the same accusation leveled at it.", 
    "C has had the same accusation leveled at it.", 
    "And despite that, they're immensely powerful and hugely popular because if", 
    "you wield the power responsibly, you can do great, wonderful things."
  ]
}