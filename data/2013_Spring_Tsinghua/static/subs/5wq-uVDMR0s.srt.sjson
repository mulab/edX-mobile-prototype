{
  "start": [
    80, 
    1440, 
    3440, 
    5920, 
    8130, 
    11130, 
    12490, 
    17180, 
    21175, 
    23990, 
    26870, 
    28010, 
    31200, 
    33360, 
    37280, 
    39420, 
    42100, 
    44880, 
    48450, 
    49930, 
    53430, 
    57200, 
    59720, 
    62600, 
    66780, 
    69290, 
    73530, 
    74430, 
    78930, 
    82460, 
    85300, 
    86180, 
    89620, 
    93650, 
    94950, 
    97290, 
    100680, 
    105080, 
    105830, 
    108690, 
    111770, 
    114110, 
    116640, 
    119420, 
    122940, 
    125790, 
    129360, 
    130550, 
    134290, 
    137700, 
    141000, 
    142510, 
    144010, 
    146670, 
    149090, 
    152090, 
    152770, 
    156110, 
    156970, 
    160740, 
    163760, 
    166790, 
    169630, 
    174800, 
    180150, 
    183720, 
    187410, 
    189350, 
    193820, 
    197840, 
    199290, 
    204800, 
    209590, 
    212210, 
    217640, 
    221670, 
    223010, 
    224430, 
    225780, 
    227540, 
    231260, 
    233240, 
    236840, 
    238290, 
    241940, 
    246160, 
    251030, 
    252290, 
    254390, 
    257019, 
    260500, 
    263920, 
    265150, 
    268970, 
    270060, 
    274570, 
    277190, 
    281120, 
    283850, 
    286260, 
    289150, 
    290290, 
    293120, 
    297170, 
    298840, 
    300870, 
    303030, 
    307820, 
    309310, 
    313110, 
    317130, 
    319640, 
    321890, 
    324120, 
    325800, 
    327650, 
    332155, 
    333770, 
    339170, 
    341310, 
    345650, 
    348050, 
    350900, 
    353390, 
    356730, 
    358830, 
    361510, 
    363080, 
    365890, 
    369310, 
    374150, 
    376620, 
    379580, 
    381800, 
    385190, 
    386860, 
    397220, 
    401250, 
    402640, 
    405430, 
    409210, 
    413020, 
    413530, 
    417090, 
    420680, 
    423720, 
    425710, 
    428560, 
    432560, 
    434360, 
    436190, 
    438300, 
    441630, 
    444780, 
    447190, 
    451470, 
    453090, 
    457380, 
    459580, 
    462190, 
    463560, 
    465030, 
    467690, 
    470710, 
    472260, 
    476100, 
    477330, 
    479750, 
    482790, 
    486530, 
    488150, 
    492380, 
    494620, 
    497720, 
    498450, 
    501810, 
    503570, 
    508200, 
    512520, 
    513860, 
    516620, 
    518250, 
    521669, 
    522600, 
    525970, 
    531760, 
    533190, 
    536330, 
    539130, 
    543070, 
    547480, 
    550290, 
    552150, 
    554800, 
    558240, 
    560440, 
    562570, 
    563980, 
    564730, 
    566590, 
    570620, 
    573880, 
    574660, 
    577410, 
    580210, 
    583630, 
    584940, 
    588070, 
    591850, 
    593900, 
    596610, 
    599670, 
    602420, 
    605690, 
    608600, 
    610880, 
    615670, 
    618860, 
    621000, 
    622970, 
    624600, 
    627300, 
    630370, 
    634670, 
    635400, 
    638240, 
    641250, 
    643850, 
    646600, 
    649510, 
    651530, 
    653980, 
    655170, 
    658840, 
    660340, 
    662880, 
    665760, 
    666980, 
    670610, 
    672180, 
    673470, 
    677490, 
    681290, 
    684420, 
    687790, 
    688830, 
    693300, 
    695470, 
    698860, 
    699640, 
    702030, 
    703810, 
    705310, 
    708870, 
    712590, 
    715270, 
    716660, 
    718950, 
    722600, 
    726550, 
    727830, 
    730790, 
    732330, 
    735830, 
    737620, 
    741660, 
    746240, 
    747390, 
    749360, 
    751410, 
    754840, 
    757600, 
    759980, 
    761460, 
    765870, 
    769160, 
    771410, 
    774440, 
    776090, 
    778520, 
    779540, 
    783920, 
    787280, 
    789790, 
    793430, 
    794500, 
    798070, 
    799440, 
    802040, 
    805540, 
    808970, 
    812960, 
    815780, 
    822870, 
    824710, 
    827620, 
    829220, 
    832970, 
    836790, 
    839800, 
    842920, 
    845930, 
    848790, 
    849950, 
    854090, 
    857340, 
    859330, 
    861260, 
    862840, 
    865290, 
    866590, 
    870140, 
    873370, 
    876870, 
    879190, 
    884680, 
    886710, 
    887850, 
    890270, 
    893370, 
    897040, 
    901290, 
    906890, 
    910200, 
    913320, 
    916230, 
    918880, 
    922000, 
    925020, 
    926310, 
    927950, 
    931270, 
    936000, 
    937520, 
    940520, 
    946350, 
    947900, 
    953790, 
    956810, 
    959780, 
    961950, 
    963580, 
    969030, 
    971750, 
    974760, 
    976370, 
    978360, 
    982700, 
    986940, 
    990690, 
    994150, 
    995070, 
    998380, 
    1002280, 
    1006220, 
    1006620, 
    1009520, 
    1013140, 
    1017800, 
    1021200, 
    1022370, 
    1025140, 
    1026500, 
    1030550, 
    1033260, 
    1038940, 
    1043579, 
    1047750, 
    1048970, 
    1053260, 
    1057080, 
    1059300, 
    1063280, 
    1064860, 
    1066680, 
    1069940, 
    1072240, 
    1073780, 
    1076910, 
    1078860, 
    1080350, 
    1082240, 
    1083270, 
    1087960, 
    1090030, 
    1092660, 
    1094640, 
    1097170, 
    1099650, 
    1102590, 
    1103740, 
    1107650, 
    1111450, 
    1113820, 
    1118480, 
    1121920, 
    1125120, 
    1128870, 
    1131860, 
    1134250, 
    1136730, 
    1140640, 
    1144500, 
    1147320, 
    1150740, 
    1155100, 
    1156400, 
    1160340, 
    1164500, 
    1167150, 
    1170050, 
    1173690, 
    1175020, 
    1177770, 
    1180220, 
    1182320, 
    1185290, 
    1186760, 
    1189380, 
    1193060, 
    1195540, 
    1198380, 
    1201510, 
    1206490, 
    1208160, 
    1211220, 
    1214790, 
    1218430, 
    1221110, 
    1223670, 
    1227170, 
    1229680, 
    1233730, 
    1235040, 
    1239560, 
    1243130, 
    1246430, 
    1249760, 
    1253710, 
    1256820, 
    1258660, 
    1262440, 
    1265810
  ], 
  "end": [
    1440, 
    3440, 
    5920, 
    8130, 
    11130, 
    12490, 
    17180, 
    21175, 
    23990, 
    26870, 
    28010, 
    31200, 
    33360, 
    37280, 
    39420, 
    42100, 
    44880, 
    48450, 
    49930, 
    53430, 
    57200, 
    59720, 
    62600, 
    66780, 
    69290, 
    73530, 
    74430, 
    78930, 
    82460, 
    85300, 
    86180, 
    89620, 
    91130, 
    94950, 
    97290, 
    100680, 
    105080, 
    105830, 
    108690, 
    111770, 
    114110, 
    116640, 
    119420, 
    122940, 
    125790, 
    129360, 
    130550, 
    134290, 
    137700, 
    141000, 
    142510, 
    144010, 
    146670, 
    149090, 
    152090, 
    152770, 
    156110, 
    156970, 
    160740, 
    163760, 
    166790, 
    169630, 
    174800, 
    180150, 
    183720, 
    187410, 
    189350, 
    193820, 
    197840, 
    199290, 
    204800, 
    209590, 
    212210, 
    217640, 
    221670, 
    223010, 
    224430, 
    225780, 
    227540, 
    231260, 
    233240, 
    236840, 
    238290, 
    241940, 
    246160, 
    251030, 
    252290, 
    254390, 
    257019, 
    260500, 
    263920, 
    265150, 
    268970, 
    270060, 
    274570, 
    277190, 
    281120, 
    283850, 
    286260, 
    289150, 
    290290, 
    293120, 
    297170, 
    298840, 
    300870, 
    303030, 
    307820, 
    309310, 
    313110, 
    317130, 
    319640, 
    321890, 
    324120, 
    325800, 
    327650, 
    332155, 
    333770, 
    339170, 
    341310, 
    345650, 
    348050, 
    350900, 
    353390, 
    356730, 
    358830, 
    361510, 
    363080, 
    365890, 
    369310, 
    374150, 
    376620, 
    379580, 
    381800, 
    385190, 
    386860, 
    397220, 
    401250, 
    402640, 
    405430, 
    409210, 
    413020, 
    413530, 
    417090, 
    420680, 
    423720, 
    425710, 
    428560, 
    432560, 
    434360, 
    436190, 
    438300, 
    441630, 
    444780, 
    447190, 
    451470, 
    453090, 
    457380, 
    459580, 
    462190, 
    463560, 
    465030, 
    467690, 
    470710, 
    472260, 
    476100, 
    477330, 
    479750, 
    482790, 
    486530, 
    488150, 
    492380, 
    494620, 
    497720, 
    498450, 
    501810, 
    503570, 
    508200, 
    512520, 
    513860, 
    516620, 
    518250, 
    521669, 
    522600, 
    525970, 
    531760, 
    533190, 
    536330, 
    539130, 
    543070, 
    547480, 
    550290, 
    552150, 
    554800, 
    558240, 
    560440, 
    562570, 
    563980, 
    564730, 
    566590, 
    570620, 
    573880, 
    574660, 
    577410, 
    580210, 
    583630, 
    584940, 
    588070, 
    591850, 
    593900, 
    596610, 
    599670, 
    602420, 
    605690, 
    608600, 
    610880, 
    615670, 
    618860, 
    621000, 
    622970, 
    624600, 
    627300, 
    630370, 
    634670, 
    635400, 
    638240, 
    641250, 
    643850, 
    646600, 
    649510, 
    651530, 
    653980, 
    655170, 
    658840, 
    660340, 
    662880, 
    665760, 
    666980, 
    670610, 
    672180, 
    673470, 
    677490, 
    681290, 
    684420, 
    687790, 
    688830, 
    693300, 
    695470, 
    698860, 
    699640, 
    702030, 
    703810, 
    705310, 
    708870, 
    712590, 
    715270, 
    716660, 
    718950, 
    722600, 
    726550, 
    727830, 
    730790, 
    732330, 
    735830, 
    737620, 
    741660, 
    746240, 
    747390, 
    749360, 
    751410, 
    754840, 
    757600, 
    759980, 
    761460, 
    765870, 
    769160, 
    771410, 
    774440, 
    776090, 
    778520, 
    779540, 
    783920, 
    787280, 
    789790, 
    793430, 
    794500, 
    798070, 
    799440, 
    802040, 
    805540, 
    808970, 
    812960, 
    815780, 
    822870, 
    824710, 
    827620, 
    829220, 
    832970, 
    836790, 
    839800, 
    842920, 
    845930, 
    848790, 
    849950, 
    854090, 
    857340, 
    859330, 
    861260, 
    862840, 
    865290, 
    866590, 
    870140, 
    873370, 
    876870, 
    879190, 
    884680, 
    886710, 
    887850, 
    890270, 
    893370, 
    897040, 
    901290, 
    906890, 
    910200, 
    913320, 
    916230, 
    918880, 
    922000, 
    925020, 
    926310, 
    927950, 
    931270, 
    936000, 
    937520, 
    940520, 
    946350, 
    947900, 
    953790, 
    956810, 
    959780, 
    961950, 
    963580, 
    969030, 
    971750, 
    974760, 
    976370, 
    978360, 
    982700, 
    986940, 
    990690, 
    994150, 
    995070, 
    998380, 
    1002280, 
    1006220, 
    1006620, 
    1009520, 
    1013140, 
    1017800, 
    1021200, 
    1022370, 
    1025140, 
    1026500, 
    1030550, 
    1033260, 
    1038940, 
    1043579, 
    1047750, 
    1048970, 
    1053260, 
    1057080, 
    1059300, 
    1063280, 
    1064860, 
    1066680, 
    1069940, 
    1072240, 
    1073780, 
    1076910, 
    1078860, 
    1080350, 
    1082240, 
    1083270, 
    1087960, 
    1090030, 
    1092660, 
    1094640, 
    1097170, 
    1099650, 
    1102590, 
    1103740, 
    1107650, 
    1111450, 
    1113820, 
    1118480, 
    1121920, 
    1125120, 
    1128870, 
    1131860, 
    1134250, 
    1136730, 
    1140640, 
    1144500, 
    1147320, 
    1150740, 
    1155100, 
    1156400, 
    1160340, 
    1164500, 
    1167150, 
    1170050, 
    1173690, 
    1175020, 
    1177770, 
    1180220, 
    1182320, 
    1185290, 
    1186760, 
    1189380, 
    1193060, 
    1195540, 
    1198380, 
    1201510, 
    1206490, 
    1208160, 
    1211220, 
    1214790, 
    1218430, 
    1221110, 
    1223670, 
    1227170, 
    1229680, 
    1233730, 
    1235040, 
    1239560, 
    1240810, 
    1246430, 
    1249760, 
    1253710, 
    1256820, 
    1258660, 
    1262440, 
    1265810, 
    1267290
  ], 
  "text": [
    "ARMANDO FOX:", 
    "Which should not be set up as a fixture?", 
    "So, movies and their ratings--", 
    "these are exactly the kind of things that unit tests are going to", 
    "manipulate very differently and need different instances of, depending on", 
    "what is being tested.", 
    "So good practice would be to not fixture those things, because it's", 
    "very easy to get to the point where, as I said before, you have a fixture", 
    "that you put in in order to have one test that uses it.", 
    "And you slowly start writing other tests that end up having an implicit", 
    "dependency on that fixture.", 
    "And now you change the fixture, and some other test a million miles away,", 
    "all of a sudden doesn't work anymore.", 
    "So I would say, movies and ratings, in the case of this app, of our", 
    "RottenPotatoes app, should not be fixtured.", 
    "What about the API key for TMDb?", 
    "Well, this one's kind of a judgment call.", 
    "But in general, you can't make any calls to TMDb without", 
    "some sort of API key.", 
    "So you could argue on the one hand that fixturing this might be OK,", 
    "because for the vast majority of tests that involve using TMDb at all, the", 
    "API key isn't going to change across those tests.", 
    "The counter-argument would be, well, you also are going to need a few tests", 
    "that make sure that with an invalid API key, the correct reaction happens,", 
    "that the application handles the error.", 
    "So if you were going to pick only one thing not to fixture, I would say it's", 
    "movies and their ratings.", 
    "But with the TMDb API key, you could make a case either way.", 
    "On balance, most of the tests probably would use the same value for this.", 
    "So it's probably OK on balance to fixture it, because what would be the", 
    "alternative?", 
    "The alternative would be, any time you have any test that touches TMDb, you", 
    "set up an API key just for it.", 
    "So this is this grey area.", 
    "It's kind of configuration information, but you also want to", 
    "occasionally test what happens when you give a bad value for it.", 
    "Application time zone settings, to me this is a canonical thing that's fine", 
    "to fixture.", 
    "Now again, one could say well, don't you want to have a test for what", 
    "happens if you suddenly change the times zone that the application is in?", 
    "Sure, but those tests are likely to be the exception.", 
    "That's not where most of your testing effort's going to go.", 
    "So something like this is really--", 
    "to the extent that most methods in the application rely on this information,", 
    "it's fine to have a default constant value.", 
    "So as you can see with a lot of the stuff, there's a fair amount of room", 
    "for engineering judgment.", 
    "But the general trend is, if the majority of tests really will rely on", 
    "just one value, and you need to have a value there but it's not going to", 
    "change across your tests, it's probably OK to do it as a fixture.", 
    "Because then it's just in one place.", 
    "It's just in your fixture file.", 
    "You change it there, you've changed it for all the tests.", 
    "To the extent that it's information that different tests are going to want", 
    "to use quite differently, it makes more sense to say, no, we're not going", 
    "to fixture that.", 
    "We'll either use factories or we'll just manually create the mock objects", 
    "that we need.", 
    "Because then we avoid the risk that by creating a fixture, it ends up", 
    "affecting more tests than just the ones that we had in mind.", 
    "So, room for engineering judgment in all of these.", 
    "OK, so let's talk about stubbing the internet.", 
    "One of the themes that we developed in the sections of the book the talk", 
    "about calling out to TMDb and the TMDb API is, when you're thinking in terms", 
    "of a service-oriented architecture, the idea of having an API key which", 
    "is-- you're unlocking the door to be able to call that remote service--", 
    "that's a pretty common use case.", 
    "And one of the things that we develop in the book example is, you'd like to", 
    "make sure that your application does the right thing if the key is invalid", 
    "for some reason.", 
    "So this leads to cut the concept of explicit versus implicit requirements.", 
    "When we were developing our test first development plan for the find_in_tmdb", 
    "method, the method that actually is going to make the call to the remote", 
    "service, we said that the requirement is, because this is going to call", 
    "TMDb, we're going to use the TMDbRuby gem to sort of handle some of the", 
    "interactions for us.", 
    "And we'll call that gem.", 
    "We'll give it the title keywords.", 
    "That's the explicit requirement.", 
    "The gem is going to take care of calling out to that back end, and of", 
    "course, we could also do this without the gem.", 
    "We could manually write our own HTTP requests and submit the", 
    "right RESTful URI.", 
    "But at the end of the day, the explicit requirement is, find_in_tmdb", 
    "is going to take care of somehow calling TMDb and get information.", 
    "But there is another requirement which comes from how you call a", 
    "service like TMDb.", 
    "You need to have a valid API key.", 
    "So now there's another requirement that, even though it wasn't in the", 
    "list, it's something that we have to deal with, which is, the act of", 
    "calling TMDb presents the requirement that we have a valid API key.", 
    "What could go wrong?", 
    "Well, it turns out that there's at least two different ways that the TMDb", 
    "call can fail.", 
    "One of them is if you hand it a key that is blank, no key at all.", 
    "The other one is if you hand it a key that is not blank, but it's invalid.", 
    "TMDb doesn't recognize it as being a key was issued by it.", 
    "Now how did we derive these implicit requirements?", 
    "We did it through the extremely sophisticated act of reading the", 
    "documentation, something people often don't think of doing", 
    "until it's too late.", 
    "They Google, they go on Stack Overflow, but if they'd just read the", 
    "readme, you can see there's at least two ways that calling TMDb", 
    "would not work out.", 
    "So what do we do in this case?", 
    "We obviously need to check for these cases.", 
    "And we can use two additional keywords that we haven't seen yet in RSpec--", 
    "or, I should say, we've seen described.", 
    "We haven't seen context to divide up the test according to these cases.", 
    "Because now, the explicit requirement has led us to two different ways that", 
    "the implicit requirements might be invalidated.", 
    "Let's take a look at a couple of examples.", 
    "Let's make the text larger.", 
    "So what I've done here--", 
    "I actually broke out--", 
    "the group of tests that is about searching TMDb, I've now broken it", 
    "into two contexts.", 
    "The \"with valid key\" context basically contains a group of test examples of", 
    "what happens if I have a valid key.", 
    "And then I have a \"with invalid key\" context that has the two different", 
    "implicit requirements that we already saw.", 
    "One of them is, if the key is not given, what do we do.", 
    "And the other one is, if the key is bad, what do we do.", 
    "In other words, the key is not blank, but doesn't correspond", 
    "to an invalid key.", 
    "In this case, you'll notice that I've done two different", 
    "kinds of stubs here.", 
    "How do I handle the case where the key is not given?", 
    "Well again, if you look at the library documentation and you play around with", 
    "it TMDb gem, what you'll realize is that the library itself can tell if", 
    "you passed it a blank string for the key.", 
    "So the question we're answering here-- remember, we're trying to isolate the", 
    "test from all of its dependencies.", 
    "We want to control the behavior of the dependencies so that the test can just", 
    "focus on that one behavior.", 
    "Well if it's really true that the Ruby gem for TMDb is going to detect the", 
    "fact that we try to pass a blank key, then our test is", 
    "actually pretty simple.", 
    "We'll just go ahead and call find_in_tmdb.", 
    "And because find_in_tmdb is going to call the gem, the gem is going to see", 
    "that we have an empty key, the empty string, it's going to throw an error", 
    "immediately.", 
    "And we can check for that fact.", 
    "By the way, again, what's going on with these braces here?", 
    "Remember that braces are shorthand for do an end.", 
    "It's a way of enclosing a block.", 
    "What would happen if we took the braces out of this example?", 
    "If we did instead of saying lambda braces, we just tried to call", 
    "movie.find_in _tmdb?", 
    "Why would that be badness?", 
    "Remember, here what we're expressing is a procedure.", 
    "What if instead of expressing the procedure, we took away the lambda?", 
    "It becomes a procedure call.", 
    "So what are we betting on in this test?", 
    "We're betting on the fact that if we call find_in_tmdb with a blank key,", 
    "it's going to raise an exception.", 
    "Well, if you run a test, and the test actually throws an exception, that's", 
    "immediate failure.", 
    "But in our case, what we want to do is make sure that an", 
    "exception actually is raised.", 
    "For us, that's correct behavior.", 
    "That's what we want to have when the test is passing.", 
    "So what we do is, we wrap the thing we want to check for an", 
    "exception in a lambda.", 
    "And now, we can ask whether evaluating the lambda expression results in", 
    "raising the exception.", 
    "This is an idiom that you're going to see a lot.", 
    "The fact that we can wrap something in a procedure means that the procedure", 
    "isn't actually executed at the time that we define the test.", 
    "It's executed when the test is run.", 
    "And then we can ask whether attempting to execute it raised the exception.", 
    "So that's just about the test logic.", 
    "The real thing we want to focus on here is, where did we stub?", 
    "Well, let's see.", 
    "We stubbed the movie class so that we could make sure that we", 
    "return a blank API key.", 
    "That's the context of our test is if the API key is blank.", 
    "But here, we just go ahead and call movie.find_in_tmdb.", 
    "Why is this OK?", 
    "It's because we know from the documentation that the Ruby gem is", 
    "going to barf.", 
    "The Ruby gem immediately detects that we haven't passed a key that has any", 
    "characters in it.", 
    "And thereby, we can check if it raised an exception.", 
    "In contrast, suppose we're testing the case where we're calling find_in_tmdb", 
    "with an invalid key.", 
    "It's not blank, but it's not a valid-- it's some random string", 
    "that we made up.", 
    "In this case, why are we stubbing TmbdMovie?", 
    "Why are we stubbing here before we make the call to find_in_tmdb?", 
    "What are we trying to prevent happening when we call", 
    "find_in_tmdb in this case?", 
    "Or to think of it another way, in real life--", 
    "not in our test, but in actual code-- what would happen if we tried to call", 
    "the Ruby gem and we passed it an invalid key?", 
    "Would throw an exception immediately?", 
    "Anybody?", 
    "Here's a hint.", 
    "No.", 
    "Why could the Ruby gem in the case like this not", 
    "immediately throw an exception?", 
    "Here's a hint.", 
    "How does it know the key is invalid?", 
    "This is supposed to be an API key for a remote service.", 
    "So our local gem actually has no knowledge of whether this", 
    "key is valid or not.", 
    "It certainly knows that the key has to have some characters in it.", 
    "So the author of the library coded it so that if you pass it an empty", 
    "string, yes, that is clearly an error.", 
    "There's no way the empty string could ever be a valid key.", 
    "But if you pass it a string of characters, there's no way for it to", 
    "know, a priori, if that's a valid key or not.", 
    "It would have to call the actual TMDb service remotely.", 
    "And then the TMDb service would reply, sorry, that doesn't work.", 
    "That key is invalid.", 
    "Now, given that piece of information, why do you think we're stubbing the", 
    "TmbdMovie gem as part of our test?", 
    "Suppose we didn't do this stub?", 
    "What would happen when our test runs?", 
    "I know you know this.", 
    "What would happened when the test runs, given that the library doesn't", 
    "know if this key is valid or not, what's it going to do?", 
    "It will actually call TMDb, the real TMDb, remotely.", 
    "So imagine this.", 
    "You have autotest running in the background, and every time you save a", 
    "file, it makes a call to the remote TMDb service.", 
    "This is clearly bad for all kinds of reasons.", 
    "Does everybody understand what the difference is here, what's going on?", 
    "In the case where I know the key must be invalid because it's", 
    "blank, there's no danger.", 
    "Because it's never going to get to the point where it tries to call the", 
    "remote service.", 
    "But in the case where the key might plausibly be valid, the only way to", 
    "tell is for it to call the remote service.", 
    "And in our test suite, we want to avoid that.", 
    "Tests are supposed to run fast, they're supposed to be isolated from", 
    "external dependencies.", 
    "And here, we're on the verge of having a test that will actually call TMDb", 
    "every time the test runs.", 
    "That would be badness.", 
    "So in this case, we actually have to head things off at the pass.", 
    "We have to stub methods inside the library to make sure the library never", 
    "has the chance to call the TMDb service at all.", 
    "In other words, we're going to assume, for the purpose of testing, that the", 
    "key is invalid.", 
    "We're going to stub the library to behave as if it had called TMDb and", 
    "gotten the reply saying the key is invalid.", 
    "And then, our test can actually check whether the application reacts", 
    "appropriately.", 
    "Do people get-- do you get to the distinction between what's going on in", 
    "these two cases?", 
    "This is an important concept.", 
    "I'm using this is an example of the bigger concept of, in this world where", 
    "we can mock and stub pretty much anywhere we want at any time, where is", 
    "the most appropriate place to do a mock or a stub depending on your", 
    "testing scenario?", 
    "We've got two different scenarios here.", 
    "In one, we don't need to stub the gem, because we know from reading the", 
    "documentation that the gem is not going to attempt to call to TMDb with", 
    "a blank string.", 
    "But in the second case, it probably will attempt to call.", 
    "And we need to stop it from doing that.", 
    "We can't have our test rely on actually calling out to a separate", 
    "internet service every time we run the regression.", 
    "We have to head things off there and say no, we're going to simulate the", 
    "behavior of, if the TMDb service had really been called, it would have", 
    "replied invalid key.", 
    "We're going to stub it at that point.", 
    "Understand the distinction between those?", 
    "So, that was a long winded way of saying the following couple of things.", 
    "First of all, we started with an explicit requirement, which is really", 
    "just about, we're going to call this external service.", 
    "That's what our method has to do.", 
    "But, in implementing it, we also uncovered implicit requirements.", 
    "The fact that the explicit requirement depends on an external service means", 
    "that there's other things we also had to get right.", 
    "And in this case, we took the advanced step of reading the documentation in", 
    "the specs for the service.", 
    "And you can figure out that there's at least two different ways", 
    "that it could fail.", 
    "Because the two different ways that it can fail, fail at different points, we", 
    "also had to use two different approaches to stubbing out the parts", 
    "of the infrastructure that our test depends on.", 
    "So in the first case, we knew that TMDb gem is immediately", 
    "going to throw an error.", 
    "Therefore we didn't have to take any special actions in terms of stubbing", 
    "the methods in the gem.", 
    "All we had to do is call the method and make sure that the right kind of", 
    "exception gets thrown, and that we can catch it.", 
    "But in the second case, we need to prevent the gem from doing something", 
    "that would normally do in a real non-testing scenario, is that it would", 
    "try to contact TMDb and pass it our key.", 
    "And by the way, I used this example of what happens when TMDb isn't working", 
    "because you gave it a bad key.", 
    "But you can immediately see that the same argument applies when you're", 
    "testing the happy path.", 
    "The happy path is the one where I have a key that I know to be valid.", 
    "Obviously in testing, I still want to avoid really calling TMDb.", 
    "I can't be calling the service every time my regression test runs.", 
    "That would be thousands of times, and things would be really, really slow.", 
    "So we had to use two different stubbing approaches to reflect the", 
    "fact that what we're trying to isolate the test from is at", 
    "two different levels.", 
    "And there's a nice picture coming up that actually generalizes this.", 
    "We also saw that context and describe can be used to group", 
    "similar tests together.", 
    "By the way, context and describe are synonyms.", 
    "They're the same method.", 
    "So why is there two different ways of calling it?", 
    "It's for readability.", 
    "Describe says, here's the thing that I'm going to be testing.", 
    "And context says, but the thing I'm going to be testing--", 
    "there's sort of equivalence clashes of different ways that it could behave.", 
    "But they're actually aliases for the same thing.", 
    "Just as when you learn about Cucumber, there's given, when, then, and, but.", 
    "And it turns out those are all the same method.", 
    "They're just aliases.", 
    "They're aliases because that lets you make the code more readable.", 
    "So, same thing with context and describe.", 
    "And something that's covered somewhat in the book, and in a lot more depth", 
    "in the RSpec book or in the RSpec online documentation is, there's ways", 
    "that you can use before blocks to set up a set of preconditions that are", 
    "common across a whole group of tests so you have to put them in each", 
    "separate spec.", 
    "So let's try to generalize this a little bit.", 
    "Since we're in this world of service-oriented architecture and we", 
    "know we're going to be writing tests where we want to isolate pieces of", 
    "code from external dependencies, there's many levels at", 
    "which we could do that.", 
    "We have our movie class.", 
    "This is the code that we write that's part of our app in RottenPotatoes.", 
    "But we saw in this example that for certain things, like talking to TMDb,", 
    "we're depending on a gem--", 
    "the ruby-tmbd gem, or library.", 
    "That gem, in turn, depends on library functions in Ruby itself to make the", 
    "HTTP calls.", 
    "And the HTTP network functionality in Ruby depends on your computer's", 
    "implementation of TCP/IP networking.", 
    "And then finally, through the internet, here's the real service, way", 
    "down here, is the actual TMDb website.", 
    "So where do we stub?", 
    "Well, one possibility is we could stub at the level of the movie class.", 
    "Depending on what we're trying to test, we could just say we're going to", 
    "stub the find_in_tmdb method and we're going to short circuit", 
    "everything down here.", 
    "When would it be appropriate to do that?", 
    "The simple answer is, if the focus of the test is not this stuff down here,", 
    "but it's something about what happens as a result of this behavior.", 
    "For example, we might want to say, if find_in_tmdb returns a particular", 
    "movie, does that movie get correctly passed to the view, or", 
    "something like that.", 
    "Well, in that case, it doesn't matter how all this stuff worked.", 
    "All we care about is that find_in_tmdb returns a particular thing.", 
    "So in that case, it's perfectly defensible to stub all the way up at", 
    "this level.", 
    "Because the stuff down here is not what the test is about.", 
    "On the other hand, we just saw an example of, what happens when you call", 
    "the TMDb movie gem and you pass it an empty or an invalid API key.", 
    "Well now, all of a sudden, something about the test actually does involve", 
    "the behavior of the gem.", 
    "So it's more appropriate to stub something in the gem itself and", 
    "simulate that behavior.", 
    "You can imagine even lower, and saying, well--", 
    "suppose we were testing the ruby-tmdb gem itself.", 
    "We're the authors of this gem, and what we want to test is when somebody", 
    "calls us and says, make the following RESTful request to TMDb, does that get", 
    "converted into the right HTTP request with the properly constructed URI and", 
    "so forth and so on?", 
    "Well, in that case, what we need to do is stub Ruby's own library, so that", 
    "when we call it, we can make sure that the thing that it receives is properly", 
    "constructed, the thing that we thought we were passing.", 
    "So in that case, we'd be stubbing at this level, so that we can test code", 
    "that we would be offering at this level.", 
    "And then what about the last case?", 
    "What if what we really want to test is, I want to go all the way through", 
    "and make sure that it's really trying to make a request", 
    "to the outside world?", 
    "I want to make sure that at the end of the day, it's going to actually call", 
    "TMDb, the real TMDb.", 
    "But I don't want it to actually call it.", 
    "I just want to make sure that it would call it.", 
    "You can do that.", 
    "There's a gem called fakeweb that basically says, intercept network", 
    "request at the last possible moment.", 
    "And if somebody makes a request to the following URI--", 
    "and you can do wildcards and stuff like that--", 
    "then return the following HTTP response.", 
    "So basically, that's how you would test--", 
    "I want the maximum level of realism that doesn't actually involve", 
    "contacting TMDb.", 
    "I'm going to build a stub that behaves exactly the same way that the real", 
    "TMDb would behave with respect to certain input and output URIs.", 
    "That's what fakeweb lets you do.", 
    "And when we talk about authentication and third party single sign on next", 
    "week, we'll see another use case for this.", 
    "So the moral of the story here is, where do you stub?", 
    "Well, for unit testing, you want to stub as near as you can, because", 
    "you're trying to isolate the class from its other behaviors.", 
    "So as close to the top of this diagram as you can.", 
    "And that also helps keep things fast and independent.", 
    "Because if I'm stubbing way up here, then I'm skipping all of this work.", 
    "My unit test is going to pretend that all of this stuff happened, and it", 
    "went hunky dory, and I'm going to return something.", 
    "But as you get more and more into integration testing, where you're", 
    "asking what happens as a complete flow through the entire app, then the line", 
    "starts moving down.", 
    "The farther down you are in terms of this picture, the more realistic your", 
    "test is, the more different layers of the stack are being exercised.", 
    "And this is exactly analogous to unit testing versus", 
    "integration testing in Cucumber.", 
    "So in our case, if you want to ensure that the model is working right, then", 
    "you're stubbing up here.", 
    "If you want to ensure that the model can deal with external errors, then", 
    "you're probably stubbing somewhere in here.", 
    "And if you really want to make sure that the path all the way to the", 
    "outside world is working, then you use something like fakeweb, and then", 
    "you're stubbing down here.", 
    "So you've got a lot of choices.", 
    "Be as near as you can without stubbing out the thing you're trying to test.", 
    "That's kind of the rule of thumb.", 
    "So we can now add a couple of additional test", 
    "techniques that we know.", 
    "The example for TMDb that's developed in the book shows you a few additional", 
    "things you can do inside your with.", 
    "For example, if I want to test that the argument list to a function I'm", 
    "calling, that one of the arguments is a hash that includes a particular key", 
    "value pair, but I don't care what the other ones are, we saw that you can", 
    "assert that a particular kind of exception is raised.", 
    "But you've got to make sure that you wrap that in a lambda, because", 
    "otherwise, the exception will really be raised as part of running the test,", 
    "and that you don't want.", 
    "We saw that both describe and context can be used as synonyms to group", 
    "similar things together.", 
    "So our repertoire of testing techniques that we know is gradually", 
    "getting larger.", 
    "Having talked a little about implicit and explicit requirements, we can ask,", 
    "which statements are true about implicit requirements?", 
    "That they're often but not always derived from the explicit ones?", 
    "That they apply only to unit and functional tests but they don't apply", 
    "to integration tests?", 
    "That testing implicit requirements is lower priority than explicit ones,", 
    "because implicit ones don't come directly from the customer's needs?", 
    "Or all of the above?"
  ]
}