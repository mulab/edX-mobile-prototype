{
  "start": [
    1690, 
    3750, 
    5920, 
    10070, 
    11160, 
    11620, 
    15050, 
    18740, 
    21510, 
    26760, 
    28220, 
    30760, 
    32940, 
    39870, 
    40120, 
    41990, 
    43610, 
    47490, 
    55180, 
    57100, 
    61780, 
    64690, 
    65860, 
    68170, 
    71420, 
    72590, 
    76770, 
    80160, 
    82800, 
    86930, 
    91760, 
    92740, 
    96030, 
    99370, 
    101000, 
    103520, 
    104190, 
    105980, 
    106840, 
    110870, 
    113920, 
    116830, 
    121740, 
    126460, 
    130288, 
    136900, 
    139750, 
    143770, 
    146620, 
    150130, 
    151170, 
    152690, 
    156100, 
    156910, 
    160693, 
    162030, 
    168020, 
    169010, 
    171490, 
    176670, 
    177890, 
    180810, 
    183680, 
    187160, 
    191250, 
    195910, 
    199900, 
    203370, 
    204880, 
    208230, 
    210310, 
    215670, 
    216430, 
    218790, 
    221140, 
    225990, 
    231860, 
    234980, 
    239050, 
    240530, 
    246250, 
    250520, 
    253160, 
    257820, 
    261070, 
    263350, 
    267610, 
    273790, 
    277820, 
    284370, 
    286050, 
    289890, 
    293650, 
    294580, 
    297590, 
    301300, 
    303860, 
    305540, 
    309890, 
    311220, 
    317220, 
    321060, 
    324890, 
    331330, 
    334230, 
    338100, 
    341760, 
    346490, 
    347690, 
    350110, 
    351410, 
    356440, 
    360460, 
    363900, 
    368310, 
    373050, 
    373570, 
    376170, 
    379330, 
    381770, 
    383360, 
    386780, 
    390430, 
    391310, 
    394050, 
    396460, 
    398330, 
    401050, 
    406850, 
    410720, 
    413630
  ], 
  "end": [
    3750, 
    5920, 
    10070, 
    11160, 
    11620, 
    15050, 
    18740, 
    21510, 
    26760, 
    28220, 
    30760, 
    32940, 
    39870, 
    40120, 
    41990, 
    43610, 
    47490, 
    55180, 
    57100, 
    61780, 
    64690, 
    65860, 
    68170, 
    71420, 
    72590, 
    76770, 
    80160, 
    82800, 
    86930, 
    91760, 
    92740, 
    96030, 
    99370, 
    101000, 
    103520, 
    104190, 
    105980, 
    106840, 
    110870, 
    113920, 
    116830, 
    121740, 
    126460, 
    130289, 
    136900, 
    139750, 
    143770, 
    146620, 
    150130, 
    151170, 
    152690, 
    156100, 
    156910, 
    160693, 
    162030, 
    168020, 
    169010, 
    171490, 
    176670, 
    177890, 
    180810, 
    183680, 
    187160, 
    191250, 
    195910, 
    199900, 
    203370, 
    204880, 
    208230, 
    210310, 
    215670, 
    216430, 
    218790, 
    221140, 
    223165, 
    231860, 
    234980, 
    239050, 
    240530, 
    243410, 
    250520, 
    253160, 
    257820, 
    261070, 
    263350, 
    267610, 
    273790, 
    277820, 
    284370, 
    286050, 
    289890, 
    293650, 
    294580, 
    297590, 
    301300, 
    303860, 
    305540, 
    309890, 
    311220, 
    317220, 
    321060, 
    324890, 
    331330, 
    332580, 
    338100, 
    341760, 
    346490, 
    347690, 
    350110, 
    351410, 
    356440, 
    360460, 
    363900, 
    368310, 
    373050, 
    373570, 
    376170, 
    379330, 
    381770, 
    383360, 
    386780, 
    390430, 
    391310, 
    394050, 
    396460, 
    398330, 
    401050, 
    406850, 
    410720, 
    413630, 
    417260
  ], 
  "text": [
    "DAVID PATTERSON: Maybe it's poorly written.", 
    "So what's the statement?", 
    "Do you have to implement all the code being tested before Cucumber will say", 
    "all tests are passed?", 
    "No.", 
    "That's kind of just an example we did, right?", 
    "You can leave code out, and it'll pass some of the tests.", 
    "You can't pass all the tests, it'll pass some of the tests.", 
    "And a sad path can pass without having code written to make a happy pass.", 
    "Yes, that's just what we did, right?", 
    "The sad path worked, but the happy path didn't.", 
    "So those were kind of maybe awkward ways of saying it.", 
    "So the right answer was the third choice, A and B. Question?", 
    "Yeah.", 
    "What's the deep technical definition?", 
    "Not the sad path and happy path.", 
    "Basically, the reason you do the happy path, it's the easy case, right?", 
    "You're trying to do this example, the search tmdb, which it's there, right?", 
    "You put in a movie, and there.", 
    "Or like when I did the example last time, and we had three movies in the", 
    "database, and you put in the number two, right?", 
    "And it works.", 
    "The sad path is the corner cases.", 
    "You say, well, what happens when, last time, when I put in 9999?", 
    "What happens then?", 
    "So the sad paths tend to be kind of corner cases.", 
    "So typically what you'll do to get started, if you're writing the test", 
    "before you write the code, you write the straightforward one first.", 
    "So maybe straightforward would be a better definition.", 
    "Our module likes cute terms, happy path and said path are popular in the", 
    "programming community.", 
    "Let's do some more of the--", 
    "how do we do these stories, or scenarios?", 
    "This is supposed to be declaring.", 
    "That's the declaring a winner here.", 
    "OK.", 
    "So explicit versus implicit.", 
    "What does that mean?", 
    "Explicit are requirements that you're there with the customer.", 
    "The customer and you talk about some of these cards.", 
    "It's an acceptance test that you really wanted to do it.", 
    "But often there's something that you don't have to write in a card, but you", 
    "as the developers understand are a consequence of the explicit", 
    "requirements, the so-called implicit scenarios.", 
    "So like an example, like the user story might be for the RottenPotatoes,", 
    "I want a list of movies.", 
    "Well then the question is, what's the right order you want them listed?", 
    "Should they be in chronological order or alphabetical order?", 
    "Well, you may not want to take the time with the customer for right now", 
    "to ask that question.", 
    "They may not care that much.", 
    "But it has to be in some order, and you'll have to decide", 
    "it's an implicit one.", 
    "So maybe the customer will make the user story the explicit one about, I", 
    "want to see the movies in a list.", 
    "And then you'll decide what's the implicitly, that should mean to be", 
    "implicitly.", 
    "It should be in, say, alphabetical order.", 
    "What that tends to mean is, these are often tend to be", 
    "more integration testing.", 
    "So acceptance test for explicit and implicit tends to", 
    "be integration testing.", 
    "Now, imperative versus declarative.", 
    "In general, in kind of programming, computer science programming", 
    "languages, the theory is people think of declarative as easier to write,", 
    "shorter and less work.", 
    "Maybe not as efficient, but a lot shorter, a lot more concise.", 
    "And that's the same kind of idea here.", 
    "Imperative, you're actually specifying a logical sequence until", 
    "you get that result.", 
    "Given this, And this And this And this, When that happens, Then this And", 
    "this And this, right?", 
    "There's this scenario we just went over.", 
    "It usually has these complicated When and And steps.", 
    "What you've seen so far is all imperative.", 
    "The idea for declarative is, once you get a bunch of stuff defined, you can", 
    "kind of think of that as its own domain language that you're writing", 
    "in, and then so you're trying to write scenarios declaratively that'll use", 
    "those steps that have already been created.", 
    "So let me try and give you an example of that.", 
    "And what the belief is as you get more experience, when you start doing your", 
    "apps, you will start writing maybe imperatively.", 
    "Then when you get a bunch of steps defined, the ones after that as you", 
    "get more experienced, you'll start writing them declaratively, and also,", 
    "you'll have this base to write from.", 
    "So this is a lot of steps, right?", 
    "And what it's trying to do is just trying to say if I add a movie with", 
    "\"Zorro,\" and I give it the rating, and I save it, and another movie that says", 
    "\"Apocalypse Now\" and I save it, then I should see \"Apocalypse Now\" with", 
    "\"Zorro\" because we want it to be in alphabetical order.", 
    "So this is this really long, imperative scenario.", 
    "And even though it's called behavior driven design, that behavior part is", 
    "just that, right?", 
    "It's whatever that is, fifteen steps.", 
    "There's only one step there that's talking of behavior.", 
    "And the rest is really kind of talking about implementation.", 
    "But BDD is supposed to be about design.", 
    "So how could we write this more declaratively?", 
    "Here's a way to do.", 
    "Given that I have added \"Zorro\" and I have added \"Apocalypse Now,\" and I'm", 
    "on the row page that says sorted by title, it should be that way.", 
    "So here this is four steps versus fifteen.", 
    "And this idea of conciseness is, at least a clarity is one of the big", 
    "beliefs here.", 
    "So what do the step definitions look like here?", 
    "The declarative, that scenario needs some new step definitions.", 
    "And given I have added, you see it said before I've added this thing, and", 
    "now it says with a rating.", 
    "That's what we kind of [INAUDIBLE]", 
    "that together.", 
    "And here's when I'm given on this page, then I write this out.", 
    "And then that's this Given, and then I should see this.", 
    "So we need some new step definitions to do the declarative scenarios.", 
    "But that's the idea behind the imperative and declarative.", 
    "So with that, let's try another.", 
    "OK.", 
    "I think I just said those things.", 
    "Declarative scenarios focus attention on the feature being described and", 
    "tested and steps needed to set up that test.", 
    "OK.", 
    "So this one, maybe, well, I don't know how to predict this one.", 
    "So which is true about implicit versus explicit and declarative versus", 
    "imperative?", 
    "As you get more experience with user stories, you will write many more", 
    "declarative scenarios.", 
    "Familiar ring to that.", 
    "Explicit scenarios usually capture integration tests.", 
    "Declarative scenarios usually capture implementation as well as behavior.", 
    "Explicit requirements are usually defined with imperative scenarios, and", 
    "implicit requirements are usually defined with declarative scenarios.", 
    "So which of those is true, is what we're after."
  ]
}