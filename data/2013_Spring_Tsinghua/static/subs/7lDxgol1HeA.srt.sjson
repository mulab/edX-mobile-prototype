{
  "start": [
    1410, 
    2450, 
    5660, 
    8770, 
    12950, 
    15400, 
    16790, 
    20060, 
    21020, 
    23420, 
    27140, 
    30880, 
    35010, 
    38520, 
    40890, 
    43370, 
    43990, 
    45230, 
    48870, 
    50190, 
    54630, 
    56060, 
    61280, 
    62690, 
    62870, 
    64720, 
    66470, 
    69670, 
    73750, 
    75560, 
    79240, 
    79870, 
    82540, 
    84580, 
    85740, 
    89010, 
    92930, 
    95830, 
    99300, 
    102710, 
    105840, 
    109600, 
    110530, 
    114690, 
    118510, 
    122090, 
    125320, 
    125800, 
    129630, 
    132600, 
    135560, 
    138410, 
    139570, 
    142040, 
    143430, 
    147470, 
    150210, 
    151950, 
    155730, 
    160560, 
    165140, 
    166700, 
    167520, 
    171160, 
    174890, 
    179930, 
    182650, 
    184830, 
    187230, 
    188670, 
    191310, 
    193820, 
    194770, 
    198170, 
    199970, 
    204550, 
    206820, 
    209190, 
    210330, 
    213540, 
    215100, 
    219920, 
    223510, 
    227370, 
    230480, 
    232070, 
    234980, 
    237800, 
    238780, 
    240970, 
    244610, 
    247670, 
    250230, 
    253560, 
    257850, 
    258899, 
    259959, 
    263260, 
    265780, 
    268020, 
    270910, 
    274390, 
    279330, 
    280630, 
    282770, 
    285840, 
    286260, 
    289130, 
    290520, 
    294860, 
    297120, 
    298030, 
    301340, 
    303590, 
    306170, 
    308620, 
    310630, 
    312550, 
    315840, 
    318000, 
    321650, 
    324260, 
    326450, 
    328060, 
    332220, 
    333830, 
    336080, 
    337010, 
    339920, 
    344470, 
    349940, 
    353240, 
    357170, 
    359560, 
    362230, 
    364690, 
    367830, 
    372860, 
    377600, 
    382020, 
    384120, 
    386400, 
    387550, 
    391390, 
    394720, 
    399690, 
    401010, 
    403740, 
    405880, 
    410740, 
    414140, 
    417290, 
    418430, 
    421790, 
    422430, 
    424720, 
    427830, 
    430510, 
    434260, 
    435730, 
    437960, 
    440330, 
    444010, 
    447370, 
    449700, 
    450300, 
    453060, 
    455900, 
    458570, 
    461530, 
    464880, 
    468660, 
    472840, 
    476430, 
    479450, 
    481360, 
    485340, 
    489410, 
    490470, 
    495400, 
    497130, 
    501560, 
    503890, 
    505590, 
    508340, 
    511390, 
    515100, 
    516480, 
    518730, 
    522610, 
    525890, 
    529180, 
    531250, 
    533990, 
    539020, 
    543800, 
    545760, 
    550090, 
    553430, 
    554910, 
    558300, 
    560940, 
    564680, 
    568120, 
    570960, 
    572580, 
    574180, 
    575190, 
    577020, 
    580940, 
    581700, 
    584840, 
    586710, 
    591350, 
    593480, 
    597530, 
    602390, 
    604390, 
    605790, 
    607550, 
    611460, 
    614930, 
    620350
  ], 
  "end": [
    2450, 
    5660, 
    8770, 
    12950, 
    15400, 
    16790, 
    20060, 
    21020, 
    23420, 
    27140, 
    30880, 
    35010, 
    38520, 
    40890, 
    43370, 
    43990, 
    45230, 
    48870, 
    50190, 
    54630, 
    56060, 
    61280, 
    62690, 
    62870, 
    64720, 
    66470, 
    69670, 
    73750, 
    75560, 
    79240, 
    79870, 
    82540, 
    84580, 
    85740, 
    89010, 
    92930, 
    95830, 
    99300, 
    102710, 
    105840, 
    109600, 
    110530, 
    114690, 
    118510, 
    122090, 
    125320, 
    125800, 
    129630, 
    132600, 
    135560, 
    138410, 
    139570, 
    142040, 
    143430, 
    147470, 
    150210, 
    151950, 
    155730, 
    160560, 
    165140, 
    166700, 
    167520, 
    171160, 
    174890, 
    179930, 
    182650, 
    184830, 
    187230, 
    188670, 
    191310, 
    193820, 
    194770, 
    198170, 
    199970, 
    204550, 
    206820, 
    209190, 
    210330, 
    213540, 
    215100, 
    219920, 
    223510, 
    227370, 
    230480, 
    232070, 
    234980, 
    237800, 
    238780, 
    240970, 
    244610, 
    247670, 
    250230, 
    253560, 
    257850, 
    258899, 
    259959, 
    263260, 
    265780, 
    268020, 
    270910, 
    274390, 
    279330, 
    280630, 
    282770, 
    285840, 
    286260, 
    289130, 
    290520, 
    294860, 
    297120, 
    298030, 
    301340, 
    303590, 
    306170, 
    308620, 
    310630, 
    312550, 
    315840, 
    318000, 
    321650, 
    324260, 
    326450, 
    328060, 
    332220, 
    333830, 
    336080, 
    337010, 
    339920, 
    344470, 
    349940, 
    353240, 
    357170, 
    359560, 
    362230, 
    364690, 
    367830, 
    372860, 
    377600, 
    382020, 
    384120, 
    386400, 
    387550, 
    391390, 
    394720, 
    399690, 
    401010, 
    403740, 
    405880, 
    410740, 
    414140, 
    417290, 
    418430, 
    421790, 
    422430, 
    424720, 
    427830, 
    430510, 
    434260, 
    435730, 
    437960, 
    440330, 
    444010, 
    447370, 
    449700, 
    450300, 
    453060, 
    455900, 
    458570, 
    461530, 
    464880, 
    468660, 
    472840, 
    476430, 
    479450, 
    481360, 
    485340, 
    489410, 
    490470, 
    495400, 
    497130, 
    501560, 
    503890, 
    505590, 
    508340, 
    511390, 
    515100, 
    516480, 
    518730, 
    522610, 
    525890, 
    529180, 
    531250, 
    533990, 
    539020, 
    543800, 
    545760, 
    550090, 
    553430, 
    554910, 
    558300, 
    560940, 
    564680, 
    568120, 
    570960, 
    572580, 
    574180, 
    575190, 
    577020, 
    580940, 
    581700, 
    584840, 
    586710, 
    591350, 
    593480, 
    597530, 
    602390, 
    604390, 
    605790, 
    607550, 
    611460, 
    614930, 
    620350, 
    621600
  ], 
  "text": [
    "ARMANDO FOX: OK.", 
    "So let's get back into our discussion of test-driven development.", 
    "A lot of what we talked about last time had to do with mocks and stubs,", 
    "and other ways of basically faking out the world when you need for a test to", 
    "run in a controlled environment, even though it has to collaborate with", 
    "other classes.", 
    "So we focused a lot on well, we create a fake object that's", 
    "like a stunt double.", 
    "It only stands in for certain behaviors.", 
    "But there's also sometimes when you need pretty much a real object.", 
    "For example, if you're going to do a validity test on whether, let's say, a", 
    "newly created movie is going to pass some validation tests or not, you", 
    "could create a mock of a movie and try to make it respond to a variety of", 
    "methods so that it behaves the right way in a test setting.", 
    "But oftentimes, what you really want is you just when a real instance of", 
    "the object, right?", 
    "Because you're going to need to pass it around.", 
    "You're going to need to do things to it that really what the test is about", 
    "involves using a real object.", 
    "So in cases like that, when you need the real thing, where could a real", 
    "object come from?", 
    "Let's take a look at a couple of cases of what you might do.", 
    "So here's a motivational example.", 
    "Right?", 
    "We can imagine that we have a test where we want to do", 
    "various things to a movie.", 
    "And based on the approach we did last time, one thing we could do is we", 
    "could mock the movie object, and we could stub the various methods of a", 
    "movie and control what they return.", 
    "But pretty much what we've done here is we've all but created a real movie", 
    "object, right?", 
    "So instead, why not just do that.", 
    "So here's an alternative that you could do.", 
    "You could use a fixture.", 
    "A fixture is actually a term that comes from the manufacturing world.", 
    "In the manufacturing world, the fixture is an actual fixed thing where", 
    "you put a little part that you're about to do a bunch of tests on.", 
    "And what it's come to mean in the software world is basically you", 
    "statically load some data into the database before you let the test run.", 
    "So if the test is going to expect to find a movie with particular", 
    "characteristics, a fixture would be that you actually preload that movie", 
    "into the database.", 
    "And lo and behold, when the test goes to find it, there it is.", 
    "The alternative is to use a factory method, which if you've used factory", 
    "methods in languages like Java, it's a pretty similar idea, except here, what", 
    "you're doing is creating only objects you need for each test to pass.", 
    "Alright?", 
    "So in the first case, you're going to preload the database tables with some", 
    "known information, and then your test is going to retrieve it.", 
    "In the second case, instead of preloading the database, you're going", 
    "to sort of stick things in there just for that one test, and then they get", 
    "removed afterward.", 
    "So what's the difference between these two approaches?", 
    "When would you use each one?", 
    "Well, in the case of fixtures, the test database that's managed for you", 
    "by the rails testing environment is wiped out and reloaded", 
    "before every spec runs.", 
    "So for example, if at the beginning of one of my groups of tests in a", 
    "described block, like we saw in our spec last time, if I added fixtures", 
    "movies, what that says is, I'm going to look for a .yml file.", 
    ".yml is yet another markup language.", 
    "That's what it stands for.", 
    "Y-M-L. It's a really, really simple brain dead text format that you can", 
    "use to express objects with fields and values.", 
    "And our spec will look for a movies.yml file that contains a", 
    "handful of records that are going to be automatically put into the movies", 
    "table before that spec runs.", 
    "And then as soon as the spec is finished running, it's going to take", 
    "them back out again.", 
    "When would you use this when we use a fixture?", 
    "Well in some cases your app might depend on some data", 
    "that's really static.", 
    "It's not really part of the models that are manipulated by the tests.", 
    "It's things like configuration information.", 
    "Like what country the app is deployed in, or there's some specific password", 
    "or authentication information.", 
    "Something about the app's configuration that doesn't change as", 
    "the app runs.", 
    "In other words, in a real deployment of the app, this isn't data that would", 
    "be changing on a regular basis.", 
    "So that's a pretty harmless thing to put into a fixture because in some", 
    "sense, it would affect all the tests equally.", 
    "And the nice thing about that use case is that to the extent that your app", 
    "relies on some amount of static configuration and so forth, you could", 
    "kind of put it all in one place.", 
    "You could make some fixtures representing that information that", 
    "just for your app to sort of get off the ground and start breathing needs", 
    "to be there.", 
    "So that's what fixtures are often used for.", 
    "A reason not to use them is that remember we said one of the properties", 
    "of good unit tests is that they should be independent, meaning that you", 
    "should be able to run pretty much in any order.", 
    "You can run any subset of the test without having to run all of them.", 
    "And it's very easy to fall into the pitfall of introducing a dependency on", 
    "the fixture data.", 
    "Now what does that mean?", 
    "Given that I said that the fixture data is preloaded at the beginning of", 
    "each test, but it's wiped out at the end of each test, how could that", 
    "introduce any kind of dependency?", 
    "Well, one possibility is I have some set of fixtures.", 
    "I write a unit test that uses those fixtures.", 
    "Later on in time, I modify that unit test because I need to change what", 
    "it's checking for, or something.", 
    "I change the fixtures that unit test uses.", 
    "And lo and behold, some other tests someplace else breaks.", 
    "Why?", 
    "Because the assumption about the fixtures has accidentally crept into", 
    "more than one test.", 
    "So the danger with fixtures is when you first put them in, you're probably", 
    "doing it because there's a particular test you have in mind it that you want", 
    "to use them in.", 
    "But you'll forget about that, and you'll start relying on them for other", 
    "tests that have nothing to do with that original one.", 
    "And then when you go and change the fixture, the other tests break.", 
    "So it breaks the idea the tests could be independent.", 
    "And that motivates the use of doing it another way,", 
    "which is to use a factory.", 
    "A factory framework is something that has helpers that let you quickly", 
    "create objects with some default attributes.", 
    "So, for example, it might be that when I'm creating a movie object for use in", 
    "some of my specs, I don't really care what the title is.", 
    "I could call them movie one, movie two, movie three.", 
    "I could give it a random rating.", 
    "And then maybe for some specific movies, as I go, I could override some", 
    "of those attributes.", 
    "But for the most part, I just want it to be a valid movie", 
    "object that lives somewhere.", 
    "I don't care too much about what the specific attributes are.", 
    "So FactoryGirl is one of the more widely used gems that lets us do this.", 
    "And just to give you an example of what that would look like, here is a", 
    "way that you could set up FactoryGirl to generate movies for you.", 
    "I'm going to define a default movie as having the title, \"A Fake Title,\" the", 
    "rating of PG, a release date--", 
    "I can execute a little procedure here to get the release date.", 
    "And by the way, why is this in braces?", 
    "Why is this a procedure, and not just an expression?", 
    "Because this is an example of a case where the value 10.years.ago actually", 
    "depends on what time I'm creating the factory object, right?", 
    "If I'm creating a factory object now versus a few seconds from now, this", 
    "expression would have two different values.", 
    "Granted on the scale of 10 years, a few seconds apart", 
    "doesn't matter that much.", 
    "But the point is this is a lambda expression that actually gets executed", 
    "each time you create a new object using this factory.", 
    "So once I've set this up, whenever I need a random movie in my spec, I", 
    "could just say, build a movie.", 
    "And this time I want to override the title because maybe that's one of the", 
    "things I'm going to check for in my test.", 
    "So basically I'm setting up a default way of creating some valid object.", 
    "And again, because the examples we're using to introduce the concepts tend", 
    "to be pretty simple, it's not always obvious why this is a", 
    "useful thing to do.", 
    "But imagine now you have a case where a movie also has a lot more", 
    "attributes, right?", 
    "It's got to 10 or 12 different attributes.", 
    "Maybe the movie has a relationship with other classes, like reviews.", 
    "We're going to talk about that starting next week.", 
    "So in cases like that, the act of just creating a movie actually has all", 
    "these other things that have to happen.", 
    "And it's good to have all that logic in one place.", 
    "So that's what factories give you.", 
    "And as a general rule, when you're talking about objects that could", 
    "change depending on which test you're running, factories are the way to go", 
    "because they allow you to keep your test independent.", 
    "Right?", 
    "They're unaffected by the presence of objects they don't care about because", 
    "each test creates only the items it needs.", 
    "It uses those items, and then those items are wiped out of the test", 
    "database, just like with fixtures.", 
    "Now as we'll see when we start talking about associations, complex", 
    "relationships where there's multiple classes that interact, may be a little", 
    "bit hard to set up because your factory method starts getting longer.", 
    "But on the other hand, as we'll also see, sometimes that's a signal to you", 
    "that you actually have two classes that are cooperating maybe a little", 
    "more intimately than they should.", 
    "In both of these cases, one of the things you can look for in your tests,", 
    "and the book calls this a mock trainwreck, best", 
    "illustrated by example.", 
    "Suppose we have a method that is going to search for a movie based on the", 
    "director, or based on the awards that it received.", 
    "So if I was setting up a test to see if this works, I could certainly", 
    "create a mock of an award.", 
    "And I could create a mock of a director.", 
    "So this presupposes that I have an award model.", 
    "I have a director model in addition to my movie model.", 
    "And now here's my movie model that has an associated award and", 
    "an associated director.", 
    "But look at what my test code starts to look like.", 
    "I'm dereferencing m.award.type, m.director.name.", 
    "Once I have calls where I start chaining together all these methods,", 
    "this is a sign that something is wrong with my refactoring.", 
    "There's some dependency among all these classes.", 
    "They know a little bit more about each other they really should.", 
    "If the idea that a movie's type of the movie award is really an important", 
    "concept, then maybe the award class should be able to-- or the movie class", 
    "should be able to have a delegate method that does this.", 
    "So instead of m.award.type, I have something like m.award type.", 
    "And the award type method hides the implementation of the class that it", 
    "collaborates with.", 
    "So when we get to design patterns, we're going to learn about a pattern", 
    "called delegation that accomplishes exactly this.", 
    "But for now, think of this as sort of a syntactic red flag, right?", 
    "I've got a bunch of methods that I'm chaining with these dots.", 
    "And the dots sort of span different classes, right?", 
    "This is a movie class object.", 
    "This is an award class object.", 
    "This is a string.", 
    "Something's probably wrong here.", 
    "The movie object knows way more than it should about all this stuff down at", 
    "the end, right?", 
    "We're not hiding anything behind the abstractions the way that we're", 
    "supposed to be doing.", 
    "So that's the general idea with fixtures and factories.", 
    "With that in mind, we can ask the following question.", 
    "Which of the following kinds of data, and still using RottenPotatoes as our", 
    "example, which of these should not be set up using fixtures?", 
    "In other words, for which ones should we be relying on", 
    "something more like a factory?", 
    "For movies and ratings?", 
    "For the API key to talk to TMDB, which we talked about last time?", 
    "For something like the time zone settings that the application runs in?", 
    "Or is it the case that these are all reasonable things to fixture?", 
    "So which should not?"
  ]
}