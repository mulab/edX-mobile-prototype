{
  "start": [
    1470, 
    2520, 
    4450, 
    6010, 
    9200, 
    12590, 
    14540, 
    17470, 
    23280, 
    26210, 
    29770, 
    32250, 
    33980, 
    37700, 
    41220, 
    44210, 
    45640, 
    46700, 
    52840, 
    56660, 
    60900, 
    64010, 
    65440, 
    68600, 
    70740, 
    72160, 
    76480, 
    78240, 
    82420, 
    84830, 
    88360, 
    90940, 
    94590, 
    97270, 
    98090, 
    101310, 
    103070, 
    104900, 
    106380, 
    107440, 
    108150, 
    112440, 
    114450, 
    115850, 
    116840, 
    119600, 
    121340, 
    124390, 
    127895, 
    129660, 
    130990, 
    133380, 
    136560, 
    137840, 
    140600, 
    142880, 
    143820, 
    146680, 
    148190, 
    151690, 
    153140, 
    153730, 
    154940, 
    158200, 
    158990, 
    162320, 
    164680, 
    165170, 
    169420, 
    172240, 
    173780, 
    175540, 
    177190, 
    181910, 
    184980, 
    186880, 
    187770, 
    191350, 
    193310, 
    195940, 
    199710, 
    204520, 
    205100, 
    206950, 
    208850, 
    210130, 
    214560, 
    216770, 
    218230, 
    221810, 
    224880, 
    225380, 
    226190, 
    230300, 
    233230, 
    234830, 
    235740, 
    239830, 
    240870, 
    242650, 
    245150, 
    248410, 
    252210, 
    252480, 
    256440, 
    258170, 
    259860, 
    263590, 
    265590, 
    267390, 
    271960, 
    275800, 
    278040, 
    280020, 
    283580, 
    286120, 
    286250, 
    288260, 
    292670, 
    295650, 
    297000, 
    297820, 
    299980, 
    302250, 
    306740, 
    309390, 
    309640, 
    311450, 
    315600, 
    317220, 
    318340, 
    319690, 
    324740, 
    328970, 
    334390, 
    336230, 
    344160, 
    346350, 
    350800, 
    354390, 
    355030, 
    356690, 
    360820, 
    364940, 
    369040, 
    372080, 
    374680, 
    375920, 
    377270, 
    380100, 
    382140, 
    382430, 
    384560, 
    388170, 
    391370, 
    394240, 
    397750, 
    399050, 
    402040, 
    403220, 
    404010, 
    408260, 
    410870, 
    413120, 
    415820, 
    415980, 
    418530, 
    420130, 
    423090, 
    425610, 
    429620, 
    433450, 
    437270, 
    437970, 
    439840, 
    444190, 
    445880, 
    447790, 
    448890, 
    453470, 
    454550, 
    457010, 
    459920, 
    464940, 
    468140, 
    468970, 
    472480, 
    475940, 
    478050, 
    478680, 
    480990, 
    484960, 
    485660, 
    489620, 
    491810, 
    492850, 
    494770, 
    498840, 
    501150, 
    502450, 
    502890, 
    505010, 
    505970, 
    508952, 
    513020, 
    514679
  ], 
  "end": [
    2520, 
    4450, 
    6010, 
    9200, 
    12590, 
    14540, 
    17470, 
    23280, 
    26210, 
    29770, 
    32250, 
    33980, 
    37700, 
    41220, 
    44210, 
    45640, 
    46700, 
    52840, 
    56660, 
    60900, 
    64010, 
    65440, 
    68600, 
    70740, 
    72160, 
    76480, 
    78240, 
    82420, 
    84830, 
    88360, 
    90940, 
    94590, 
    97270, 
    98090, 
    101310, 
    103070, 
    104900, 
    106380, 
    107440, 
    108150, 
    112440, 
    114450, 
    115850, 
    116840, 
    119600, 
    121340, 
    124390, 
    127895, 
    129660, 
    130990, 
    133380, 
    136560, 
    137840, 
    140600, 
    142880, 
    143820, 
    146680, 
    148190, 
    151690, 
    153140, 
    153730, 
    154940, 
    158200, 
    158990, 
    162320, 
    164680, 
    165170, 
    166420, 
    172240, 
    173780, 
    175540, 
    177190, 
    178440, 
    184980, 
    186880, 
    187770, 
    191350, 
    193310, 
    195940, 
    199710, 
    204520, 
    205100, 
    206950, 
    208850, 
    210130, 
    214560, 
    216770, 
    218230, 
    221810, 
    224880, 
    225380, 
    226190, 
    230300, 
    233230, 
    234830, 
    235740, 
    239830, 
    240870, 
    242650, 
    245150, 
    248410, 
    252210, 
    252480, 
    256440, 
    258170, 
    259860, 
    263590, 
    265590, 
    267390, 
    271960, 
    275800, 
    278040, 
    280020, 
    283580, 
    286120, 
    286250, 
    288260, 
    292670, 
    295650, 
    297000, 
    297820, 
    299980, 
    302250, 
    306740, 
    309390, 
    309640, 
    311450, 
    315600, 
    317220, 
    318340, 
    319690, 
    324740, 
    328970, 
    334390, 
    336230, 
    337480, 
    346350, 
    350800, 
    354390, 
    355030, 
    356690, 
    360820, 
    364940, 
    369040, 
    372080, 
    374680, 
    375920, 
    377270, 
    380100, 
    382140, 
    382430, 
    384560, 
    388170, 
    391370, 
    394240, 
    397750, 
    399050, 
    402040, 
    403220, 
    404010, 
    408260, 
    410870, 
    413120, 
    415820, 
    415980, 
    418530, 
    420130, 
    423090, 
    425610, 
    429620, 
    433450, 
    437270, 
    437970, 
    439840, 
    444190, 
    445880, 
    447790, 
    448890, 
    453470, 
    454550, 
    457010, 
    459920, 
    464940, 
    468140, 
    468970, 
    472480, 
    475940, 
    478050, 
    478680, 
    480990, 
    484960, 
    485660, 
    489620, 
    491810, 
    492850, 
    494770, 
    498840, 
    501150, 
    502450, 
    502890, 
    505010, 
    505970, 
    508952, 
    513020, 
    514679, 
    516880
  ], 
  "text": [
    "ARMANDO FOX: Great.", 
    "This is deep stuff.", 
    "Let's go through these one at a time.", 
    "Let's consider the first choice.", 
    "We can change numeric method missing to detect calls to in with some", 
    "appropriate arguments.", 
    "And by the way, notice the only difference between the first choice", 
    "and the second choice is, in this case, I'm referring to a class method.", 
    "And, in this case, I'm referring to an instance method.", 
    "So, we can automatically sort of rule out the second choice because method", 
    "missing is always defined at the class level.", 
    "Right?", 
    "But modulo that, both of these are sort of equivalent, and it's saying,", 
    "well, what we'll do is just add some logic in there, and if you're calling", 
    "in, we can do something with rupees.", 
    "This isn't actually wrong.", 
    "This would work.", 
    "But one of the rules of thumb of responsible power usage is wield the", 
    "minimal power you need to get what you need done, done.", 
    "If meta programming and monkeying around with method missing is really", 
    "what you need to do to achieve the desired effect for the programmer,", 
    "then by all means do it.", 
    "But if there's a simpler, more conventional, less funky way to", 
    "achieve the same goal, you should see whether you could", 
    "do it that way first.", 
    "Which is why I would argue that one of these two is the", 
    "preferred way to do it.", 
    "Now, I'm going to specifically argue for choice number three, and it'll be", 
    "obvious why choice number four is wrong in a minute.", 
    "When I say define the method numeric#in, remember that this", 
    "notation means it's an instance method.", 
    "So I'm arguing that an easy way to do this is just to define an instance", 
    "method, a plain old instance method, no meta programming,", 
    "nothing up my sleeve.", 
    "It's just a regular old method called in.", 
    "Why will this work?", 
    "What happens when I call 5.euros?", 
    "What do I get back?", 
    "I get back a numeric.", 
    "Right?", 
    "So, if all I'm going to do is call in on something that's already a numeric,", 
    "I don't need meta programming to handle that.", 
    "It's a method that's got a plain old name.", 
    "It's not going to be anything else.", 
    "Now, there's an issue of what numeric-- what the method is going to", 
    "do depending on what symbol you pass it.", 
    "And we could do something like we did with method missing to make it easy to", 
    "add currencies and so on, but at the end of the day, there isn't really a", 
    "need to use method missing to solve this problem.", 
    "It's too heavy of a hammer.", 
    "A plain old instance method is just fine.", 
    "And why is the fourth choice not appropriate?", 
    "It's a class method, right?", 
    "It doesn't make sense to define in as a class method because then its", 
    "receiver would be the class numeric.", 
    "That makes no sense.", 
    "You need for its receiver to be an instance of numeric.", 
    "And that's why it's choice three.", 
    "So this is a very subtle question because changing numeric method", 
    "missing is not actually wrong.", 
    "This could work.", 
    "You could do it that way.", 
    "But, from an elegance point of view, it's using a little more power than", 
    "you probably need.", 
    "And as we all know, that way lies madness.", 
    "OK, any questions on this?", 
    "Yes?", 
    "In the back.", 
    "Yes, a class method is the same as a static method.", 
    "Or what Java would call a static method.", 
    "Yeah.", 
    "OK, alright.", 
    "Last topic for today.", 
    "It is no less mind blowing than the previous one.", 
    "I'm hearing the sound of minds already being blown.", 
    "But hang in there.", 
    "OK, blocks, iterators and functional idioms.", 
    "Here are some things that look like they're loops.", 
    "But I'm going to persuade you that you shouldn't really think about them the", 
    "same way that you think about loops in most imperative languages.", 
    "I've got array of three things, and I can say for each thing I'm just going", 
    "to print it out.", 
    "That's what puts does.", 
    "Notice the syntax.", 
    "You're going to see a lot of it.", 
    "Do an argument list between pipe symbols, vertical bars, the body of", 
    "the method and the word end.", 
    "Everybody remember--", 
    "those of you who are Berkeley students have taken CS61a and you remember", 
    "anonymous lambdas?", 
    "Mmmm.", 
    "Yummy.", 
    "And those of you who have not had the pleasure of using Abelson and Sussman", 
    "Assessment Structure and Interpretation of Computer Programs", 
    "check out lambdatheultimate.org.", 
    "Great site.", 
    "But what's going on here is we're really defining a little method that", 
    "doesn't have a name.", 
    "It takes one argument, which is a string--", 
    "well, we're calling it string and it does some stuff.", 
    "And we're passing that method, which is basically everything from the word", 
    "do to the word end, as an argument to each.", 
    "Right?", 
    "So the effect of this is, yeah, we're just going through the array doing", 
    "something to each element.", 
    "We could also do something like this.", 
    "This looks more like what you've probably seen in other languages.", 
    "We could also do upto.", 
    "From one up to some other number.", 
    "But the truth is, these are really just ways of expressing what this", 
    "first one-- this underlying concept here is the idea of a data structure", 
    "managing its own traversal.", 
    "This is the way we think about data structures in Ruby.", 
    "We don't think about, I'm going to iterate over some collection.", 
    "Or I am going to walk down the elements in array.", 
    "No.", 
    "You're not going to do any such thing.", 
    "You are going to ask the data structure, nicely, if it will, in", 
    "turn, give you each element so that you may have the pleasure of doing", 
    "something with it.", 
    "OK?", 
    "But this is really the way we think about iteration.", 
    "Iteration is just a special case of this.", 
    "A plain old for loop with a numeric index is really just iteration over a", 
    "collection of numbers where you get one number back each time.", 
    "Right?", 
    "The much more general version is this.", 
    "And I'm hoping to persuade you why this is ultimately much more powerful.", 
    "So, oh--", 
    "here's a last example.", 
    "There's a times iterator.", 
    "And here I'm taking advantage of the fact that in some people's view an", 
    "unfortunate overloading of braces is that, in some cases, they're the same", 
    "as do and end when there's no argument involved in vertical brackets.", 
    "I'm just putting it up there so that it doesn't look weird.", 
    "This is not a hash.", 
    "I'll summarize that.", 
    "So Richard pointed out that technically it is not true that when", 
    "you use the braces instead of using do and end that you are forbidden from", 
    "using arguments.", 
    "You actually can use arguments.", 
    "But because braces also are primarily used to delimit hashes, it's easy to", 
    "get into parsing ambiguities when you use braces instead of do end.", 
    "Therefore, what most Rubyists do, as a matter of convention, is they'll only", 
    "use the braces if the entire do block fits on a single line.", 
    "If it gets any longer then they'll just go ahead and use do and end to", 
    "make it easier to read.", 
    "Which is also my recommendation.", 
    "But, again, when in doubt, parenthesize defensively and do the", 
    "right thing.", 
    "All right.", 
    "But here's where I'm really going with this.", 
    "If you find yourself iterating with an index you are probably doing it wrong.", 
    "You should almost never need to write a traditional for loop because the", 
    "idea of an iterator in Ruby is that objects get to manage their own", 
    "traversal, and each individual class can decide how do it in the way that's", 
    "most appropriate for it.", 
    "So, for example, what is this object?", 
    "This isn't actually an array.", 
    "It's a range.", 
    "It's a different thing than array, but as long it has a method called each,", 
    "the method can decide to do something reasonable.", 
    "And what would a reasonable behavior be for a range?", 
    "Well, let's return each thing that's inside that range.", 
    "Right?", 
    "That's just what a programmer would expect.", 
    "What about something like .upto ?", 
    "Again, this is just a plain old iterator that, essentially, ends up", 
    "being a simple wrapper around something like this.", 
    "Internally it does pretty much this.", 
    "If you have a regular old array I can traverse the array using each.", 
    "If I have a hash I can either traverse the keys or I can traverse the key in", 
    "value pairs.", 
    "In this case, the do block takes two arguments.", 
    "So you get each key and its corresponding value in turn.", 
    "But what's the message in all of these?", 
    "Again, each is a method call.", 
    "Right?", 
    "Every class can decide implement each and do something sensible for what", 
    "that class is.", 
    "So if you're already two or three steps ahead of me, which I hope you", 
    "are, you might be saying, oh, cool, that means that if I define something", 
    "like, let's say, a binary tree class, I can define my own iterator called", 
    "each that returns all the elements of the tree in some order that I think is", 
    "reasonable.", 
    "Or if I want to define a class that's an infinite collection, like an input", 
    "stream from an external source, I can write a version of each that will", 
    "return one line at a time that the user types.", 
    "Or something like that.", 
    "And, indeed, that's exactly how these things are implemented.", 
    "The idea of iteration and, in particular, what Ruby called internal", 
    "iterators, right?", 
    "Where you're not iterating over the class, you're asking the instance of", 
    "the class to iterate over itself.", 
    "Notice the difference.", 
    "If you've used iterators in Java what do you do?", 
    "You define a iterator object of some kind, and then you use functions like", 
    "if it has next, then get next.", 
    "Or if the collection is empty.", 
    "Right?", 
    "The iterator is the thing that's in control.", 
    "This is different.", 
    "The object is in control and you're passing a function, basically that", 
    "says, whenever you have a new element ready, pass it to this function.", 
    "An amazingly powerful concept.", 
    "We're going to come back to this many, many a time."
  ]
}