{
  "start": [
    180, 
    1650, 
    4850, 
    5510, 
    6030, 
    9110, 
    12650, 
    15810, 
    17470, 
    19700, 
    20900, 
    22740, 
    25060, 
    25520, 
    27520, 
    29980, 
    33770, 
    35700, 
    36410, 
    37850, 
    41180, 
    41550, 
    45230, 
    48520, 
    51840, 
    56350, 
    58170, 
    60890, 
    64769, 
    65860, 
    67500, 
    70680, 
    71990, 
    74730, 
    75810, 
    79420, 
    83010, 
    85330, 
    88660, 
    91470, 
    94490, 
    95210, 
    98820, 
    103110, 
    103800, 
    106580, 
    107070, 
    108415, 
    110640, 
    112760, 
    115770, 
    120550, 
    124020, 
    126780, 
    134910, 
    141660, 
    143810, 
    144130, 
    148190, 
    149090, 
    150740, 
    151580, 
    153060, 
    156250, 
    158760, 
    159580, 
    162630, 
    162870, 
    165660, 
    168270, 
    168630, 
    169140, 
    170080, 
    171920, 
    174290, 
    177200, 
    179270, 
    182110, 
    183690, 
    186280, 
    189630, 
    190560, 
    193460, 
    196630, 
    198950, 
    202210, 
    203510, 
    208290, 
    209570, 
    211780, 
    212730, 
    216880, 
    220440, 
    224430, 
    226120, 
    230820, 
    234080, 
    237520, 
    240970, 
    244320, 
    247990, 
    249420, 
    252030, 
    254530, 
    256190, 
    259420, 
    263190, 
    265550, 
    269350, 
    270780, 
    276660, 
    278440, 
    281460, 
    286280, 
    289270, 
    291100, 
    294020, 
    296230, 
    299830, 
    303070, 
    305560, 
    306840, 
    310540, 
    313360, 
    316050, 
    318760, 
    322650, 
    324660, 
    328590, 
    332230, 
    333000, 
    335420, 
    338310, 
    341500, 
    345990, 
    347190, 
    350040, 
    354450, 
    359540, 
    361120, 
    363950, 
    365890, 
    369820, 
    370930, 
    373520, 
    374800, 
    379970, 
    382510, 
    386670, 
    390070, 
    391310, 
    395960, 
    400280, 
    403940, 
    405400, 
    407260, 
    408360, 
    409450, 
    414730, 
    415620, 
    417910, 
    419040, 
    421900, 
    424450, 
    427900, 
    431180, 
    433810, 
    436220, 
    438680, 
    440730, 
    442560, 
    445190, 
    448010, 
    449040, 
    451870, 
    454430, 
    457770, 
    459510, 
    465070, 
    467920, 
    470800, 
    474480, 
    477570, 
    479230, 
    481360, 
    484440, 
    487110, 
    490470, 
    491680, 
    495210, 
    496520, 
    499250, 
    503470, 
    507030, 
    509570, 
    513700, 
    516549, 
    518270, 
    521590, 
    525080, 
    525770, 
    528960, 
    531030, 
    533880, 
    536770, 
    539155, 
    544190, 
    548180, 
    550730, 
    552700, 
    556110, 
    557250, 
    560620, 
    563840, 
    566160, 
    569520, 
    571880
  ], 
  "end": [
    1650, 
    4850, 
    5510, 
    6030, 
    9110, 
    12650, 
    15810, 
    17470, 
    19700, 
    20900, 
    22740, 
    25060, 
    25520, 
    27520, 
    29980, 
    33770, 
    35700, 
    36410, 
    37850, 
    41180, 
    41550, 
    45230, 
    48520, 
    51840, 
    56350, 
    58170, 
    60890, 
    64769, 
    65860, 
    67500, 
    70680, 
    71990, 
    74730, 
    75810, 
    79420, 
    83010, 
    85330, 
    88660, 
    91470, 
    94490, 
    95210, 
    98820, 
    103110, 
    103800, 
    106580, 
    107070, 
    108415, 
    110640, 
    112760, 
    115770, 
    120550, 
    124020, 
    126780, 
    129354, 
    141660, 
    143810, 
    144130, 
    148190, 
    149090, 
    150740, 
    151580, 
    153060, 
    156250, 
    158760, 
    159580, 
    162630, 
    162870, 
    165660, 
    168270, 
    168630, 
    169140, 
    170080, 
    171920, 
    174290, 
    177200, 
    179270, 
    182110, 
    183690, 
    186280, 
    189630, 
    190560, 
    193460, 
    196630, 
    198950, 
    202210, 
    203510, 
    208290, 
    209570, 
    211780, 
    212730, 
    216880, 
    220440, 
    224430, 
    226120, 
    230820, 
    234080, 
    237520, 
    240970, 
    244320, 
    247990, 
    249420, 
    252030, 
    254530, 
    256190, 
    259420, 
    263190, 
    265550, 
    269350, 
    270780, 
    276660, 
    278440, 
    281460, 
    286280, 
    289270, 
    291100, 
    294020, 
    296230, 
    299830, 
    303070, 
    305560, 
    306840, 
    310540, 
    313360, 
    316050, 
    318760, 
    322650, 
    324660, 
    328590, 
    332230, 
    333000, 
    335420, 
    338310, 
    341500, 
    345990, 
    347190, 
    350040, 
    354450, 
    359540, 
    361120, 
    363950, 
    365890, 
    369820, 
    370930, 
    373520, 
    374800, 
    379970, 
    382510, 
    386670, 
    390070, 
    391310, 
    395960, 
    400280, 
    403940, 
    405400, 
    407260, 
    408360, 
    409450, 
    414730, 
    415620, 
    417910, 
    419040, 
    421900, 
    424450, 
    427900, 
    431180, 
    433810, 
    436220, 
    438680, 
    440730, 
    442560, 
    445190, 
    448010, 
    449040, 
    451870, 
    454430, 
    457770, 
    459510, 
    465070, 
    467920, 
    470800, 
    474480, 
    477570, 
    479230, 
    481360, 
    484440, 
    487110, 
    490470, 
    491680, 
    495210, 
    496520, 
    499250, 
    503470, 
    507030, 
    509570, 
    513700, 
    516549, 
    518270, 
    521590, 
    525080, 
    525770, 
    528960, 
    531030, 
    533880, 
    536770, 
    539155, 
    541600, 
    548180, 
    550730, 
    552700, 
    556110, 
    557250, 
    560620, 
    563840, 
    566160, 
    569520, 
    571880, 
    573130
  ], 
  "text": [
    "OK let's go through them.", 
    "A resource could be existing content or request to modify something.", 
    "Yes.", 
    "Absolutely.", 
    "In fact, one of the pitfalls people have is when they hear the word", 
    "resource, they often think of a \"thing.\" And you're just going to ask", 
    "for the \"thing.\" In fact, the request to create", 
    "something is also a resource.", 
    "Basically if it's an action you can describe and name", 
    "it's probably a resource.", 
    "So we're good on that one.", 
    "Every route must eventually trigger a controller action.", 
    "Yep.", 
    "Some things really are as simple as they seem.", 
    "There's a request and there's a reply-- always true.", 
    "And whenever a request comes in, somewhere in the universe must be a", 
    "controller action that can handle that request.", 
    "So yes.", 
    "This is also true.", 
    "One common set of RESTful actions is the CRUD actions on models.", 
    "Yes.", 
    "In fact, they are so common that Rails gives you these built-in routes to", 
    "handle those CRUD actions without any other effort on your part.", 
    "Having said that, of course, there's many more actions on models that you", 
    "can also define in RESTful terms that go beyond the CRUD actions.", 
    "But yes, this is true--", 
    "which means that indeed blue is the false statement.", 
    "The route always contains one or more parameters, such as :id, to identify", 
    "the resource.", 
    "Some types of routes do need that.", 
    "For example, the route that refers to, \"show me a copy of", 
    "this specific item\"---", 
    "well of course you need to name which item it is if you've got a table with", 
    "hundreds of movies.", 
    "But there's another route which is, \"create a new movie with the following", 
    "information.\" You can't really specify an :id there because since the thing", 
    "doesn't exist yet, it doesn't have one.", 
    "Or there's the action which says, \"show me a list of all of the", 
    "following types of thing.\" A list of all the movies, for example.", 
    "You don't need an :id because you're asking for a list of all of them.", 
    "So yes.", 
    "This is false because it is often the case, depending on the route, that it", 
    "may contain one or more wild cards in here, but it doesn't have to, as", 
    "you've seen.", 
    "And you have now earned the right to go-- oh sorry.", 
    "No you haven't.", 
    "There's a question first.", 
    "[INAUDIBLE]", 
    "Is the name of the controller also parameter?", 
    "It's not a parameter in the sense that it can never vary.", 
    "So when a parameter with a colon appears in the route it means that the", 
    "URL could actually take on any value to replace that.", 
    "But the name of the controller is always going to be the same.", 
    "For example, let's go back to our--", 
    "For example, in this route, GET /movies/:id/edit, isn't \"movies,\" the", 
    "name of the controller, really one of the parameters?", 
    "No.", 
    "Because in every URL that matches this route the word \"movies\" and the word", 
    "\"edit\" have to be there.", 
    "They have to be static.", 
    "Those are constants.", 
    "But this thing can vary.", 
    "This thing can take on any value and it'll be parsed out and you'll get", 
    "handed the value that it had in that particular URL.", 
    "So it's like an argument.", 
    "It's like interpolating an argument into a string.", 
    "OK.", 
    "Let's get a quick introduction of Rails, \"From Zero to CRUD.\" I thought", 
    "that was very clever.", 
    "Thank you.", 
    "Thank you.", 
    "I'm here all week.", 
    "But not next week.", 
    "So we talked about the model view controller framework.", 
    "And we can now talk specifically about how Rails puts", 
    "these things in context.", 
    "Looking inside your application we can--", 
    "here we go--", 
    "we said that the first thing that happens when your app gets a request", 
    "is that there's a routing subsystem that figures out which controller is", 
    "going to be called.", 
    "And in your app directory there's going to be a subdirectory called", 
    "\"controllers\" where each controller gets its own file.", 
    "The controller is going to communicate with models.", 
    "Amazingly, they live in subdirectory called \"models\" and each model gets", 
    "its own Ruby file.", 
    "Remember that we said models in the Rails MVC world are stored as tables", 
    "in a relational database.", 
    "So somewhere out here in your persistence here you've got a", 
    "relational database.", 
    "And each table corresponds to one kind of model.", 
    "And as we'll see, the naming conventions encourage you to name the", 
    "tables the same as you name your files and then you've got less work to do.", 
    "There's also some views.", 
    "Next week we'll talk a little bit about Haml, which is HTML on a diet.", 
    "It's sort of like HTML but much less verbose and easier to write.", 
    "That is the preferred among most Rubyists that I know, the preferred", 
    "way to do HTML views in Rails apps.", 
    "So once your controller action does whatever it needs to do with the", 
    "model, it will package up some information that can be passed off to", 
    "render a view template.", 
    "So we've got the model part, the view part, and the controller part", 
    "specifically to Rails.", 
    "What are these in terms of code?", 
    "Well we said the Rails uses the ActiveRecord design pattern.", 
    "And indeed, there's a base class in the library called ActiveRecord that", 
    "your models will all subclass from.", 
    "Which will give you a lot of the basic functionality for CRUD that we already", 
    "talked about.", 
    "There's a package for doing view rendering that we'll get a little into", 
    "next week called ActionView.", 
    "So your views will subclass from that.", 
    "And there is a base controller that will give you a starting point from", 
    "which to do your own application controllers.", 
    "Let's kind of see how the moving parts work together.", 
    "If we took a trip through the application, what would be a typical", 
    "simple controller action?", 
    "Well the first thing that will happen is that the incoming URL is going to", 
    "be matched to see which route it might possibly match against.", 
    "And that will tell Rails which controller", 
    "action's going to be called.", 
    "If there's any parameters that are part of that route in the URL they'll", 
    "be parsed out as well.", 
    "So let's say we had told our application to", 
    "go to the URL /movies/3.", 
    "Using our simple example from before, there's a routes file that's part of", 
    "your apps configuration information.", 
    "And in that file there would be information that shows that the", 
    "/movies/:id was going to map to the \"show\" action in the movies", 
    "controller.", 
    "So that's the first step.", 
    "So now we know which controller we're going to and which action it is.", 
    "And this is where we see one of the two principles in Rails which is", 
    "\"convention over configuration.\" By naming our things in a certain way we", 
    "save a lot of work.", 
    "So what's this example telling us here?", 
    "Because we have movies as a resource, an entity that the app manipulates, if", 
    "we agree to call the controller for that entity movies_controller, Rails", 
    "will automatically know where to find it.", 
    "It will look in the controller subdirectory for a file called", 
    "movies_controller.rb.", 
    "And we've named which action we want to do.", 
    "It's part of the route.", 
    "So it's just going to look for a Ruby method with that same name in the", 
    "controller file.", 
    "So now we've gotten from a URL with a wild card parameter 3, all the way", 
    "into a controller method in the right file.", 
    "And we can actually grab that parameter out of the params hash.", 
    "One thing we'll discuss next week is that it's not really a hash, but it", 
    "behaves just like one.", 
    "It quacks like a hash, in duck typing terminology.", 
    "So in our very simple example here, I'm going to use the ability of Rails", 
    "to just find a movie given its primary key, and I'm going to assign that to", 
    "an instance variable.", 
    "Now a couple of things are going on here.", 
    "Movie.find--", 
    "where's this going to come from?", 
    "Well because Rails gives us an active record base class, there's a lot of", 
    "functionality built in.", 
    "Remember we said, part of active records is every model knows how to", 
    "CRUD itself?", 
    "Well this find method is actually part of the base class.", 
    "We get this from inheritance, so we get it for free.", 
    "Without us doing any work, just by subclassing from the active record", 
    "base class, we can find stuff given its primary key.", 
    "In fact, as we'll see in a moment, we can do many more interesting things as", 
    "well, as you would expect.", 
    "An instance variable--", 
    "what is this an instance variable of?", 
    "Well the controller is an object.", 
    "So this is actually an instance of a controller object.", 
    "We're going to create an instance variable in that controller object.", 
    "And why?", 
    "Because when the controller renders a view-- in other words it's time to", 
    "present some information back to the user--", 
    "any instance variables that we defined in our controller method become", 
    "available to the view.", 
    "So this is a little bit of Haml markup that you can see in the book and that", 
    "we'll probably backfill this material next week.", 
    "But this might be like an item in a bulleted list, and we're", 
    "de-referencing that instance variable that came from the controller.", 
    "Now the astute people among you-- and of course you are all astute-- might", 
    "be thinking, wait a minute.", 
    "I can see that, sure this is a controller object.", 
    "I'm defining an instance variable of that controller object.", 
    "Does that mean that the view is actually somehow part of the", 
    "controller object and that's why I could see the same instance variables?", 
    "Actually no.", 
    "But what's going on is that the view is a separate type of object, but part", 
    "of the rendering process--", 
    "and this is another little boost that Rails gives you--", 
    "is it will automatically take all of the instance variables you created in", 
    "the controller method and make them available as instance variables in the", 
    "view object and give them the same names.", 
    "In other words, you can essentially pretend that it's the same object in", 
    "that you can use all the same instance variables.", 
    "It's pretty neat.", 
    "So the controller action eventually causes a view to be rendered.", 
    "That view can make use of any instance variables that were set up in the", 
    "controller.", 
    "And this is how you can see why the interface between the controller and", 
    "the view is pretty narrow.", 
    "Whatever information you want to put into that view, all you've got to do", 
    "is figure out how to set up that information as instance variables in", 
    "your controller action and then your view can do whatever it wants with", 
    "them, including call other methods on them.", 
    "So one question that immediately comes to mind is, why is it the case that", 
    "every interaction with the app must eventually cause", 
    "something to be rendered?", 
    "Is it because of this convention over configuration trick the rails does to", 
    "help you out?", 
    "Is it because HTTP is a request-reply protocol?", 
    "Is it because of Model-View-Controller because Model-View-Controller implies", 
    "there must be a view, therefore you have to render it?", 
    "Or is it all of the above?", 
    "First time that that option has been available.", 
    "Think about it."
  ]
}