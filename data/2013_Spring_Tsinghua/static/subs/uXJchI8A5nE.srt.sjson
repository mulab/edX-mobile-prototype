{
  "start": [
    260, 
    520, 
    2050, 
    4110, 
    7980, 
    9270, 
    13730, 
    16170, 
    18440, 
    21170, 
    23290, 
    27440, 
    31400, 
    33600, 
    38490, 
    43560, 
    47800, 
    51340, 
    53830, 
    55200, 
    58080, 
    59400, 
    64660, 
    66780, 
    70790, 
    72420, 
    73540, 
    74560, 
    76220, 
    79570, 
    81740, 
    83040, 
    84850, 
    87480, 
    91500, 
    94616, 
    99820, 
    101845, 
    103600, 
    108210, 
    111160, 
    112580, 
    116510, 
    119590, 
    123580, 
    129530, 
    130590, 
    132550, 
    134460, 
    137560, 
    141610, 
    142360, 
    142880, 
    145230, 
    146190, 
    149450, 
    151490, 
    153860, 
    156680, 
    160300, 
    161650, 
    162640, 
    165640, 
    169590, 
    172000, 
    173260, 
    175990, 
    180790, 
    183800, 
    185600, 
    188040, 
    192070, 
    194490, 
    197810, 
    199890, 
    201330, 
    203120, 
    204150, 
    206650, 
    211030, 
    217700, 
    222550, 
    228920, 
    234790, 
    236410, 
    239290, 
    241230, 
    242740, 
    245460, 
    250970, 
    255330, 
    257600
  ], 
  "end": [
    520, 
    2050, 
    4110, 
    5440, 
    9270, 
    13730, 
    16170, 
    18440, 
    21170, 
    23290, 
    27440, 
    31400, 
    33600, 
    38490, 
    43560, 
    47800, 
    51340, 
    53830, 
    55200, 
    58080, 
    59400, 
    64660, 
    66780, 
    70790, 
    72420, 
    73540, 
    74560, 
    76220, 
    79570, 
    81740, 
    83040, 
    84850, 
    87480, 
    91500, 
    94616, 
    99820, 
    101845, 
    103600, 
    108210, 
    111160, 
    112580, 
    116510, 
    119590, 
    123580, 
    129530, 
    130590, 
    132550, 
    134460, 
    137560, 
    138810, 
    142360, 
    142880, 
    145230, 
    146190, 
    149450, 
    151490, 
    153860, 
    156680, 
    160300, 
    161650, 
    162640, 
    165640, 
    169590, 
    172000, 
    173260, 
    175990, 
    180790, 
    183800, 
    185600, 
    188040, 
    192070, 
    194490, 
    197810, 
    199890, 
    201330, 
    203120, 
    204150, 
    206650, 
    211030, 
    217700, 
    222550, 
    228920, 
    232085, 
    236410, 
    239290, 
    241230, 
    242740, 
    245460, 
    250970, 
    255330, 
    257600, 
    258850
  ], 
  "text": [
    "ARMANDO FOX: All right.", 
    "So let's go through all of these.", 
    "What's going on here?", 
    "Looking at choice A, my_account.@balance.", 
    "What's wrong with it?", 
    "It's because we did not ever define a method whose name is @balance.", 
    "In fact, it would be syntactically illegal for us to do so.", 
    "You can't begin a method name with at sign.", 
    "You could only use the at sign for instance variables.", 
    "So this is sort of wrong by construction, right?", 
    "This is saying, call this method on that receiver, but it's not even legal", 
    "to define a method that has an @ sign as the first character of its name.", 
    "Whereas these two, which are equivalent, right?", 
    "B is the poetry mode version of C, and both of them will call the method that", 
    "we defined, which just returns the value of that instance variable.", 
    "Now, surely, if you weren't saying this before, you're saying it by now,", 
    "why do we have to define explicitly these attribute accessors and", 
    "attribute setters if all they're going to do is sort of the", 
    "obvious default thing.", 
    "And the answer is, you don't actually have to do it in most cases.", 
    "Instead of doing that--", 
    "watch or you're going to miss it-- you could also just do this.", 
    "Let's do that again, shall we?", 
    "Old way, new way.", 
    "Yes, I know.", 
    "I know.", 
    "It blows your mind.", 
    "What's going on here?", 
    "attr_accessor is not part of the language.", 
    "If you're ever wondering whether something is part of the language,", 
    "it's usually not.", 
    "Ruby is actually minimalistic.", 
    "There's not that much that's in the language itself.", 
    "attr_accessor is just a plain old method that uses metaprogramming,", 
    "which we're going to learn a lot more about right after our break in just a", 
    "couple of minutes here, that allows you to define new code on the fly as", 
    "your program is running.", 
    "Let me say that one more time.", 
    "It's a plain old method that uses Ruby's ability to write new code and", 
    "define new methods and so forth after the program has", 
    "already started running.", 
    "Really, what's going on when we say attr_accessor is pretty much the", 
    "equivalent of it setting up these two methods for us.", 
    "And as you can read in the book, there's also attr_reader, which gives", 
    "you only the accessor but no mutator, and there's attr_writer, which does", 
    "the reverse.", 
    "OK, so pretty cool, right?", 
    "This is an example of the Ruby way.", 
    "Metaprogramming gives you ways to tersify stuff without having to put", 
    "more stuff into the language.", 
    "Was there a question?", 
    "Yes?", 
    "STUDENT: [INAUDIBLE]", 
    "ARMANDO FOX: Ah, good question.", 
    "If you didn't initialize that balance in the constructor, would", 
    "attr_accessor still work?", 
    "It would absolutely work.", 
    "Basically, it would define exactly this, right?", 
    "So the real question is, suppose in this scenario, you didn't initialize", 
    "@balance, and you tried to do this.", 
    "What would happen?", 
    "And the answer is in Ruby, instance variables that haven't been", 
    "initialized spring into existence as nil if you try to reference them.", 
    "And we could have an argument about whether that's a good idea or not, but", 
    "let's not do that.", 
    "But the simple answer is, if you try to use an instance variable that has", 
    "never had a value assigned to it, it gets the value nil by default.", 
    "OK, and then the answer to your question is, in this", 
    "case, exact same behavior.", 
    "Because there's literally [INAUDIBLE]", 
    "doing this and doing that, except that this is more beautiful, as", 
    "we I think all agree.", 
    "OK, so here's our last mental calisthenics question.", 
    "I'm opening the class string.", 
    "And by the way, this is another thing about Ruby.", 
    "String is one of the built-in classes.", 
    "But that's cool.", 
    "I can still add stuff to it, change the way it works.", 
    "And yes, that's stupid if you misuse it, so don't misuse it.", 
    "I'm defining a new method called curvy, which will return true if the", 
    "receiver of the method, when converted to all capital letters--", 
    "or sorry, if this string of characters includes the letter that is past a", 
    "string when up cased, but not that.", 
    "Let's parse that one more time.", 
    "It's basically returning the opposite of whether the letter is made up of", 
    "all straight lines.", 
    "That makes it easier to understand.", 
    "OK, so here's my question.", 
    "Which of these is the way that you ought to call curvy?", 
    "And I'm making it easier for you in this case because I'm stipulating that", 
    "there's really only one correct answer, and the", 
    "other three are incorrect."
  ]
}