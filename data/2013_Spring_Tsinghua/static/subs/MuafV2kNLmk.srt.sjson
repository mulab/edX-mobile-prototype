{
  "start": [
    930, 
    4250, 
    7690, 
    8570, 
    9810, 
    13920, 
    19350, 
    22580, 
    25110, 
    28340, 
    33190, 
    38490, 
    42920, 
    45940, 
    47960, 
    52500, 
    54330, 
    56210, 
    60360, 
    62970, 
    66320, 
    68330, 
    71130, 
    76530, 
    77410, 
    79090, 
    80880, 
    86330, 
    87810, 
    89210, 
    91085, 
    93175, 
    95300, 
    98200, 
    101070, 
    102020, 
    108930, 
    113060, 
    114540, 
    115080, 
    123820, 
    126310, 
    129930, 
    133530, 
    134750, 
    138270, 
    140230, 
    145540, 
    146040, 
    149320, 
    152690, 
    154050
  ], 
  "end": [
    4250, 
    7690, 
    8570, 
    9810, 
    13920, 
    19350, 
    22580, 
    25110, 
    28340, 
    33190, 
    35300, 
    42920, 
    45940, 
    47960, 
    52500, 
    54330, 
    56210, 
    60360, 
    62970, 
    66320, 
    68330, 
    71130, 
    73055, 
    77410, 
    79090, 
    80880, 
    82130, 
    87810, 
    89210, 
    91085, 
    93175, 
    95300, 
    98200, 
    101070, 
    102020, 
    108930, 
    113060, 
    114540, 
    115080, 
    116330, 
    126310, 
    129930, 
    131180, 
    134750, 
    138270, 
    140230, 
    145540, 
    146040, 
    149320, 
    152690, 
    154050, 
    155300
  ], 
  "text": [
    "ARMANDO FOX: Yes, so the question is: is it the case that the reason fortune", 
    "text is a method is because I said that fortune text is a", 
    "column in the table?", 
    "And the answer is yes.", 
    "But by default, and again, you can always choose to override stuff, but", 
    "by default, once you've named what the table is, Rails or Active Record will", 
    "look at the table columns and create accessor and getter methods", 
    "correspondent to the names of those columns.", 
    "And based on the type information, like if a column is an integer and you", 
    "try to assign a string to it, the right thing will happen and so on.", 
    "What is what returning?", 
    "So remember that this is an instance method of FortuneCookie that means", 
    "that the presumed receiver is an object representing one", 
    "row from that table.", 
    "So that's what self represents, right, so self.fortune_text is the Fortune", 
    "text attribute from the row from that table.", 
    "For example, let me--", 
    "I came prepared with a code demo for this.", 
    "Let's see if--", 
    "is that big enough to read?", 
    "So I fired up Rails Console.", 
    "Rails Console is just like running the server except it gives me a command", 
    "line and it's got my entire app already loaded.", 
    "On my slow laptop.", 
    "OK, I'm going to find a random movie.", 
    "I don't really care which one I get.", 
    "Oops.", 
    "That's better.", 
    "OK, good, I got a random movie.", 
    "It's this one.", 
    "So what is M?", 
    "M is an instance of Active Record Base.", 
    "It corresponds to a particular row in the movies_table.", 
    "In this case, the row corresponding to the wonderful children", 
    "adults movie Aladdin.", 
    "And now I can look at its various attributes.", 
    "So that's what I'm doing here, M is an example of what self would be in the", 
    "fortune cookie slide.", 
    "Right?", 
    "And I can change--", 
    "look how forward-looking I am.", 
    "I'm not allowing un-family friendly movies to be included in the list.", 
    "Fine.", 
    "There, that worked.", 
    "And you can see, as a side effect, you can see the SQL that was generated in", 
    "response to my query.", 
    "So in this case, M is an instance of the class that inherits from Active", 
    "Record Base.", 
    "It's a movie instance and it has the attributes that it does because those", 
    "are the table names that I set up when I made my migration.", 
    "OK?", 
    "Cool."
  ]
}