{
  "start": [
    1040, 
    5870, 
    8540, 
    9740, 
    11300, 
    12590, 
    14860, 
    15900, 
    18990, 
    19950, 
    22960, 
    26220, 
    29880, 
    31840, 
    36390, 
    40050, 
    43090, 
    45670, 
    47230, 
    50540, 
    52920, 
    56480, 
    57610, 
    60740, 
    61430, 
    63340, 
    66420, 
    70080, 
    74080, 
    77320, 
    79740, 
    81010, 
    84110, 
    87730, 
    88880, 
    92810, 
    96160, 
    99590, 
    101790, 
    102580, 
    105730, 
    108640, 
    113170, 
    114880, 
    117090, 
    119100, 
    123010, 
    126240, 
    128199, 
    129479, 
    132890, 
    134410, 
    138370, 
    139460, 
    143380, 
    145150, 
    148840, 
    152170, 
    155930, 
    158870, 
    162830, 
    164300, 
    166980, 
    169180, 
    173110, 
    174600, 
    179600, 
    180510, 
    183820, 
    186560, 
    187870, 
    190210, 
    192310, 
    193930, 
    197530, 
    200000, 
    202410, 
    205360, 
    209880, 
    212790, 
    216100, 
    218700, 
    222520, 
    223950, 
    226680, 
    229980, 
    232320, 
    233950, 
    236590, 
    238930, 
    240360, 
    244490, 
    245640, 
    245940, 
    249260, 
    251050, 
    255210, 
    258350, 
    261940, 
    265440, 
    266910, 
    268410, 
    270650, 
    273840, 
    278020, 
    281870, 
    284480, 
    285550, 
    287800, 
    291360, 
    294910, 
    296550, 
    301500, 
    303270, 
    304110, 
    306080, 
    310500, 
    311160, 
    314520, 
    316800, 
    320020, 
    324360, 
    326010, 
    327080, 
    329130, 
    330880, 
    333640, 
    337720, 
    341650, 
    344100, 
    347730, 
    351260, 
    352600, 
    356510, 
    361290, 
    362740, 
    366070, 
    367560, 
    370650, 
    371730, 
    373630, 
    377930, 
    380930, 
    383570, 
    386370, 
    388780, 
    391680, 
    394870, 
    396140, 
    399620, 
    403260, 
    406970, 
    412480, 
    417210, 
    421300, 
    424380, 
    425610, 
    427930, 
    430130, 
    432820, 
    434940, 
    439180, 
    443070, 
    444870, 
    448210, 
    454720, 
    455990, 
    459310, 
    461520, 
    464810, 
    468120, 
    470130, 
    473530, 
    475450, 
    479970, 
    482830, 
    485010, 
    488050, 
    490040, 
    493810, 
    496280, 
    499640, 
    502090, 
    504250, 
    507740, 
    510200, 
    512880, 
    514390, 
    517580
  ], 
  "end": [
    5870, 
    8540, 
    9740, 
    11300, 
    12590, 
    14860, 
    15900, 
    18990, 
    19950, 
    22960, 
    26220, 
    29880, 
    31840, 
    36390, 
    40050, 
    43090, 
    45670, 
    47230, 
    50540, 
    52920, 
    56480, 
    57610, 
    60740, 
    61430, 
    63340, 
    66420, 
    70080, 
    74080, 
    77320, 
    79740, 
    81010, 
    84110, 
    87730, 
    88880, 
    92810, 
    96160, 
    99590, 
    101790, 
    102580, 
    105730, 
    108640, 
    113170, 
    114880, 
    117090, 
    119100, 
    123010, 
    126240, 
    128199, 
    129479, 
    132890, 
    134410, 
    138370, 
    139460, 
    143380, 
    145150, 
    148840, 
    152170, 
    155930, 
    158870, 
    162830, 
    164300, 
    166980, 
    169180, 
    173110, 
    174600, 
    179600, 
    180510, 
    183820, 
    186560, 
    187870, 
    190210, 
    192310, 
    193930, 
    197530, 
    200000, 
    202410, 
    205360, 
    209880, 
    212790, 
    216100, 
    218700, 
    222520, 
    223950, 
    226680, 
    229980, 
    232320, 
    233950, 
    236590, 
    238930, 
    240360, 
    244490, 
    245640, 
    245940, 
    249260, 
    251050, 
    255210, 
    258350, 
    261940, 
    265440, 
    266910, 
    268410, 
    270650, 
    273840, 
    278020, 
    281870, 
    284480, 
    285550, 
    287800, 
    291360, 
    294910, 
    296550, 
    301500, 
    303270, 
    304110, 
    306080, 
    310500, 
    311160, 
    314520, 
    316800, 
    320020, 
    324360, 
    326010, 
    327080, 
    329130, 
    330880, 
    333640, 
    337720, 
    341650, 
    344100, 
    347730, 
    351260, 
    352600, 
    356510, 
    361290, 
    362740, 
    366070, 
    367560, 
    370650, 
    371730, 
    373630, 
    377930, 
    380930, 
    383570, 
    386370, 
    388780, 
    391680, 
    394870, 
    396140, 
    399620, 
    403260, 
    406970, 
    412480, 
    417210, 
    421300, 
    424380, 
    425610, 
    427930, 
    430130, 
    432820, 
    434940, 
    439180, 
    443070, 
    444870, 
    448210, 
    454720, 
    455990, 
    459310, 
    461520, 
    464810, 
    468120, 
    470130, 
    473530, 
    475450, 
    479970, 
    482830, 
    485010, 
    488050, 
    490040, 
    493810, 
    496280, 
    499640, 
    502090, 
    504250, 
    507740, 
    510200, 
    512880, 
    514390, 
    517580, 
    521260
  ], 
  "text": [
    "ARMANDO FOX: So at this point I want to return to the question of we're in", 
    "the controller method, in fact, we're still in the controller method because", 
    "the debugger is still running.", 
    "It's waiting for us.", 
    "We're still in the controller method.", 
    "We're about to create a new movie.", 
    "It's going to go great.", 
    "We're going to save it to the database, but now we have to render", 
    "something, right?", 
    "Because every action always at the end of the day has to render something.", 
    "So the question is, what is it that we're going to render?", 
    "The standard convention over configuration default brain dead way", 
    "you might do it is you could say, well, let's see.", 
    "It's the create action, so it's going to look for the create view template.", 
    "So I've got to put something in there that is kind of, you know, blase.", 
    "Like your movie was created, click here to go back to the home page.", 
    "Or something that looks like you're extremely lame.", 
    "So you could do that.", 
    "But if you don't want to be extremely lame, a thing that you might say is", 
    "look, if all you're going to do when you finish creating a movie is you're", 
    "eventually going to take the user back to that home page, let's just take", 
    "them there, right?", 
    "We can render something that isn't the view whose name is", 
    "the same as the action.", 
    "We'll just render something different.", 
    "So how do we do that?", 
    "So one way to do that is to use redirect.", 
    "Redirect is something that's part of HTTP, and basically what it says is", 
    "you just asked me for something, but the truth is what you should have", 
    "asked for is this other URL over here.", 
    "That's what a redirect is.", 
    "So your browser will get the result and say oh, cool.", 
    "I will now refetch the other URL and behave as if that's the original thing", 
    "that you had asked for.", 
    "This is a mechanism that has been in HTTP since forever, and Rails provides", 
    "a really easy method that wraps it up.", 
    "So what we're going to do is when our create action succeeds, we will", 
    "redirect the user to the index page.", 
    "What does that mean?", 
    "It means that we're going to send a reply back to the browser saying you", 
    "asked me for the page corresponding to create something.", 
    "But what you really meant to ask was to reshow the index page.", 
    "Here's what that looks like in code.", 
    "You already sort of got the preview when we were looking on", 
    "the controller action.", 
    "If the movie save is successful, then we'll talk about the flash in a", 
    "moment, which we can use to give some helpful info to the user.", 
    "But we're going to redirect to somewhere else.", 
    "Where are we going to redirect to?", 
    "We'll use the URI helper again, and we'll redirect to movies path, which", 
    "is just the list of all the movies.", 
    "All right, now we could have said something like, we could have done", 
    "something different.", 
    "What we do here if the create fails for whatever reason?", 
    "And in a couple of weeks, we'll talk about validations.", 
    "And we'll explore reasons why it could have failed.", 
    "Here if it fails, we're going to render a different template.", 
    "We're going to say instead of following through on rendering the", 
    "create template, which is what you would do by default, because that's", 
    "the controller action, I will force you to render something different.", 
    "You're going to render the new method.", 
    "What this means is if it doesn't work, the user goes back to the page where", 
    "they have to fill in the information again.", 
    "And there's a screen cast that accompanies the book chapter, showing", 
    "why this is a useful mechanism.", 
    "It actually identifies which fields were in error that caused the save not", 
    "to succeed.", 
    "And you can actually display those fields differently, and give the user", 
    "some concrete information about why they got there.", 
    "But notice the difference, right?", 
    "In one case we're completing the action.", 
    "We're just going to render a view that has a different name", 
    "than the action itself.", 
    "A different type of behavior is we're going to complete the action, and then", 
    "restart a whole new HTTP request.", 
    "Again, think about service oriented architecture, right?", 
    "In a service oriented architecture, I would create the movie, and I would", 
    "get back a reply saying it succeeded, or it didn't succeed.", 
    "And that would be fine for service oriented architecture, right?", 
    "Whoever is calling me as a service doesn't need to have its ego satisfied", 
    "by seeing a nice page saying your movie was created.", 
    "But for the web browser version of this, we need to make allowances for", 
    "the fact that it's a human user.", 
    "We'd like to show them something useful, but we don't want to violate", 
    "the clean structure of the request succeeds or the request fails.", 
    "OK, if the request has succeeded, that's one thing.", 
    "We're done with that thing.", 
    "But in order to show the user something interesting, let's use", 
    "redirect to say oh, you should have asked for this.", 
    "Here's the index page again.", 
    "And by the way, we'll provide a little message to show you that yes, your", 
    "action succeeded.", 
    "Right?", 
    "So again, it's a way of trying to preserve a single clean architecture.", 
    "One request, success or failure.", 
    "One reply, but also provide a way that the human user can be accommodated", 
    "with his or her imperfections.", 
    "We briefly saw in the controller method this reference to flash.", 
    "The flash is something the quacks like a hash.", 
    "Using the terminology of duck typing.", 
    "So what do I mean by that?", 
    "It means you could behave as if it's a hash.", 
    "You could do everything to it that you could do to a hash.", 
    "It's different from a hash in a very special way, which is that normally,", 
    "once an HTTP request is finished, all of the information associated with", 
    "whatever happened during that request is incinerated.", 
    "It is never visible again.", 
    "By the way, this is why you have a database, right?", 
    "To a first order, if it isn't in the database, it doesn't exist, because", 
    "once that HTTP request is over, every request after it is going to be", 
    "totally independent of it.", 
    "However, a very common case is when you use something like a redirect,", 
    "yes, we've closed off one action.", 
    "Success.", 
    "We're going to take the user somewhere interesting.", 
    "But we would like to remind them that the action they started completed", 
    "successfully.", 
    "So even though they are two separate actions, we want to carry some amount", 
    "of information forward from one to the other.", 
    "And that's the common case problem that the flash solves for you.", 
    "It's like a hash, but unlike a regular hash, it magically persists until", 
    "exactly the end of the next request.", 
    "And then it dies after that.", 
    "Or it's incinerated, I should say, after that.", 
    "So it exists for one purpose, right?", 
    "It exists to carry information across a redirect.", 
    "And because redirects are a common way to solve this problem of human users", 
    "often need to be directed somewhere more interesting, the flash exists so", 
    "that you can, without adding additional machinery to your", 
    "application, carry just a little bit of information forward to the next", 
    "request, and presumably display it somewhere so that the user understood", 
    "what's going on.", 
    "You could put pretty much anything you want in the flash, but by convention,", 
    "most programmers use the notice element, or the notice key to provide", 
    "informational messages.", 
    "And the warning key to provide error or warning kind of messages.", 
    "But you don't have to, right?", 
    "And by the way, the contents of the flash don't magically", 
    "appear in your view.", 
    "You have to arrange for them to appear.", 
    "Somewhere in your view template, you have to basically check if the flash", 
    "warning contains something, then I should probably display it.", 
    "So Rails maintains that the flash for you.", 
    "Anything you put in there in your controller action will stick around", 
    "until the next controller action, whatever it may be.", 
    "But it's your job to make sure it actually gets displayed somewhere.", 
    "And as we explained in the book, a common place to put that is in your", 
    "application level template.", 
    "The template that's used to wrap all of the page views.", 
    "The session is a lot like the hash, but it persists forever.", 
    "So whereas the flash gets incinerated after the very next request, the", 
    "session never gets incinerated unless the user blows away all their cookies.", 
    "And the session, or you reset the session by clearing it out yourself.", 
    "Like the flash, the session can be made to contain anything you want.", 
    "However, there are some very good reasons why you shouldn't put a lot of", 
    "stuff in there.", 
    "But that's the subject of our next question.", 
    "So let's hold off on that for now.", 
    "We haven't talked about cookies very much yet, because we had to reorder", 
    "some of the lecture material.", 
    "But one of the changes that was made about a year or two ago in Rails is", 
    "that the cookie that goes back to the user's browser stores the entire", 
    "contents of the user's session.", 
    "And there is some restrictions on how large a cookie can be.", 
    "So basically, the best practice is: if it's important, or it's big, put it in", 
    "the database.", 
    "If it's important and big, and there's no place in the database to put it,", 
    "you should probably ask yourself why that is, right?", 
    "Why is that you're carrying around a piece of state that is important", 
    "enough that you want to persist it across requests, but not important", 
    "enough that it gets its own table in the database, right?", 
    "That's kind of a red flag that you might be missing a table, or", 
    "something like that.", 
    "If you've used, or if you've heard of the term NoSQL, and if you've worked", 
    "in a SysAdmin environment, and you've heard of things like memcached, and", 
    "yes, that's how it's pronounced.", 
    "You may be wondering whether Rails provides the alternative to use that", 
    "for things like cookies, and the answer is yes.", 
    "But that's an advanced topic we won't cover for a little while yet.", 
    "Last question, and then you guys are out of here.", 
    "Ben Bitdiddle, yeah.", 
    "You guys remember Ben Bitdiddle from 61A?", 
    "I hope they still have him.", 
    "Claims that you can put arbitrary objects, not just simple things like", 
    "strings and integers into the session.", 
    "So true, knock yourself out?", 
    "True, but a bad idea?", 
    "False because hashes can't contain arbitrary things?", 
    "Or false because session isn't really a hash, is just quacks like one?"
  ]
}